
TEST_NHUNG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006458  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  080065f8  080065f8  000075f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a60  08006a60  000081e0  2**0
                  CONTENTS
  4 .ARM          00000008  08006a60  08006a60  00007a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a68  08006a68  000081e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a68  08006a68  00007a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006a6c  08006a6c  00007a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  08006a70  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  200001e0  08006c50  000081e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  08006c50  0000835c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000081e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005b88  00000000  00000000  00008210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001818  00000000  00000000  0000dd98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005b8  00000000  00000000  0000f5b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000418  00000000  00000000  0000fb68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e7d  00000000  00000000  0000ff80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008c4e  00000000  00000000  00026dfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000872fd  00000000  00000000  0002fa4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b6d48  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000279c  00000000  00000000  000b6d8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000b9528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080065e0 	.word	0x080065e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	080065e0 	.word	0x080065e0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <I2C1_Init>:
#include "i2c_lcd.h"
#include "system_config.h"
#include "stm32f4xx.h"
#include "stm32f4xx_hal.h"

void I2C1_Init(void) {
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000eac:	4b23      	ldr	r3, [pc, #140]	@ (8000f3c <I2C1_Init+0x94>)
 8000eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb0:	4a22      	ldr	r2, [pc, #136]	@ (8000f3c <I2C1_Init+0x94>)
 8000eb2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000eb6:	6413      	str	r3, [r2, #64]	@ 0x40
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000eb8:	4b20      	ldr	r3, [pc, #128]	@ (8000f3c <I2C1_Init+0x94>)
 8000eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebc:	4a1f      	ldr	r2, [pc, #124]	@ (8000f3c <I2C1_Init+0x94>)
 8000ebe:	f043 0302 	orr.w	r3, r3, #2
 8000ec2:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOB->MODER &= ~((3U << (I2C_SCL_PIN * 2)) | (3U << (I2C_SDA_PIN * 2)));
 8000ec4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f40 <I2C1_Init+0x98>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a1d      	ldr	r2, [pc, #116]	@ (8000f40 <I2C1_Init+0x98>)
 8000eca:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000ece:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= (2U << (I2C_SCL_PIN * 2)) | (2U << (I2C_SDA_PIN * 2));
 8000ed0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f40 <I2C1_Init+0x98>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a1a      	ldr	r2, [pc, #104]	@ (8000f40 <I2C1_Init+0x98>)
 8000ed6:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 8000eda:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER |= (1U << I2C_SCL_PIN) | (1U << I2C_SDA_PIN);
 8000edc:	4b18      	ldr	r3, [pc, #96]	@ (8000f40 <I2C1_Init+0x98>)
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	4a17      	ldr	r2, [pc, #92]	@ (8000f40 <I2C1_Init+0x98>)
 8000ee2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000ee6:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR |= (3U << (I2C_SCL_PIN * 2)) | (3U << (I2C_SDA_PIN * 2));
 8000ee8:	4b15      	ldr	r3, [pc, #84]	@ (8000f40 <I2C1_Init+0x98>)
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	4a14      	ldr	r2, [pc, #80]	@ (8000f40 <I2C1_Init+0x98>)
 8000eee:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 8000ef2:	6093      	str	r3, [r2, #8]
    GPIOB->PUPDR |= (1U << (I2C_SCL_PIN * 2)) | (1U << (I2C_SDA_PIN * 2));
 8000ef4:	4b12      	ldr	r3, [pc, #72]	@ (8000f40 <I2C1_Init+0x98>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	4a11      	ldr	r2, [pc, #68]	@ (8000f40 <I2C1_Init+0x98>)
 8000efa:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 8000efe:	60d3      	str	r3, [r2, #12]
    GPIOB->AFR[1] |= (4U << ((I2C_SCL_PIN - 8) * 4)) | (4U << ((I2C_SDA_PIN - 8) * 4));
 8000f00:	4b0f      	ldr	r3, [pc, #60]	@ (8000f40 <I2C1_Init+0x98>)
 8000f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f04:	4a0e      	ldr	r2, [pc, #56]	@ (8000f40 <I2C1_Init+0x98>)
 8000f06:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8000f0a:	6253      	str	r3, [r2, #36]	@ 0x24
    I2C1->CR1 = 0;
 8000f0c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f44 <I2C1_Init+0x9c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
    I2C1->CR2 = 42;
 8000f12:	4b0c      	ldr	r3, [pc, #48]	@ (8000f44 <I2C1_Init+0x9c>)
 8000f14:	222a      	movs	r2, #42	@ 0x2a
 8000f16:	605a      	str	r2, [r3, #4]
    I2C1->CCR = 210;
 8000f18:	4b0a      	ldr	r3, [pc, #40]	@ (8000f44 <I2C1_Init+0x9c>)
 8000f1a:	22d2      	movs	r2, #210	@ 0xd2
 8000f1c:	61da      	str	r2, [r3, #28]
    I2C1->TRISE = 43;
 8000f1e:	4b09      	ldr	r3, [pc, #36]	@ (8000f44 <I2C1_Init+0x9c>)
 8000f20:	222b      	movs	r2, #43	@ 0x2b
 8000f22:	621a      	str	r2, [r3, #32]
    I2C1->CR1 |= I2C_CR1_PE;
 8000f24:	4b07      	ldr	r3, [pc, #28]	@ (8000f44 <I2C1_Init+0x9c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a06      	ldr	r2, [pc, #24]	@ (8000f44 <I2C1_Init+0x9c>)
 8000f2a:	f043 0301 	orr.w	r3, r3, #1
 8000f2e:	6013      	str	r3, [r2, #0]
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	40023800 	.word	0x40023800
 8000f40:	40020400 	.word	0x40020400
 8000f44:	40005400 	.word	0x40005400

08000f48 <I2C1_SendBytes>:


void I2C1_SendBytes(uint8_t addr, uint8_t *data, uint8_t len) {
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	6039      	str	r1, [r7, #0]
 8000f52:	71fb      	strb	r3, [r7, #7]
 8000f54:	4613      	mov	r3, r2
 8000f56:	71bb      	strb	r3, [r7, #6]
    uint32_t timeout = 1000000;
 8000f58:	4b42      	ldr	r3, [pc, #264]	@ (8001064 <I2C1_SendBytes+0x11c>)
 8000f5a:	60fb      	str	r3, [r7, #12]
    while (I2C1->SR2 & I2C_SR2_BUSY && timeout--) {
 8000f5c:	e002      	b.n	8000f64 <I2C1_SendBytes+0x1c>
        if (timeout == 0) return;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d070      	beq.n	8001046 <I2C1_SendBytes+0xfe>
    while (I2C1->SR2 & I2C_SR2_BUSY && timeout--) {
 8000f64:	4b40      	ldr	r3, [pc, #256]	@ (8001068 <I2C1_SendBytes+0x120>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	f003 0302 	and.w	r3, r3, #2
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d004      	beq.n	8000f7a <I2C1_SendBytes+0x32>
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	1e5a      	subs	r2, r3, #1
 8000f74:	60fa      	str	r2, [r7, #12]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d1f1      	bne.n	8000f5e <I2C1_SendBytes+0x16>
    }
    I2C1->CR1 |= I2C_CR1_START;
 8000f7a:	4b3b      	ldr	r3, [pc, #236]	@ (8001068 <I2C1_SendBytes+0x120>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a3a      	ldr	r2, [pc, #232]	@ (8001068 <I2C1_SendBytes+0x120>)
 8000f80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f84:	6013      	str	r3, [r2, #0]
    timeout = 1000000;
 8000f86:	4b37      	ldr	r3, [pc, #220]	@ (8001064 <I2C1_SendBytes+0x11c>)
 8000f88:	60fb      	str	r3, [r7, #12]
    while (!(I2C1->SR1 & I2C_SR1_SB) && timeout--) {
 8000f8a:	e002      	b.n	8000f92 <I2C1_SendBytes+0x4a>
        if (timeout == 0) return;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d05b      	beq.n	800104a <I2C1_SendBytes+0x102>
    while (!(I2C1->SR1 & I2C_SR1_SB) && timeout--) {
 8000f92:	4b35      	ldr	r3, [pc, #212]	@ (8001068 <I2C1_SendBytes+0x120>)
 8000f94:	695b      	ldr	r3, [r3, #20]
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d104      	bne.n	8000fa8 <I2C1_SendBytes+0x60>
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	1e5a      	subs	r2, r3, #1
 8000fa2:	60fa      	str	r2, [r7, #12]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d1f1      	bne.n	8000f8c <I2C1_SendBytes+0x44>
    }
    I2C1->DR = addr;
 8000fa8:	4a2f      	ldr	r2, [pc, #188]	@ (8001068 <I2C1_SendBytes+0x120>)
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	6113      	str	r3, [r2, #16]
    timeout = 1000000;
 8000fae:	4b2d      	ldr	r3, [pc, #180]	@ (8001064 <I2C1_SendBytes+0x11c>)
 8000fb0:	60fb      	str	r3, [r7, #12]
    while (!(I2C1->SR1 & I2C_SR1_ADDR) && timeout--) {
 8000fb2:	e002      	b.n	8000fba <I2C1_SendBytes+0x72>
        if (timeout == 0) return;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d049      	beq.n	800104e <I2C1_SendBytes+0x106>
    while (!(I2C1->SR1 & I2C_SR1_ADDR) && timeout--) {
 8000fba:	4b2b      	ldr	r3, [pc, #172]	@ (8001068 <I2C1_SendBytes+0x120>)
 8000fbc:	695b      	ldr	r3, [r3, #20]
 8000fbe:	f003 0302 	and.w	r3, r3, #2
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d104      	bne.n	8000fd0 <I2C1_SendBytes+0x88>
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	1e5a      	subs	r2, r3, #1
 8000fca:	60fa      	str	r2, [r7, #12]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d1f1      	bne.n	8000fb4 <I2C1_SendBytes+0x6c>
    }
    (void)I2C1->SR2;
 8000fd0:	4b25      	ldr	r3, [pc, #148]	@ (8001068 <I2C1_SendBytes+0x120>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
    for (uint8_t i = 0; i < len; i++) {
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	72fb      	strb	r3, [r7, #11]
 8000fd8:	e019      	b.n	800100e <I2C1_SendBytes+0xc6>
        timeout = 1000000;
 8000fda:	4b22      	ldr	r3, [pc, #136]	@ (8001064 <I2C1_SendBytes+0x11c>)
 8000fdc:	60fb      	str	r3, [r7, #12]
        while (!(I2C1->SR1 & I2C_SR1_TXE) && timeout--) {
 8000fde:	e002      	b.n	8000fe6 <I2C1_SendBytes+0x9e>
            if (timeout == 0) return;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d035      	beq.n	8001052 <I2C1_SendBytes+0x10a>
        while (!(I2C1->SR1 & I2C_SR1_TXE) && timeout--) {
 8000fe6:	4b20      	ldr	r3, [pc, #128]	@ (8001068 <I2C1_SendBytes+0x120>)
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d104      	bne.n	8000ffc <I2C1_SendBytes+0xb4>
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	1e5a      	subs	r2, r3, #1
 8000ff6:	60fa      	str	r2, [r7, #12]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d1f1      	bne.n	8000fe0 <I2C1_SendBytes+0x98>
        }
        I2C1->DR = data[i];
 8000ffc:	7afb      	ldrb	r3, [r7, #11]
 8000ffe:	683a      	ldr	r2, [r7, #0]
 8001000:	4413      	add	r3, r2
 8001002:	781a      	ldrb	r2, [r3, #0]
 8001004:	4b18      	ldr	r3, [pc, #96]	@ (8001068 <I2C1_SendBytes+0x120>)
 8001006:	611a      	str	r2, [r3, #16]
    for (uint8_t i = 0; i < len; i++) {
 8001008:	7afb      	ldrb	r3, [r7, #11]
 800100a:	3301      	adds	r3, #1
 800100c:	72fb      	strb	r3, [r7, #11]
 800100e:	7afa      	ldrb	r2, [r7, #11]
 8001010:	79bb      	ldrb	r3, [r7, #6]
 8001012:	429a      	cmp	r2, r3
 8001014:	d3e1      	bcc.n	8000fda <I2C1_SendBytes+0x92>
    }
    timeout = 1000000;
 8001016:	4b13      	ldr	r3, [pc, #76]	@ (8001064 <I2C1_SendBytes+0x11c>)
 8001018:	60fb      	str	r3, [r7, #12]
    while (!(I2C1->SR1 & I2C_SR1_BTF) && timeout--) {
 800101a:	e002      	b.n	8001022 <I2C1_SendBytes+0xda>
        if (timeout == 0) return;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d019      	beq.n	8001056 <I2C1_SendBytes+0x10e>
    while (!(I2C1->SR1 & I2C_SR1_BTF) && timeout--) {
 8001022:	4b11      	ldr	r3, [pc, #68]	@ (8001068 <I2C1_SendBytes+0x120>)
 8001024:	695b      	ldr	r3, [r3, #20]
 8001026:	f003 0304 	and.w	r3, r3, #4
 800102a:	2b00      	cmp	r3, #0
 800102c:	d104      	bne.n	8001038 <I2C1_SendBytes+0xf0>
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	1e5a      	subs	r2, r3, #1
 8001032:	60fa      	str	r2, [r7, #12]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d1f1      	bne.n	800101c <I2C1_SendBytes+0xd4>
    }
    I2C1->CR1 |= I2C_CR1_STOP;
 8001038:	4b0b      	ldr	r3, [pc, #44]	@ (8001068 <I2C1_SendBytes+0x120>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a0a      	ldr	r2, [pc, #40]	@ (8001068 <I2C1_SendBytes+0x120>)
 800103e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001042:	6013      	str	r3, [r2, #0]
 8001044:	e008      	b.n	8001058 <I2C1_SendBytes+0x110>
        if (timeout == 0) return;
 8001046:	bf00      	nop
 8001048:	e006      	b.n	8001058 <I2C1_SendBytes+0x110>
        if (timeout == 0) return;
 800104a:	bf00      	nop
 800104c:	e004      	b.n	8001058 <I2C1_SendBytes+0x110>
        if (timeout == 0) return;
 800104e:	bf00      	nop
 8001050:	e002      	b.n	8001058 <I2C1_SendBytes+0x110>
            if (timeout == 0) return;
 8001052:	bf00      	nop
 8001054:	e000      	b.n	8001058 <I2C1_SendBytes+0x110>
        if (timeout == 0) return;
 8001056:	bf00      	nop
}
 8001058:	3714      	adds	r7, #20
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	000f4240 	.word	0x000f4240
 8001068:	40005400 	.word	0x40005400

0800106c <LCD_SendCommand>:

void LCD_SendCommand(uint8_t cmd) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	71fb      	strb	r3, [r7, #7]
    uint8_t data[4];
    data[0] = (cmd & 0xF0) | 0x0C;
 8001076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107a:	f023 030f 	bic.w	r3, r3, #15
 800107e:	b25b      	sxtb	r3, r3
 8001080:	f043 030c 	orr.w	r3, r3, #12
 8001084:	b25b      	sxtb	r3, r3
 8001086:	b2db      	uxtb	r3, r3
 8001088:	733b      	strb	r3, [r7, #12]
    data[1] = (cmd & 0xF0) | 0x08;
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	f023 030f 	bic.w	r3, r3, #15
 8001092:	b25b      	sxtb	r3, r3
 8001094:	f043 0308 	orr.w	r3, r3, #8
 8001098:	b25b      	sxtb	r3, r3
 800109a:	b2db      	uxtb	r3, r3
 800109c:	737b      	strb	r3, [r7, #13]
    data[2] = ((cmd << 4) & 0xF0) | 0x0C;
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	011b      	lsls	r3, r3, #4
 80010a2:	b25b      	sxtb	r3, r3
 80010a4:	f043 030c 	orr.w	r3, r3, #12
 80010a8:	b25b      	sxtb	r3, r3
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	73bb      	strb	r3, [r7, #14]
    data[3] = ((cmd << 4) & 0xF0) | 0x08;
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	011b      	lsls	r3, r3, #4
 80010b2:	b25b      	sxtb	r3, r3
 80010b4:	f043 0308 	orr.w	r3, r3, #8
 80010b8:	b25b      	sxtb	r3, r3
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	73fb      	strb	r3, [r7, #15]
    I2C1_SendBytes(LCD_I2C_ADDR, data, 4);
 80010be:	f107 030c 	add.w	r3, r7, #12
 80010c2:	2204      	movs	r2, #4
 80010c4:	4619      	mov	r1, r3
 80010c6:	204e      	movs	r0, #78	@ 0x4e
 80010c8:	f7ff ff3e 	bl	8000f48 <I2C1_SendBytes>
    delay_ms(2);
 80010cc:	2002      	movs	r0, #2
 80010ce:	f001 f80b 	bl	80020e8 <delay_ms>
}
 80010d2:	bf00      	nop
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <LCD_SendData>:

void LCD_SendData(uint8_t data) {
 80010da:	b580      	push	{r7, lr}
 80010dc:	b084      	sub	sp, #16
 80010de:	af00      	add	r7, sp, #0
 80010e0:	4603      	mov	r3, r0
 80010e2:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];
    buf[0] = (data & 0xF0) | 0x0D;
 80010e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e8:	f023 030f 	bic.w	r3, r3, #15
 80010ec:	b25b      	sxtb	r3, r3
 80010ee:	f043 030d 	orr.w	r3, r3, #13
 80010f2:	b25b      	sxtb	r3, r3
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	733b      	strb	r3, [r7, #12]
    buf[1] = (data & 0xF0) | 0x09;
 80010f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fc:	f023 030f 	bic.w	r3, r3, #15
 8001100:	b25b      	sxtb	r3, r3
 8001102:	f043 0309 	orr.w	r3, r3, #9
 8001106:	b25b      	sxtb	r3, r3
 8001108:	b2db      	uxtb	r3, r3
 800110a:	737b      	strb	r3, [r7, #13]
    buf[2] = ((data << 4) & 0xF0) | 0x0D;
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	011b      	lsls	r3, r3, #4
 8001110:	b25b      	sxtb	r3, r3
 8001112:	f043 030d 	orr.w	r3, r3, #13
 8001116:	b25b      	sxtb	r3, r3
 8001118:	b2db      	uxtb	r3, r3
 800111a:	73bb      	strb	r3, [r7, #14]
    buf[3] = ((data << 4) & 0xF0) | 0x09;
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	011b      	lsls	r3, r3, #4
 8001120:	b25b      	sxtb	r3, r3
 8001122:	f043 0309 	orr.w	r3, r3, #9
 8001126:	b25b      	sxtb	r3, r3
 8001128:	b2db      	uxtb	r3, r3
 800112a:	73fb      	strb	r3, [r7, #15]
    I2C1_SendBytes(LCD_I2C_ADDR, buf, 4);
 800112c:	f107 030c 	add.w	r3, r7, #12
 8001130:	2204      	movs	r2, #4
 8001132:	4619      	mov	r1, r3
 8001134:	204e      	movs	r0, #78	@ 0x4e
 8001136:	f7ff ff07 	bl	8000f48 <I2C1_SendBytes>
    delay_ms(2);
 800113a:	2002      	movs	r0, #2
 800113c:	f000 ffd4 	bl	80020e8 <delay_ms>
}
 8001140:	bf00      	nop
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <LCD_SendString>:

void LCD_SendString(char *str) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
    while (*str) {
 8001150:	e006      	b.n	8001160 <LCD_SendString+0x18>
        LCD_SendData(*str++);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	1c5a      	adds	r2, r3, #1
 8001156:	607a      	str	r2, [r7, #4]
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff ffbd 	bl	80010da <LCD_SendData>
    while (*str) {
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d1f4      	bne.n	8001152 <LCD_SendString+0xa>
    }
}
 8001168:	bf00      	nop
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <LCD_Init>:

void LCD_Init(void) {
 8001172:	b580      	push	{r7, lr}
 8001174:	af00      	add	r7, sp, #0
    delay_ms(50);
 8001176:	2032      	movs	r0, #50	@ 0x32
 8001178:	f000 ffb6 	bl	80020e8 <delay_ms>
    LCD_SendCommand(0x30);
 800117c:	2030      	movs	r0, #48	@ 0x30
 800117e:	f7ff ff75 	bl	800106c <LCD_SendCommand>
    delay_ms(5);
 8001182:	2005      	movs	r0, #5
 8001184:	f000 ffb0 	bl	80020e8 <delay_ms>
    LCD_SendCommand(0x30);
 8001188:	2030      	movs	r0, #48	@ 0x30
 800118a:	f7ff ff6f 	bl	800106c <LCD_SendCommand>
    delay_ms(1);
 800118e:	2001      	movs	r0, #1
 8001190:	f000 ffaa 	bl	80020e8 <delay_ms>
    LCD_SendCommand(0x30);
 8001194:	2030      	movs	r0, #48	@ 0x30
 8001196:	f7ff ff69 	bl	800106c <LCD_SendCommand>
    delay_ms(1);
 800119a:	2001      	movs	r0, #1
 800119c:	f000 ffa4 	bl	80020e8 <delay_ms>
    LCD_SendCommand(0x02);
 80011a0:	2002      	movs	r0, #2
 80011a2:	f7ff ff63 	bl	800106c <LCD_SendCommand>
    delay_ms(1);
 80011a6:	2001      	movs	r0, #1
 80011a8:	f000 ff9e 	bl	80020e8 <delay_ms>
    LCD_SendCommand(0x28);
 80011ac:	2028      	movs	r0, #40	@ 0x28
 80011ae:	f7ff ff5d 	bl	800106c <LCD_SendCommand>
    delay_ms(1);
 80011b2:	2001      	movs	r0, #1
 80011b4:	f000 ff98 	bl	80020e8 <delay_ms>
    LCD_SendCommand(0x08);
 80011b8:	2008      	movs	r0, #8
 80011ba:	f7ff ff57 	bl	800106c <LCD_SendCommand>
    delay_ms(1);
 80011be:	2001      	movs	r0, #1
 80011c0:	f000 ff92 	bl	80020e8 <delay_ms>
    LCD_SendCommand(0x01);
 80011c4:	2001      	movs	r0, #1
 80011c6:	f7ff ff51 	bl	800106c <LCD_SendCommand>
    delay_ms(2);
 80011ca:	2002      	movs	r0, #2
 80011cc:	f000 ff8c 	bl	80020e8 <delay_ms>
    LCD_SendCommand(0x06);
 80011d0:	2006      	movs	r0, #6
 80011d2:	f7ff ff4b 	bl	800106c <LCD_SendCommand>
    delay_ms(1);
 80011d6:	2001      	movs	r0, #1
 80011d8:	f000 ff86 	bl	80020e8 <delay_ms>
    LCD_SendCommand(0x0C);
 80011dc:	200c      	movs	r0, #12
 80011de:	f7ff ff45 	bl	800106c <LCD_SendCommand>
    delay_ms(1);
 80011e2:	2001      	movs	r0, #1
 80011e4:	f000 ff80 	bl	80020e8 <delay_ms>
}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}

080011ec <LCD_SetCursor>:

void LCD_SetCursor(uint8_t row, uint8_t col) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	460a      	mov	r2, r1
 80011f6:	71fb      	strb	r3, [r7, #7]
 80011f8:	4613      	mov	r3, r2
 80011fa:	71bb      	strb	r3, [r7, #6]
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d103      	bne.n	800120a <LCD_SetCursor+0x1e>
 8001202:	79bb      	ldrb	r3, [r7, #6]
 8001204:	3b80      	subs	r3, #128	@ 0x80
 8001206:	b2db      	uxtb	r3, r3
 8001208:	e002      	b.n	8001210 <LCD_SetCursor+0x24>
 800120a:	79bb      	ldrb	r3, [r7, #6]
 800120c:	3b40      	subs	r3, #64	@ 0x40
 800120e:	b2db      	uxtb	r3, r3
 8001210:	73fb      	strb	r3, [r7, #15]
    LCD_SendCommand(pos);
 8001212:	7bfb      	ldrb	r3, [r7, #15]
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff ff29 	bl	800106c <LCD_SendCommand>
    delay_ms(2);
 800121a:	2002      	movs	r0, #2
 800121c:	f000 ff64 	bl	80020e8 <delay_ms>
}
 8001220:	bf00      	nop
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <main>:
#include "servo.h"
#include "uart.h"
#include "rgb_led.h"
#include <stdio.h>

int main(void) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b092      	sub	sp, #72	@ 0x48
 800122c:	af04      	add	r7, sp, #16
    SystemClock_Config();
 800122e:	f000 ff73 	bl	8002118 <SystemClock_Config>
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8001232:	4ba7      	ldr	r3, [pc, #668]	@ (80014d0 <main+0x2a8>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001236:	4aa6      	ldr	r2, [pc, #664]	@ (80014d0 <main+0x2a8>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOA->MODER |= (1 << 10);
 800123e:	4ba5      	ldr	r3, [pc, #660]	@ (80014d4 <main+0x2ac>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4aa4      	ldr	r2, [pc, #656]	@ (80014d4 <main+0x2ac>)
 8001244:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001248:	6013      	str	r3, [r2, #0]
    GPIOA->ODR &= ~(1 << 5);
 800124a:	4ba2      	ldr	r3, [pc, #648]	@ (80014d4 <main+0x2ac>)
 800124c:	695b      	ldr	r3, [r3, #20]
 800124e:	4aa1      	ldr	r2, [pc, #644]	@ (80014d4 <main+0x2ac>)
 8001250:	f023 0320 	bic.w	r3, r3, #32
 8001254:	6153      	str	r3, [r2, #20]
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8001256:	4b9e      	ldr	r3, [pc, #632]	@ (80014d0 <main+0x2a8>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	4a9d      	ldr	r2, [pc, #628]	@ (80014d0 <main+0x2a8>)
 800125c:	f043 0304 	orr.w	r3, r3, #4
 8001260:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOC->MODER &= ~(3U << (13 * 2));
 8001262:	4b9d      	ldr	r3, [pc, #628]	@ (80014d8 <main+0x2b0>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a9c      	ldr	r2, [pc, #624]	@ (80014d8 <main+0x2b0>)
 8001268:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800126c:	6013      	str	r3, [r2, #0]
    GPIOC->PUPDR |= (1U << (13 * 2));
 800126e:	4b9a      	ldr	r3, [pc, #616]	@ (80014d8 <main+0x2b0>)
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	4a99      	ldr	r2, [pc, #612]	@ (80014d8 <main+0x2b0>)
 8001274:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001278:	60d3      	str	r3, [r2, #12]
    GPIOC->MODER &= ~(3U << (0 * 2));
 800127a:	4b97      	ldr	r3, [pc, #604]	@ (80014d8 <main+0x2b0>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a96      	ldr	r2, [pc, #600]	@ (80014d8 <main+0x2b0>)
 8001280:	f023 0303 	bic.w	r3, r3, #3
 8001284:	6013      	str	r3, [r2, #0]
    GPIOC->PUPDR |= (1U << (0 * 2));
 8001286:	4b94      	ldr	r3, [pc, #592]	@ (80014d8 <main+0x2b0>)
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	4a93      	ldr	r2, [pc, #588]	@ (80014d8 <main+0x2b0>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	60d3      	str	r3, [r2, #12]
    I2C1_Init();
 8001292:	f7ff fe09 	bl	8000ea8 <I2C1_Init>
    LCD_Init();
 8001296:	f7ff ff6c 	bl	8001172 <LCD_Init>
    ADC_Init();
 800129a:	f000 f9f3 	bl	8001684 <ADC_Init>
    Relay_GPIO_Init();
 800129e:	f000 fb5d 	bl	800195c <Relay_GPIO_Init>
    Servo_Init();
 80012a2:	f000 fd3d 	bl	8001d20 <Servo_Init>
    UART1_Init();
 80012a6:	f000 ffbf 	bl	8002228 <UART1_Init>
    RGB_LED_Init();
 80012aa:	f000 fbcf 	bl	8001a4c <RGB_LED_Init>
    TIM2_Init();
 80012ae:	f000 fc03 	bl	8001ab8 <TIM2_Init>

    char buffer[20];
    char uart_buffer[10];
    char uart_cmd[2];
    float ppm;
    uint8_t system_active = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    uint8_t last_system_active = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    uint8_t last_sw1_state = 1;
 80012be:	2301      	movs	r3, #1
 80012c0:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    uint8_t last_sw2_state = 1;
 80012c4:	2301      	movs	r3, #1
 80012c6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    uint8_t alert_state;
    uint32_t last_update = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	62bb      	str	r3, [r7, #40]	@ 0x28

    LCD_SetCursor(0, 0);
 80012ce:	2100      	movs	r1, #0
 80012d0:	2000      	movs	r0, #0
 80012d2:	f7ff ff8b 	bl	80011ec <LCD_SetCursor>
    LCD_SendString("MQ2 Gas Monitor ");
 80012d6:	4881      	ldr	r0, [pc, #516]	@ (80014dc <main+0x2b4>)
 80012d8:	f7ff ff36 	bl	8001148 <LCD_SendString>
    LCD_SetCursor(1, 0);
 80012dc:	2100      	movs	r1, #0
 80012de:	2001      	movs	r0, #1
 80012e0:	f7ff ff84 	bl	80011ec <LCD_SetCursor>
    LCD_SendString("Sys: LOADING... ");
 80012e4:	487e      	ldr	r0, [pc, #504]	@ (80014e0 <main+0x2b8>)
 80012e6:	f7ff ff2f 	bl	8001148 <LCD_SendString>

    Servo_SetAngle(180);
 80012ea:	20b4      	movs	r0, #180	@ 0xb4
 80012ec:	f000 fd8c 	bl	8001e08 <Servo_SetAngle>
    delay_ms(2000);
 80012f0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80012f4:	f000 fef8 	bl	80020e8 <delay_ms>
    Servo_SetAngle(0);
 80012f8:	2000      	movs	r0, #0
 80012fa:	f000 fd85 	bl	8001e08 <Servo_SetAngle>
    delay_ms(2000);
 80012fe:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001302:	f000 fef1 	bl	80020e8 <delay_ms>

    snprintf(uart_buffer, sizeof(uart_buffer), "S%d\n", system_active);
 8001306:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800130a:	1d38      	adds	r0, r7, #4
 800130c:	4a75      	ldr	r2, [pc, #468]	@ (80014e4 <main+0x2bc>)
 800130e:	210a      	movs	r1, #10
 8001310:	f002 fadc 	bl	80038cc <sniprintf>
    UART1_SendString(uart_buffer);
 8001314:	1d3b      	adds	r3, r7, #4
 8001316:	4618      	mov	r0, r3
 8001318:	f000 ffd4 	bl	80022c4 <UART1_SendString>

    while (1) {
        uint8_t current_sw1_state = (GPIOC->IDR & (1 << 13)) ? 1 : 0;
 800131c:	4b6e      	ldr	r3, [pc, #440]	@ (80014d8 <main+0x2b0>)
 800131e:	691b      	ldr	r3, [r3, #16]
 8001320:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001324:	2b00      	cmp	r3, #0
 8001326:	bf14      	ite	ne
 8001328:	2301      	movne	r3, #1
 800132a:	2300      	moveq	r3, #0
 800132c:	b2db      	uxtb	r3, r3
 800132e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (last_sw1_state == 1 && current_sw1_state == 0) {
 8001332:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8001336:	2b01      	cmp	r3, #1
 8001338:	d10f      	bne.n	800135a <main+0x132>
 800133a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800133e:	2b00      	cmp	r3, #0
 8001340:	d10b      	bne.n	800135a <main+0x132>
            system_active = !system_active;
 8001342:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001346:	2b00      	cmp	r3, #0
 8001348:	bf0c      	ite	eq
 800134a:	2301      	moveq	r3, #1
 800134c:	2300      	movne	r3, #0
 800134e:	b2db      	uxtb	r3, r3
 8001350:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            delay_ms(100);
 8001354:	2064      	movs	r0, #100	@ 0x64
 8001356:	f000 fec7 	bl	80020e8 <delay_ms>
        }
        last_sw1_state = current_sw1_state;
 800135a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800135e:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

        uint8_t current_sw2_state = (GPIOC->IDR & (1 << 0)) ? 1 : 0;
 8001362:	4b5d      	ldr	r3, [pc, #372]	@ (80014d8 <main+0x2b0>)
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	2b00      	cmp	r3, #0
 800136c:	bf14      	ite	ne
 800136e:	2301      	movne	r3, #1
 8001370:	2300      	moveq	r3, #0
 8001372:	b2db      	uxtb	r3, r3
 8001374:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        if (last_sw2_state == 1 && current_sw2_state == 0) {
 8001378:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800137c:	2b01      	cmp	r3, #1
 800137e:	d13e      	bne.n	80013fe <main+0x1d6>
 8001380:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001384:	2b00      	cmp	r3, #0
 8001386:	d13a      	bne.n	80013fe <main+0x1d6>
            system_active = 0;
 8001388:	2300      	movs	r3, #0
 800138a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            last_system_active = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
            RELAY1_GPIO_PORT->ODR &= ~(1U << RELAY1_PIN);
 8001394:	4b54      	ldr	r3, [pc, #336]	@ (80014e8 <main+0x2c0>)
 8001396:	695b      	ldr	r3, [r3, #20]
 8001398:	4a53      	ldr	r2, [pc, #332]	@ (80014e8 <main+0x2c0>)
 800139a:	f023 0302 	bic.w	r3, r3, #2
 800139e:	6153      	str	r3, [r2, #20]
            RELAY2_GPIO_PORT->ODR &= ~(1U << RELAY2_PIN);
 80013a0:	4b51      	ldr	r3, [pc, #324]	@ (80014e8 <main+0x2c0>)
 80013a2:	695b      	ldr	r3, [r3, #20]
 80013a4:	4a50      	ldr	r2, [pc, #320]	@ (80014e8 <main+0x2c0>)
 80013a6:	f023 0304 	bic.w	r3, r3, #4
 80013aa:	6153      	str	r3, [r2, #20]
            Servo_SetAngle(0);
 80013ac:	2000      	movs	r0, #0
 80013ae:	f000 fd2b 	bl	8001e08 <Servo_SetAngle>
            GPIOA->ODR &= ~(1 << 5);
 80013b2:	4b48      	ldr	r3, [pc, #288]	@ (80014d4 <main+0x2ac>)
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	4a47      	ldr	r2, [pc, #284]	@ (80014d4 <main+0x2ac>)
 80013b8:	f023 0320 	bic.w	r3, r3, #32
 80013bc:	6153      	str	r3, [r2, #20]
            LCD_SetCursor(0, 0);
 80013be:	2100      	movs	r1, #0
 80013c0:	2000      	movs	r0, #0
 80013c2:	f7ff ff13 	bl	80011ec <LCD_SetCursor>
            LCD_SendString("MQ2 Gas Monitor ");
 80013c6:	4845      	ldr	r0, [pc, #276]	@ (80014dc <main+0x2b4>)
 80013c8:	f7ff febe 	bl	8001148 <LCD_SendString>
            LCD_SetCursor(1, 0);
 80013cc:	2100      	movs	r1, #0
 80013ce:	2001      	movs	r0, #1
 80013d0:	f7ff ff0c 	bl	80011ec <LCD_SetCursor>
            LCD_SendString("Sys: LOADING... ");
 80013d4:	4842      	ldr	r0, [pc, #264]	@ (80014e0 <main+0x2b8>)
 80013d6:	f7ff feb7 	bl	8001148 <LCD_SendString>
            delay_ms(2000);
 80013da:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80013de:	f000 fe83 	bl	80020e8 <delay_ms>
            snprintf(uart_buffer, sizeof(uart_buffer), "S%d\n", system_active);
 80013e2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80013e6:	1d38      	adds	r0, r7, #4
 80013e8:	4a3e      	ldr	r2, [pc, #248]	@ (80014e4 <main+0x2bc>)
 80013ea:	210a      	movs	r1, #10
 80013ec:	f002 fa6e 	bl	80038cc <sniprintf>
            UART1_SendString(uart_buffer);
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	4618      	mov	r0, r3
 80013f4:	f000 ff66 	bl	80022c4 <UART1_SendString>
            delay_ms(100);
 80013f8:	2064      	movs	r0, #100	@ 0x64
 80013fa:	f000 fe75 	bl	80020e8 <delay_ms>
        }
        last_sw2_state = current_sw2_state;
 80013fe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001402:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30

        if (USART1->SR & USART_SR_RXNE) {
 8001406:	4b39      	ldr	r3, [pc, #228]	@ (80014ec <main+0x2c4>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0320 	and.w	r3, r3, #32
 800140e:	2b00      	cmp	r3, #0
 8001410:	d011      	beq.n	8001436 <main+0x20e>
            UART1_ReceiveString(uart_cmd, sizeof(uart_cmd));
 8001412:	463b      	mov	r3, r7
 8001414:	2102      	movs	r1, #2
 8001416:	4618      	mov	r0, r3
 8001418:	f000 ff74 	bl	8002304 <UART1_ReceiveString>
            if (uart_cmd[0] == '1') {
 800141c:	783b      	ldrb	r3, [r7, #0]
 800141e:	2b31      	cmp	r3, #49	@ 0x31
 8001420:	d103      	bne.n	800142a <main+0x202>
                system_active = 1;
 8001422:	2301      	movs	r3, #1
 8001424:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8001428:	e005      	b.n	8001436 <main+0x20e>
            } else if (uart_cmd[0] == '0') {
 800142a:	783b      	ldrb	r3, [r7, #0]
 800142c:	2b30      	cmp	r3, #48	@ 0x30
 800142e:	d102      	bne.n	8001436 <main+0x20e>
                system_active = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            }
        }

        if (system_active != last_system_active) {
 8001436:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800143a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800143e:	429a      	cmp	r2, r3
 8001440:	d00e      	beq.n	8001460 <main+0x238>
            snprintf(uart_buffer, sizeof(uart_buffer), "S%d\n", system_active);
 8001442:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001446:	1d38      	adds	r0, r7, #4
 8001448:	4a26      	ldr	r2, [pc, #152]	@ (80014e4 <main+0x2bc>)
 800144a:	210a      	movs	r1, #10
 800144c:	f002 fa3e 	bl	80038cc <sniprintf>
            UART1_SendString(uart_buffer);
 8001450:	1d3b      	adds	r3, r7, #4
 8001452:	4618      	mov	r0, r3
 8001454:	f000 ff36 	bl	80022c4 <UART1_SendString>
            last_system_active = system_active;
 8001458:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800145c:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
        }

        if (system_active) {
 8001460:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001464:	2b00      	cmp	r3, #0
 8001466:	f000 80c0 	beq.w	80015ea <main+0x3c2>
            ppm = MQ2_ReadPPM();
 800146a:	f000 f94f 	bl	800170c <MQ2_ReadPPM>
 800146e:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
            alert_state = GetGasAlertState(ppm);
 8001472:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8001476:	f000 fa35 	bl	80018e4 <GetGasAlertState>
 800147a:	4603      	mov	r3, r0
 800147c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            if (alert_state >= 2) {
 8001480:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001484:	2b01      	cmp	r3, #1
 8001486:	d903      	bls.n	8001490 <main+0x268>
                Servo_SetAngle(180);
 8001488:	20b4      	movs	r0, #180	@ 0xb4
 800148a:	f000 fcbd 	bl	8001e08 <Servo_SetAngle>
 800148e:	e002      	b.n	8001496 <main+0x26e>
            } else {
                Servo_SetAngle(0);
 8001490:	2000      	movs	r0, #0
 8001492:	f000 fcb9 	bl	8001e08 <Servo_SetAngle>
            }

            if (alert_state >= 2) {
 8001496:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800149a:	2b01      	cmp	r3, #1
 800149c:	d906      	bls.n	80014ac <main+0x284>
                RELAY1_GPIO_PORT->ODR |= (1U << RELAY1_PIN);
 800149e:	4b12      	ldr	r3, [pc, #72]	@ (80014e8 <main+0x2c0>)
 80014a0:	695b      	ldr	r3, [r3, #20]
 80014a2:	4a11      	ldr	r2, [pc, #68]	@ (80014e8 <main+0x2c0>)
 80014a4:	f043 0302 	orr.w	r3, r3, #2
 80014a8:	6153      	str	r3, [r2, #20]
 80014aa:	e005      	b.n	80014b8 <main+0x290>
            } else {
                RELAY1_GPIO_PORT->ODR &= ~(1U << RELAY1_PIN);
 80014ac:	4b0e      	ldr	r3, [pc, #56]	@ (80014e8 <main+0x2c0>)
 80014ae:	695b      	ldr	r3, [r3, #20]
 80014b0:	4a0d      	ldr	r2, [pc, #52]	@ (80014e8 <main+0x2c0>)
 80014b2:	f023 0302 	bic.w	r3, r3, #2
 80014b6:	6153      	str	r3, [r2, #20]
            }

            if (alert_state == 3) {
 80014b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014bc:	2b03      	cmp	r3, #3
 80014be:	d117      	bne.n	80014f0 <main+0x2c8>
                RELAY2_GPIO_PORT->ODR |= (1U << RELAY2_PIN);
 80014c0:	4b09      	ldr	r3, [pc, #36]	@ (80014e8 <main+0x2c0>)
 80014c2:	695b      	ldr	r3, [r3, #20]
 80014c4:	4a08      	ldr	r2, [pc, #32]	@ (80014e8 <main+0x2c0>)
 80014c6:	f043 0304 	orr.w	r3, r3, #4
 80014ca:	6153      	str	r3, [r2, #20]
 80014cc:	e016      	b.n	80014fc <main+0x2d4>
 80014ce:	bf00      	nop
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40020000 	.word	0x40020000
 80014d8:	40020800 	.word	0x40020800
 80014dc:	080065f8 	.word	0x080065f8
 80014e0:	0800660c 	.word	0x0800660c
 80014e4:	08006620 	.word	0x08006620
 80014e8:	40020400 	.word	0x40020400
 80014ec:	40011000 	.word	0x40011000
            } else {
                RELAY2_GPIO_PORT->ODR &= ~(1U << RELAY2_PIN);
 80014f0:	4b56      	ldr	r3, [pc, #344]	@ (800164c <main+0x424>)
 80014f2:	695b      	ldr	r3, [r3, #20]
 80014f4:	4a55      	ldr	r2, [pc, #340]	@ (800164c <main+0x424>)
 80014f6:	f023 0304 	bic.w	r3, r3, #4
 80014fa:	6153      	str	r3, [r2, #20]
            }

            if (tick - last_update >= 1000) {
 80014fc:	4b54      	ldr	r3, [pc, #336]	@ (8001650 <main+0x428>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001508:	f0c0 8095 	bcc.w	8001636 <main+0x40e>
                GPIOA->ODR |= (1 << 5);
 800150c:	4b51      	ldr	r3, [pc, #324]	@ (8001654 <main+0x42c>)
 800150e:	695b      	ldr	r3, [r3, #20]
 8001510:	4a50      	ldr	r2, [pc, #320]	@ (8001654 <main+0x42c>)
 8001512:	f043 0320 	orr.w	r3, r3, #32
 8001516:	6153      	str	r3, [r2, #20]
                snprintf(uart_buffer, sizeof(uart_buffer), "%.1f %d\n", ppm, alert_state);
 8001518:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800151a:	f7ff f81d 	bl	8000558 <__aeabi_f2d>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8001526:	1d38      	adds	r0, r7, #4
 8001528:	9102      	str	r1, [sp, #8]
 800152a:	e9cd 2300 	strd	r2, r3, [sp]
 800152e:	4a4a      	ldr	r2, [pc, #296]	@ (8001658 <main+0x430>)
 8001530:	210a      	movs	r1, #10
 8001532:	f002 f9cb 	bl	80038cc <sniprintf>
                UART1_SendString(uart_buffer);
 8001536:	1d3b      	adds	r3, r7, #4
 8001538:	4618      	mov	r0, r3
 800153a:	f000 fec3 	bl	80022c4 <UART1_SendString>

                LCD_SetCursor(0, 0);
 800153e:	2100      	movs	r1, #0
 8001540:	2000      	movs	r0, #0
 8001542:	f7ff fe53 	bl	80011ec <LCD_SetCursor>
                LCD_SendString("                ");
 8001546:	4845      	ldr	r0, [pc, #276]	@ (800165c <main+0x434>)
 8001548:	f7ff fdfe 	bl	8001148 <LCD_SendString>
                LCD_SetCursor(0, 0);
 800154c:	2100      	movs	r1, #0
 800154e:	2000      	movs	r0, #0
 8001550:	f7ff fe4c 	bl	80011ec <LCD_SetCursor>
                snprintf(buffer, sizeof(buffer), "Gas:%.1f ppm", ppm);
 8001554:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001556:	f7fe ffff 	bl	8000558 <__aeabi_f2d>
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	f107 0010 	add.w	r0, r7, #16
 8001562:	e9cd 2300 	strd	r2, r3, [sp]
 8001566:	4a3e      	ldr	r2, [pc, #248]	@ (8001660 <main+0x438>)
 8001568:	2114      	movs	r1, #20
 800156a:	f002 f9af 	bl	80038cc <sniprintf>
                LCD_SendString(buffer);
 800156e:	f107 0310 	add.w	r3, r7, #16
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff fde8 	bl	8001148 <LCD_SendString>

                LCD_SetCursor(1, 0);
 8001578:	2100      	movs	r1, #0
 800157a:	2001      	movs	r0, #1
 800157c:	f7ff fe36 	bl	80011ec <LCD_SetCursor>
                switch (alert_state) {
 8001580:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001584:	2b03      	cmp	r3, #3
 8001586:	d81b      	bhi.n	80015c0 <main+0x398>
 8001588:	a201      	add	r2, pc, #4	@ (adr r2, 8001590 <main+0x368>)
 800158a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800158e:	bf00      	nop
 8001590:	080015a1 	.word	0x080015a1
 8001594:	080015a9 	.word	0x080015a9
 8001598:	080015b1 	.word	0x080015b1
 800159c:	080015b9 	.word	0x080015b9
                    case -1: LCD_SendString("Error    "); break;
                    case 0: LCD_SendString("No Gas   "); break;
 80015a0:	4830      	ldr	r0, [pc, #192]	@ (8001664 <main+0x43c>)
 80015a2:	f7ff fdd1 	bl	8001148 <LCD_SendString>
 80015a6:	e00f      	b.n	80015c8 <main+0x3a0>
                    case 1: LCD_SendString("Low Gas  "); break;
 80015a8:	482f      	ldr	r0, [pc, #188]	@ (8001668 <main+0x440>)
 80015aa:	f7ff fdcd 	bl	8001148 <LCD_SendString>
 80015ae:	e00b      	b.n	80015c8 <main+0x3a0>
                    case 2: LCD_SendString("High Gas "); break;
 80015b0:	482e      	ldr	r0, [pc, #184]	@ (800166c <main+0x444>)
 80015b2:	f7ff fdc9 	bl	8001148 <LCD_SendString>
 80015b6:	e007      	b.n	80015c8 <main+0x3a0>
                    case 3: LCD_SendString("Danger!  "); break;
 80015b8:	482d      	ldr	r0, [pc, #180]	@ (8001670 <main+0x448>)
 80015ba:	f7ff fdc5 	bl	8001148 <LCD_SendString>
 80015be:	e003      	b.n	80015c8 <main+0x3a0>
                    default: LCD_SendString("Error    "); break;
 80015c0:	482c      	ldr	r0, [pc, #176]	@ (8001674 <main+0x44c>)
 80015c2:	f7ff fdc1 	bl	8001148 <LCD_SendString>
 80015c6:	bf00      	nop
                }
                LCD_SetCursor(1, 9);
 80015c8:	2109      	movs	r1, #9
 80015ca:	2001      	movs	r0, #1
 80015cc:	f7ff fe0e 	bl	80011ec <LCD_SetCursor>
                LCD_SendString("Sys:ON ");
 80015d0:	4829      	ldr	r0, [pc, #164]	@ (8001678 <main+0x450>)
 80015d2:	f7ff fdb9 	bl	8001148 <LCD_SendString>

                GPIOA->ODR &= ~(1 << 5);
 80015d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001654 <main+0x42c>)
 80015d8:	695b      	ldr	r3, [r3, #20]
 80015da:	4a1e      	ldr	r2, [pc, #120]	@ (8001654 <main+0x42c>)
 80015dc:	f023 0320 	bic.w	r3, r3, #32
 80015e0:	6153      	str	r3, [r2, #20]
                last_update = tick;
 80015e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001650 <main+0x428>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80015e8:	e025      	b.n	8001636 <main+0x40e>
            }
        } else {
        	Servo_SetAngle(0);
 80015ea:	2000      	movs	r0, #0
 80015ec:	f000 fc0c 	bl	8001e08 <Servo_SetAngle>
            LCD_SetCursor(0, 0);
 80015f0:	2100      	movs	r1, #0
 80015f2:	2000      	movs	r0, #0
 80015f4:	f7ff fdfa 	bl	80011ec <LCD_SetCursor>
            LCD_SendString("Gas:---- ppm    ");
 80015f8:	4820      	ldr	r0, [pc, #128]	@ (800167c <main+0x454>)
 80015fa:	f7ff fda5 	bl	8001148 <LCD_SendString>
            LCD_SetCursor(1, 0);
 80015fe:	2100      	movs	r1, #0
 8001600:	2001      	movs	r0, #1
 8001602:	f7ff fdf3 	bl	80011ec <LCD_SetCursor>
            LCD_SendString("Stopped  Sys:OFF");
 8001606:	481e      	ldr	r0, [pc, #120]	@ (8001680 <main+0x458>)
 8001608:	f7ff fd9e 	bl	8001148 <LCD_SendString>
            GPIOA->ODR &= ~(1 << 5);
 800160c:	4b11      	ldr	r3, [pc, #68]	@ (8001654 <main+0x42c>)
 800160e:	695b      	ldr	r3, [r3, #20]
 8001610:	4a10      	ldr	r2, [pc, #64]	@ (8001654 <main+0x42c>)
 8001612:	f023 0320 	bic.w	r3, r3, #32
 8001616:	6153      	str	r3, [r2, #20]
            RELAY1_GPIO_PORT->ODR &= ~(1U << RELAY1_PIN);
 8001618:	4b0c      	ldr	r3, [pc, #48]	@ (800164c <main+0x424>)
 800161a:	695b      	ldr	r3, [r3, #20]
 800161c:	4a0b      	ldr	r2, [pc, #44]	@ (800164c <main+0x424>)
 800161e:	f023 0302 	bic.w	r3, r3, #2
 8001622:	6153      	str	r3, [r2, #20]
            RELAY2_GPIO_PORT->ODR &= ~(1U << RELAY2_PIN);
 8001624:	4b09      	ldr	r3, [pc, #36]	@ (800164c <main+0x424>)
 8001626:	695b      	ldr	r3, [r3, #20]
 8001628:	4a08      	ldr	r2, [pc, #32]	@ (800164c <main+0x424>)
 800162a:	f023 0304 	bic.w	r3, r3, #4
 800162e:	6153      	str	r3, [r2, #20]
            Servo_SetAngle(0);
 8001630:	2000      	movs	r0, #0
 8001632:	f000 fbe9 	bl	8001e08 <Servo_SetAngle>
        }
        RGB_LED_SetState(alert_state, system_active, ppm);
 8001636:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800163a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800163e:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8001642:	4611      	mov	r1, r2
 8001644:	4618      	mov	r0, r3
 8001646:	f000 fa65 	bl	8001b14 <RGB_LED_SetState>
    while (1) {
 800164a:	e667      	b.n	800131c <main+0xf4>
 800164c:	40020400 	.word	0x40020400
 8001650:	20000208 	.word	0x20000208
 8001654:	40020000 	.word	0x40020000
 8001658:	08006628 	.word	0x08006628
 800165c:	08006634 	.word	0x08006634
 8001660:	08006648 	.word	0x08006648
 8001664:	08006658 	.word	0x08006658
 8001668:	08006664 	.word	0x08006664
 800166c:	08006670 	.word	0x08006670
 8001670:	0800667c 	.word	0x0800667c
 8001674:	08006688 	.word	0x08006688
 8001678:	08006694 	.word	0x08006694
 800167c:	0800669c 	.word	0x0800669c
 8001680:	080066b0 	.word	0x080066b0

08001684 <ADC_Init>:
#include "system_config.h"
#include <math.h>

float LPGCurve[3] = {2.3f, 0.21f, -0.47f};

void ADC_Init(void) {
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8001688:	4b1d      	ldr	r3, [pc, #116]	@ (8001700 <ADC_Init+0x7c>)
 800168a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168c:	4a1c      	ldr	r2, [pc, #112]	@ (8001700 <ADC_Init+0x7c>)
 800168e:	f043 0301 	orr.w	r3, r3, #1
 8001692:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8001694:	4b1a      	ldr	r3, [pc, #104]	@ (8001700 <ADC_Init+0x7c>)
 8001696:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001698:	4a19      	ldr	r2, [pc, #100]	@ (8001700 <ADC_Init+0x7c>)
 800169a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800169e:	6453      	str	r3, [r2, #68]	@ 0x44
    GPIOA->MODER |= (3U << (0 * 2));
 80016a0:	4b18      	ldr	r3, [pc, #96]	@ (8001704 <ADC_Init+0x80>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a17      	ldr	r2, [pc, #92]	@ (8001704 <ADC_Init+0x80>)
 80016a6:	f043 0303 	orr.w	r3, r3, #3
 80016aa:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~(3U << (0 * 2));
 80016ac:	4b15      	ldr	r3, [pc, #84]	@ (8001704 <ADC_Init+0x80>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	4a14      	ldr	r2, [pc, #80]	@ (8001704 <ADC_Init+0x80>)
 80016b2:	f023 0303 	bic.w	r3, r3, #3
 80016b6:	60d3      	str	r3, [r2, #12]
    ADC1->CR1 = 0;
 80016b8:	4b13      	ldr	r3, [pc, #76]	@ (8001708 <ADC_Init+0x84>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	605a      	str	r2, [r3, #4]
    ADC1->CR1 |= (1U << 8);
 80016be:	4b12      	ldr	r3, [pc, #72]	@ (8001708 <ADC_Init+0x84>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	4a11      	ldr	r2, [pc, #68]	@ (8001708 <ADC_Init+0x84>)
 80016c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016c8:	6053      	str	r3, [r2, #4]
    ADC1->CR2 = 0;
 80016ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001708 <ADC_Init+0x84>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
    ADC1->SMPR2 |= (5U << ADC_SMPR2_SMP0_Pos);
 80016d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001708 <ADC_Init+0x84>)
 80016d2:	691b      	ldr	r3, [r3, #16]
 80016d4:	4a0c      	ldr	r2, [pc, #48]	@ (8001708 <ADC_Init+0x84>)
 80016d6:	f043 0305 	orr.w	r3, r3, #5
 80016da:	6113      	str	r3, [r2, #16]
    ADC1->SQR1 = 0;
 80016dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001708 <ADC_Init+0x84>)
 80016de:	2200      	movs	r2, #0
 80016e0:	62da      	str	r2, [r3, #44]	@ 0x2c
    ADC1->SQR3 = 0;
 80016e2:	4b09      	ldr	r3, [pc, #36]	@ (8001708 <ADC_Init+0x84>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	635a      	str	r2, [r3, #52]	@ 0x34
    ADC1->CR2 |= ADC_CR2_ADON;
 80016e8:	4b07      	ldr	r3, [pc, #28]	@ (8001708 <ADC_Init+0x84>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	4a06      	ldr	r2, [pc, #24]	@ (8001708 <ADC_Init+0x84>)
 80016ee:	f043 0301 	orr.w	r3, r3, #1
 80016f2:	6093      	str	r3, [r2, #8]
    delay_ms(10);
 80016f4:	200a      	movs	r0, #10
 80016f6:	f000 fcf7 	bl	80020e8 <delay_ms>
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40023800 	.word	0x40023800
 8001704:	40020000 	.word	0x40020000
 8001708:	40012000 	.word	0x40012000

0800170c <MQ2_ReadPPM>:

float MQ2_ReadPPM(void) {
 800170c:	b580      	push	{r7, lr}
 800170e:	b08a      	sub	sp, #40	@ 0x28
 8001710:	af00      	add	r7, sp, #0
    const int enhanced_read_sample_times = 10;
 8001712:	230a      	movs	r3, #10
 8001714:	617b      	str	r3, [r7, #20]
    float rs = 0.0f;
 8001716:	f04f 0300 	mov.w	r3, #0
 800171a:	627b      	str	r3, [r7, #36]	@ 0x24
    float Vout;
    uint16_t adc_value;

    delay_ms(100);
 800171c:	2064      	movs	r0, #100	@ 0x64
 800171e:	f000 fce3 	bl	80020e8 <delay_ms>

    for (int i = 0; i < enhanced_read_sample_times; i++) {
 8001722:	2300      	movs	r3, #0
 8001724:	623b      	str	r3, [r7, #32]
 8001726:	e066      	b.n	80017f6 <MQ2_ReadPPM+0xea>
        ADC1->CR2 |= ADC_CR2_SWSTART;
 8001728:	4b65      	ldr	r3, [pc, #404]	@ (80018c0 <MQ2_ReadPPM+0x1b4>)
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	4a64      	ldr	r2, [pc, #400]	@ (80018c0 <MQ2_ReadPPM+0x1b4>)
 800172e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001732:	6093      	str	r3, [r2, #8]
        uint32_t timeout = 1000000;
 8001734:	4b63      	ldr	r3, [pc, #396]	@ (80018c4 <MQ2_ReadPPM+0x1b8>)
 8001736:	61fb      	str	r3, [r7, #28]
        while (!(ADC1->SR & ADC_SR_EOC) && timeout--) {
 8001738:	e004      	b.n	8001744 <MQ2_ReadPPM+0x38>
            if (timeout == 0) return -1.0f;
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d101      	bne.n	8001744 <MQ2_ReadPPM+0x38>
 8001740:	4b61      	ldr	r3, [pc, #388]	@ (80018c8 <MQ2_ReadPPM+0x1bc>)
 8001742:	e0b5      	b.n	80018b0 <MQ2_ReadPPM+0x1a4>
        while (!(ADC1->SR & ADC_SR_EOC) && timeout--) {
 8001744:	4b5e      	ldr	r3, [pc, #376]	@ (80018c0 <MQ2_ReadPPM+0x1b4>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d104      	bne.n	800175a <MQ2_ReadPPM+0x4e>
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	1e5a      	subs	r2, r3, #1
 8001754:	61fa      	str	r2, [r7, #28]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1ef      	bne.n	800173a <MQ2_ReadPPM+0x2e>
        }

        adc_value = ADC1->DR;
 800175a:	4b59      	ldr	r3, [pc, #356]	@ (80018c0 <MQ2_ReadPPM+0x1b4>)
 800175c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800175e:	81fb      	strh	r3, [r7, #14]
        Vout = ((float)adc_value / ADC_MAX) * VCC;
 8001760:	89fb      	ldrh	r3, [r7, #14]
 8001762:	ee07 3a90 	vmov	s15, r3
 8001766:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800176a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80018cc <MQ2_ReadPPM+0x1c0>
 800176e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001772:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001776:	ee67 7a87 	vmul.f32	s15, s15, s14
 800177a:	edc7 7a02 	vstr	s15, [r7, #8]

        if (Vout < 0.1f) return -2.0f;
 800177e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001782:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 80018d0 <MQ2_ReadPPM+0x1c4>
 8001786:	eef4 7ac7 	vcmpe.f32	s15, s14
 800178a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800178e:	d502      	bpl.n	8001796 <MQ2_ReadPPM+0x8a>
 8001790:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8001794:	e08c      	b.n	80018b0 <MQ2_ReadPPM+0x1a4>

        float rs_sample = RL_VALUE * (VCC - Vout) / Vout;
 8001796:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800179a:	edd7 7a02 	vldr	s15, [r7, #8]
 800179e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017a2:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80017a6:	ee67 6a87 	vmul.f32	s13, s15, s14
 80017aa:	ed97 7a02 	vldr	s14, [r7, #8]
 80017ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017b2:	edc7 7a01 	vstr	s15, [r7, #4]
        if (rs_sample <= 0.0f || rs_sample > 1000.0f) {
 80017b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80017ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c2:	d914      	bls.n	80017ee <MQ2_ReadPPM+0xe2>
 80017c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80017c8:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 80018d4 <MQ2_ReadPPM+0x1c8>
 80017cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d4:	dc0b      	bgt.n	80017ee <MQ2_ReadPPM+0xe2>
            continue;
        }
        rs += rs_sample;
 80017d6:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80017da:	edd7 7a01 	vldr	s15, [r7, #4]
 80017de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017e2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        delay_ms(50);
 80017e6:	2032      	movs	r0, #50	@ 0x32
 80017e8:	f000 fc7e 	bl	80020e8 <delay_ms>
 80017ec:	e000      	b.n	80017f0 <MQ2_ReadPPM+0xe4>
            continue;
 80017ee:	bf00      	nop
    for (int i = 0; i < enhanced_read_sample_times; i++) {
 80017f0:	6a3b      	ldr	r3, [r7, #32]
 80017f2:	3301      	adds	r3, #1
 80017f4:	623b      	str	r3, [r7, #32]
 80017f6:	6a3a      	ldr	r2, [r7, #32]
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	db94      	blt.n	8001728 <MQ2_ReadPPM+0x1c>
    }

    rs /= (float)enhanced_read_sample_times;
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	ee07 3a90 	vmov	s15, r3
 8001804:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001808:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800180c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001810:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    if (rs <= 0.0f) return 0.0f;
 8001814:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001818:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800181c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001820:	d802      	bhi.n	8001828 <MQ2_ReadPPM+0x11c>
 8001822:	f04f 0300 	mov.w	r3, #0
 8001826:	e043      	b.n	80018b0 <MQ2_ReadPPM+0x1a4>

    float rs_ro_ratio = rs / FIXED_RO;
 8001828:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800182c:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8001830:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001834:	edc7 7a04 	vstr	s15, [r7, #16]
    float ppm = powf(10.0f, ((log10f(rs_ro_ratio) - LPGCurve[1]) / LPGCurve[2]) + LPGCurve[0]);
 8001838:	ed97 0a04 	vldr	s0, [r7, #16]
 800183c:	f004 f988 	bl	8005b50 <log10f>
 8001840:	eeb0 7a40 	vmov.f32	s14, s0
 8001844:	4b24      	ldr	r3, [pc, #144]	@ (80018d8 <MQ2_ReadPPM+0x1cc>)
 8001846:	edd3 7a01 	vldr	s15, [r3, #4]
 800184a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800184e:	4b22      	ldr	r3, [pc, #136]	@ (80018d8 <MQ2_ReadPPM+0x1cc>)
 8001850:	edd3 7a02 	vldr	s15, [r3, #8]
 8001854:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001858:	4b1f      	ldr	r3, [pc, #124]	@ (80018d8 <MQ2_ReadPPM+0x1cc>)
 800185a:	edd3 7a00 	vldr	s15, [r3]
 800185e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001862:	eef0 0a67 	vmov.f32	s1, s15
 8001866:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 800186a:	f004 f99f 	bl	8005bac <powf>
 800186e:	ed87 0a06 	vstr	s0, [r7, #24]

    if (ppm < 0.0f) ppm = 0.0f;
 8001872:	edd7 7a06 	vldr	s15, [r7, #24]
 8001876:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800187a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800187e:	d502      	bpl.n	8001886 <MQ2_ReadPPM+0x17a>
 8001880:	f04f 0300 	mov.w	r3, #0
 8001884:	61bb      	str	r3, [r7, #24]
    if (isnan(ppm) || ppm > 10000.0f) ppm = 10000.0f;
 8001886:	ed97 7a06 	vldr	s14, [r7, #24]
 800188a:	edd7 7a06 	vldr	s15, [r7, #24]
 800188e:	eeb4 7a67 	vcmp.f32	s14, s15
 8001892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001896:	d608      	bvs.n	80018aa <MQ2_ReadPPM+0x19e>
 8001898:	edd7 7a06 	vldr	s15, [r7, #24]
 800189c:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80018dc <MQ2_ReadPPM+0x1d0>
 80018a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a8:	dd01      	ble.n	80018ae <MQ2_ReadPPM+0x1a2>
 80018aa:	4b0d      	ldr	r3, [pc, #52]	@ (80018e0 <MQ2_ReadPPM+0x1d4>)
 80018ac:	61bb      	str	r3, [r7, #24]

    return ppm;
 80018ae:	69bb      	ldr	r3, [r7, #24]
}
 80018b0:	ee07 3a90 	vmov	s15, r3
 80018b4:	eeb0 0a67 	vmov.f32	s0, s15
 80018b8:	3728      	adds	r7, #40	@ 0x28
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40012000 	.word	0x40012000
 80018c4:	000f4240 	.word	0x000f4240
 80018c8:	bf800000 	.word	0xbf800000
 80018cc:	457ff000 	.word	0x457ff000
 80018d0:	3dcccccd 	.word	0x3dcccccd
 80018d4:	447a0000 	.word	0x447a0000
 80018d8:	20000000 	.word	0x20000000
 80018dc:	461c4000 	.word	0x461c4000
 80018e0:	461c4000 	.word	0x461c4000

080018e4 <GetGasAlertState>:

uint8_t GetGasAlertState(float ppm) {
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	ed87 0a01 	vstr	s0, [r7, #4]
    if (ppm < 0.0f) return -1;
 80018ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80018f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018fa:	d501      	bpl.n	8001900 <GetGasAlertState+0x1c>
 80018fc:	23ff      	movs	r3, #255	@ 0xff
 80018fe:	e021      	b.n	8001944 <GetGasAlertState+0x60>
    else {
        if (ppm < 200.0f) return 0;
 8001900:	edd7 7a01 	vldr	s15, [r7, #4]
 8001904:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001950 <GetGasAlertState+0x6c>
 8001908:	eef4 7ac7 	vcmpe.f32	s15, s14
 800190c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001910:	d501      	bpl.n	8001916 <GetGasAlertState+0x32>
 8001912:	2300      	movs	r3, #0
 8001914:	e016      	b.n	8001944 <GetGasAlertState+0x60>
        else if (ppm < 800.0f) return 1;
 8001916:	edd7 7a01 	vldr	s15, [r7, #4]
 800191a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001954 <GetGasAlertState+0x70>
 800191e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001926:	d501      	bpl.n	800192c <GetGasAlertState+0x48>
 8001928:	2301      	movs	r3, #1
 800192a:	e00b      	b.n	8001944 <GetGasAlertState+0x60>
        else if (ppm < 2000.0f) return 2;
 800192c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001930:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001958 <GetGasAlertState+0x74>
 8001934:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800193c:	d501      	bpl.n	8001942 <GetGasAlertState+0x5e>
 800193e:	2302      	movs	r3, #2
 8001940:	e000      	b.n	8001944 <GetGasAlertState+0x60>
        else return 3;
 8001942:	2303      	movs	r3, #3
    }
}
 8001944:	4618      	mov	r0, r3
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	43480000 	.word	0x43480000
 8001954:	44480000 	.word	0x44480000
 8001958:	44fa0000 	.word	0x44fa0000

0800195c <Relay_GPIO_Init>:
#include "relay.h"

void Relay_GPIO_Init(void) {
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RELAY1_RCC_AHB1ENR | RELAY2_RCC_AHB1ENR;
 8001960:	4b29      	ldr	r3, [pc, #164]	@ (8001a08 <Relay_GPIO_Init+0xac>)
 8001962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001964:	4a28      	ldr	r2, [pc, #160]	@ (8001a08 <Relay_GPIO_Init+0xac>)
 8001966:	f043 0302 	orr.w	r3, r3, #2
 800196a:	6313      	str	r3, [r2, #48]	@ 0x30
    RELAY1_GPIO_PORT->MODER &= ~(3U << (RELAY1_PIN * 2));
 800196c:	4b27      	ldr	r3, [pc, #156]	@ (8001a0c <Relay_GPIO_Init+0xb0>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a26      	ldr	r2, [pc, #152]	@ (8001a0c <Relay_GPIO_Init+0xb0>)
 8001972:	f023 030c 	bic.w	r3, r3, #12
 8001976:	6013      	str	r3, [r2, #0]
    RELAY1_GPIO_PORT->MODER |= (1U << (RELAY1_PIN * 2));
 8001978:	4b24      	ldr	r3, [pc, #144]	@ (8001a0c <Relay_GPIO_Init+0xb0>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a23      	ldr	r2, [pc, #140]	@ (8001a0c <Relay_GPIO_Init+0xb0>)
 800197e:	f043 0304 	orr.w	r3, r3, #4
 8001982:	6013      	str	r3, [r2, #0]
    RELAY2_GPIO_PORT->MODER &= ~(3U << (RELAY2_PIN * 2));
 8001984:	4b21      	ldr	r3, [pc, #132]	@ (8001a0c <Relay_GPIO_Init+0xb0>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a20      	ldr	r2, [pc, #128]	@ (8001a0c <Relay_GPIO_Init+0xb0>)
 800198a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800198e:	6013      	str	r3, [r2, #0]
    RELAY2_GPIO_PORT->MODER |= (1U << (RELAY2_PIN * 2));
 8001990:	4b1e      	ldr	r3, [pc, #120]	@ (8001a0c <Relay_GPIO_Init+0xb0>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a1d      	ldr	r2, [pc, #116]	@ (8001a0c <Relay_GPIO_Init+0xb0>)
 8001996:	f043 0310 	orr.w	r3, r3, #16
 800199a:	6013      	str	r3, [r2, #0]
    RELAY1_GPIO_PORT->OTYPER &= ~(1U << RELAY1_PIN);
 800199c:	4b1b      	ldr	r3, [pc, #108]	@ (8001a0c <Relay_GPIO_Init+0xb0>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	4a1a      	ldr	r2, [pc, #104]	@ (8001a0c <Relay_GPIO_Init+0xb0>)
 80019a2:	f023 0302 	bic.w	r3, r3, #2
 80019a6:	6053      	str	r3, [r2, #4]
    RELAY2_GPIO_PORT->OTYPER &= ~(1U << RELAY2_PIN);
 80019a8:	4b18      	ldr	r3, [pc, #96]	@ (8001a0c <Relay_GPIO_Init+0xb0>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	4a17      	ldr	r2, [pc, #92]	@ (8001a0c <Relay_GPIO_Init+0xb0>)
 80019ae:	f023 0304 	bic.w	r3, r3, #4
 80019b2:	6053      	str	r3, [r2, #4]
    RELAY1_GPIO_PORT->PUPDR &= ~(3U << (RELAY1_PIN * 2));
 80019b4:	4b15      	ldr	r3, [pc, #84]	@ (8001a0c <Relay_GPIO_Init+0xb0>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	4a14      	ldr	r2, [pc, #80]	@ (8001a0c <Relay_GPIO_Init+0xb0>)
 80019ba:	f023 030c 	bic.w	r3, r3, #12
 80019be:	60d3      	str	r3, [r2, #12]
    RELAY2_GPIO_PORT->PUPDR &= ~(3U << (RELAY2_PIN * 2));
 80019c0:	4b12      	ldr	r3, [pc, #72]	@ (8001a0c <Relay_GPIO_Init+0xb0>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	4a11      	ldr	r2, [pc, #68]	@ (8001a0c <Relay_GPIO_Init+0xb0>)
 80019c6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80019ca:	60d3      	str	r3, [r2, #12]
    RELAY1_GPIO_PORT->OSPEEDR &= ~(3U << (RELAY1_PIN * 2));
 80019cc:	4b0f      	ldr	r3, [pc, #60]	@ (8001a0c <Relay_GPIO_Init+0xb0>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	4a0e      	ldr	r2, [pc, #56]	@ (8001a0c <Relay_GPIO_Init+0xb0>)
 80019d2:	f023 030c 	bic.w	r3, r3, #12
 80019d6:	6093      	str	r3, [r2, #8]
    RELAY2_GPIO_PORT->OSPEEDR &= ~(3U << (RELAY2_PIN * 2));
 80019d8:	4b0c      	ldr	r3, [pc, #48]	@ (8001a0c <Relay_GPIO_Init+0xb0>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	4a0b      	ldr	r2, [pc, #44]	@ (8001a0c <Relay_GPIO_Init+0xb0>)
 80019de:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80019e2:	6093      	str	r3, [r2, #8]
    RELAY1_GPIO_PORT->ODR &= ~(1U << RELAY1_PIN);
 80019e4:	4b09      	ldr	r3, [pc, #36]	@ (8001a0c <Relay_GPIO_Init+0xb0>)
 80019e6:	695b      	ldr	r3, [r3, #20]
 80019e8:	4a08      	ldr	r2, [pc, #32]	@ (8001a0c <Relay_GPIO_Init+0xb0>)
 80019ea:	f023 0302 	bic.w	r3, r3, #2
 80019ee:	6153      	str	r3, [r2, #20]
    RELAY2_GPIO_PORT->ODR &= ~(1U << RELAY2_PIN);
 80019f0:	4b06      	ldr	r3, [pc, #24]	@ (8001a0c <Relay_GPIO_Init+0xb0>)
 80019f2:	695b      	ldr	r3, [r3, #20]
 80019f4:	4a05      	ldr	r2, [pc, #20]	@ (8001a0c <Relay_GPIO_Init+0xb0>)
 80019f6:	f023 0304 	bic.w	r3, r3, #4
 80019fa:	6153      	str	r3, [r2, #20]
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	40020400 	.word	0x40020400

08001a10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	db0b      	blt.n	8001a3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	f003 021f 	and.w	r2, r3, #31
 8001a28:	4907      	ldr	r1, [pc, #28]	@ (8001a48 <__NVIC_EnableIRQ+0x38>)
 8001a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2e:	095b      	lsrs	r3, r3, #5
 8001a30:	2001      	movs	r0, #1
 8001a32:	fa00 f202 	lsl.w	r2, r0, r2
 8001a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	e000e100 	.word	0xe000e100

08001a4c <RGB_LED_Init>:
#include "rgb_led.h"

volatile uint8_t current_alert_state = 0;
volatile float current_ppm = 0.0f;

void RGB_LED_Init(void) {
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RGB_RCC_AHB1ENR;
 8001a50:	4b17      	ldr	r3, [pc, #92]	@ (8001ab0 <RGB_LED_Init+0x64>)
 8001a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a54:	4a16      	ldr	r2, [pc, #88]	@ (8001ab0 <RGB_LED_Init+0x64>)
 8001a56:	f043 0302 	orr.w	r3, r3, #2
 8001a5a:	6313      	str	r3, [r2, #48]	@ 0x30
    RGB_GPIO_PORT->MODER &= ~((3U << (RGB_RED_PIN * 2)) | (3U << (RGB_GREEN_PIN * 2)) | (3U << (RGB_BLUE_PIN * 2)));
 8001a5c:	4b15      	ldr	r3, [pc, #84]	@ (8001ab4 <RGB_LED_Init+0x68>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a14      	ldr	r2, [pc, #80]	@ (8001ab4 <RGB_LED_Init+0x68>)
 8001a62:	f423 637c 	bic.w	r3, r3, #4032	@ 0xfc0
 8001a66:	6013      	str	r3, [r2, #0]
    RGB_GPIO_PORT->MODER |= (1U << (RGB_RED_PIN * 2)) | (1U << (RGB_GREEN_PIN * 2)) | (1U << (RGB_BLUE_PIN * 2));
 8001a68:	4b12      	ldr	r3, [pc, #72]	@ (8001ab4 <RGB_LED_Init+0x68>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a11      	ldr	r2, [pc, #68]	@ (8001ab4 <RGB_LED_Init+0x68>)
 8001a6e:	f443 63a8 	orr.w	r3, r3, #1344	@ 0x540
 8001a72:	6013      	str	r3, [r2, #0]
    RGB_GPIO_PORT->OTYPER &= ~((1U << RGB_RED_PIN) | (1U << RGB_GREEN_PIN) | (1U << RGB_BLUE_PIN));
 8001a74:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab4 <RGB_LED_Init+0x68>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	4a0e      	ldr	r2, [pc, #56]	@ (8001ab4 <RGB_LED_Init+0x68>)
 8001a7a:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8001a7e:	6053      	str	r3, [r2, #4]
    RGB_GPIO_PORT->OSPEEDR |= (3U << (RGB_RED_PIN * 2)) | (3U << (RGB_GREEN_PIN * 2)) | (3U << (RGB_BLUE_PIN * 2));
 8001a80:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab4 <RGB_LED_Init+0x68>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	4a0b      	ldr	r2, [pc, #44]	@ (8001ab4 <RGB_LED_Init+0x68>)
 8001a86:	f443 637c 	orr.w	r3, r3, #4032	@ 0xfc0
 8001a8a:	6093      	str	r3, [r2, #8]
    RGB_GPIO_PORT->PUPDR &= ~((3U << (RGB_RED_PIN * 2)) | (3U << (RGB_GREEN_PIN * 2)) | (3U << (RGB_BLUE_PIN * 2)));
 8001a8c:	4b09      	ldr	r3, [pc, #36]	@ (8001ab4 <RGB_LED_Init+0x68>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	4a08      	ldr	r2, [pc, #32]	@ (8001ab4 <RGB_LED_Init+0x68>)
 8001a92:	f423 637c 	bic.w	r3, r3, #4032	@ 0xfc0
 8001a96:	60d3      	str	r3, [r2, #12]
    RGB_GPIO_PORT->ODR &= ~((1U << RGB_RED_PIN) | (1U << RGB_GREEN_PIN) | (1U << RGB_BLUE_PIN));
 8001a98:	4b06      	ldr	r3, [pc, #24]	@ (8001ab4 <RGB_LED_Init+0x68>)
 8001a9a:	695b      	ldr	r3, [r3, #20]
 8001a9c:	4a05      	ldr	r2, [pc, #20]	@ (8001ab4 <RGB_LED_Init+0x68>)
 8001a9e:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8001aa2:	6153      	str	r3, [r2, #20]
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40020400 	.word	0x40020400

08001ab8 <TIM2_Init>:

void TIM2_Init(void) {
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001abc:	4b12      	ldr	r3, [pc, #72]	@ (8001b08 <TIM2_Init+0x50>)
 8001abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac0:	4a11      	ldr	r2, [pc, #68]	@ (8001b08 <TIM2_Init+0x50>)
 8001ac2:	f043 0301 	orr.w	r3, r3, #1
 8001ac6:	6413      	str	r3, [r2, #64]	@ 0x40
    TIM2->CR1 = 0;
 8001ac8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
    TIM2->PSC = (SystemCoreClock / 1000000) - 1;
 8001ad0:	4b0e      	ldr	r3, [pc, #56]	@ (8001b0c <TIM2_Init+0x54>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a0e      	ldr	r2, [pc, #56]	@ (8001b10 <TIM2_Init+0x58>)
 8001ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8001ada:	0c9b      	lsrs	r3, r3, #18
 8001adc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	6293      	str	r3, [r2, #40]	@ 0x28
    TIM2->ARR = 10000;
 8001ae4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001ae8:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001aec:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM2->DIER |= TIM_DIER_UIE;
 8001aee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	60d3      	str	r3, [r2, #12]
    NVIC_EnableIRQ(TIM2_IRQn);
 8001afe:	201c      	movs	r0, #28
 8001b00:	f7ff ff86 	bl	8001a10 <__NVIC_EnableIRQ>
}
 8001b04:	bf00      	nop
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	2000000c 	.word	0x2000000c
 8001b10:	431bde83 	.word	0x431bde83

08001b14 <RGB_LED_SetState>:

void RGB_LED_SetState(uint8_t alert_state, uint8_t system_active, float ppm) {
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	460a      	mov	r2, r1
 8001b1e:	ed87 0a00 	vstr	s0, [r7]
 8001b22:	71fb      	strb	r3, [r7, #7]
 8001b24:	4613      	mov	r3, r2
 8001b26:	71bb      	strb	r3, [r7, #6]
    RGB_GPIO_PORT->ODR &= ~((1U << RGB_RED_PIN) | (1U << RGB_GREEN_PIN) | (1U << RGB_BLUE_PIN));
 8001b28:	4b60      	ldr	r3, [pc, #384]	@ (8001cac <RGB_LED_SetState+0x198>)
 8001b2a:	695b      	ldr	r3, [r3, #20]
 8001b2c:	4a5f      	ldr	r2, [pc, #380]	@ (8001cac <RGB_LED_SetState+0x198>)
 8001b2e:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8001b32:	6153      	str	r3, [r2, #20]

    if (!system_active) {
 8001b34:	79bb      	ldrb	r3, [r7, #6]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d10e      	bne.n	8001b58 <RGB_LED_SetState+0x44>
        RGB_GPIO_PORT->ODR |= (1U << RGB_GREEN_PIN);
 8001b3a:	4b5c      	ldr	r3, [pc, #368]	@ (8001cac <RGB_LED_SetState+0x198>)
 8001b3c:	695b      	ldr	r3, [r3, #20]
 8001b3e:	4a5b      	ldr	r2, [pc, #364]	@ (8001cac <RGB_LED_SetState+0x198>)
 8001b40:	f043 0310 	orr.w	r3, r3, #16
 8001b44:	6153      	str	r3, [r2, #20]
        TIM2->CR1 &= ~TIM_CR1_CEN;
 8001b46:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b50:	f023 0301 	bic.w	r3, r3, #1
 8001b54:	6013      	str	r3, [r2, #0]
            TIM2->CNT = 0;
            TIM2->CR1 |= TIM_CR1_CEN;
            RGB_GPIO_PORT->ODR |= (1U << RGB_RED_PIN);
        }
    }
}
 8001b56:	e0a2      	b.n	8001c9e <RGB_LED_SetState+0x18a>
        current_alert_state = alert_state;
 8001b58:	4a55      	ldr	r2, [pc, #340]	@ (8001cb0 <RGB_LED_SetState+0x19c>)
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	7013      	strb	r3, [r2, #0]
        current_ppm = ppm;
 8001b5e:	4a55      	ldr	r2, [pc, #340]	@ (8001cb4 <RGB_LED_SetState+0x1a0>)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	6013      	str	r3, [r2, #0]
        } else if (alert_state == 0) {
 8001b64:	79fb      	ldrb	r3, [r7, #7]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d10e      	bne.n	8001b88 <RGB_LED_SetState+0x74>
            RGB_GPIO_PORT->ODR |= (1U << RGB_BLUE_PIN);
 8001b6a:	4b50      	ldr	r3, [pc, #320]	@ (8001cac <RGB_LED_SetState+0x198>)
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	4a4f      	ldr	r2, [pc, #316]	@ (8001cac <RGB_LED_SetState+0x198>)
 8001b70:	f043 0320 	orr.w	r3, r3, #32
 8001b74:	6153      	str	r3, [r2, #20]
            TIM2->CR1 &= ~TIM_CR1_CEN;
 8001b76:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b80:	f023 0301 	bic.w	r3, r3, #1
 8001b84:	6013      	str	r3, [r2, #0]
}
 8001b86:	e08a      	b.n	8001c9e <RGB_LED_SetState+0x18a>
        } else if (alert_state == 1) {
 8001b88:	79fb      	ldrb	r3, [r7, #7]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d10e      	bne.n	8001bac <RGB_LED_SetState+0x98>
            RGB_GPIO_PORT->ODR |= (1U << RGB_RED_PIN) | (1U << RGB_GREEN_PIN);
 8001b8e:	4b47      	ldr	r3, [pc, #284]	@ (8001cac <RGB_LED_SetState+0x198>)
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	4a46      	ldr	r2, [pc, #280]	@ (8001cac <RGB_LED_SetState+0x198>)
 8001b94:	f043 0318 	orr.w	r3, r3, #24
 8001b98:	6153      	str	r3, [r2, #20]
            TIM2->CR1 &= ~TIM_CR1_CEN;
 8001b9a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ba4:	f023 0301 	bic.w	r3, r3, #1
 8001ba8:	6013      	str	r3, [r2, #0]
}
 8001baa:	e078      	b.n	8001c9e <RGB_LED_SetState+0x18a>
        } else if (alert_state == 2) {
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d11e      	bne.n	8001bf0 <RGB_LED_SetState+0xdc>
            TIM2->CR1 &= ~TIM_CR1_CEN;
 8001bb2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bbc:	f023 0301 	bic.w	r3, r3, #1
 8001bc0:	6013      	str	r3, [r2, #0]
            TIM2->ARR = 500000;
 8001bc2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001bc6:	4a3c      	ldr	r2, [pc, #240]	@ (8001cb8 <RGB_LED_SetState+0x1a4>)
 8001bc8:	62da      	str	r2, [r3, #44]	@ 0x2c
            TIM2->CNT = 0;
 8001bca:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001bce:	2200      	movs	r2, #0
 8001bd0:	625a      	str	r2, [r3, #36]	@ 0x24
            TIM2->CR1 |= TIM_CR1_CEN;
 8001bd2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	6013      	str	r3, [r2, #0]
            RGB_GPIO_PORT->ODR |= (1U << RGB_RED_PIN);
 8001be2:	4b32      	ldr	r3, [pc, #200]	@ (8001cac <RGB_LED_SetState+0x198>)
 8001be4:	695b      	ldr	r3, [r3, #20]
 8001be6:	4a31      	ldr	r2, [pc, #196]	@ (8001cac <RGB_LED_SetState+0x198>)
 8001be8:	f043 0308 	orr.w	r3, r3, #8
 8001bec:	6153      	str	r3, [r2, #20]
}
 8001bee:	e056      	b.n	8001c9e <RGB_LED_SetState+0x18a>
        } else if (alert_state == 3) {
 8001bf0:	79fb      	ldrb	r3, [r7, #7]
 8001bf2:	2b03      	cmp	r3, #3
 8001bf4:	d153      	bne.n	8001c9e <RGB_LED_SetState+0x18a>
            float frequency = 2.0f + (ppm - 2000.0f) * (8.0f / 8000.0f);
 8001bf6:	edd7 7a00 	vldr	s15, [r7]
 8001bfa:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001cbc <RGB_LED_SetState+0x1a8>
 8001bfe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c02:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001cc0 <RGB_LED_SetState+0x1ac>
 8001c06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c0a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001c0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c12:	edc7 7a03 	vstr	s15, [r7, #12]
            frequency = (frequency < 2.0f) ? 2.0f : (frequency > 10.0f) ? 10.0f : frequency;
 8001c16:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c1a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001c1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c26:	d502      	bpl.n	8001c2e <RGB_LED_SetState+0x11a>
 8001c28:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c2c:	e00b      	b.n	8001c46 <RGB_LED_SetState+0x132>
 8001c2e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c32:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001c36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c3e:	dd01      	ble.n	8001c44 <RGB_LED_SetState+0x130>
 8001c40:	4b20      	ldr	r3, [pc, #128]	@ (8001cc4 <RGB_LED_SetState+0x1b0>)
 8001c42:	e000      	b.n	8001c46 <RGB_LED_SetState+0x132>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	60fb      	str	r3, [r7, #12]
            uint32_t period_us = (uint32_t)(1000000.0f / (2.0f * frequency));
 8001c48:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c4c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001c50:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8001cc8 <RGB_LED_SetState+0x1b4>
 8001c54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c5c:	ee17 3a90 	vmov	r3, s15
 8001c60:	60bb      	str	r3, [r7, #8]
            TIM2->CR1 &= ~TIM_CR1_CEN;
 8001c62:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c6c:	f023 0301 	bic.w	r3, r3, #1
 8001c70:	6013      	str	r3, [r2, #0]
            TIM2->ARR = period_us;
 8001c72:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	62d3      	str	r3, [r2, #44]	@ 0x2c
            TIM2->CNT = 0;
 8001c7a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c7e:	2200      	movs	r2, #0
 8001c80:	625a      	str	r2, [r3, #36]	@ 0x24
            TIM2->CR1 |= TIM_CR1_CEN;
 8001c82:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	6013      	str	r3, [r2, #0]
            RGB_GPIO_PORT->ODR |= (1U << RGB_RED_PIN);
 8001c92:	4b06      	ldr	r3, [pc, #24]	@ (8001cac <RGB_LED_SetState+0x198>)
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	4a05      	ldr	r2, [pc, #20]	@ (8001cac <RGB_LED_SetState+0x198>)
 8001c98:	f043 0308 	orr.w	r3, r3, #8
 8001c9c:	6153      	str	r3, [r2, #20]
}
 8001c9e:	bf00      	nop
 8001ca0:	3714      	adds	r7, #20
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40020400 	.word	0x40020400
 8001cb0:	200001fc 	.word	0x200001fc
 8001cb4:	20000200 	.word	0x20000200
 8001cb8:	0007a120 	.word	0x0007a120
 8001cbc:	44fa0000 	.word	0x44fa0000
 8001cc0:	3a83126f 	.word	0x3a83126f
 8001cc4:	41200000 	.word	0x41200000
 8001cc8:	49742400 	.word	0x49742400

08001ccc <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF) {
 8001cd0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d017      	beq.n	8001d0e <TIM2_IRQHandler+0x42>
        TIM2->SR &= ~TIM_SR_UIF;
 8001cde:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ce8:	f023 0301 	bic.w	r3, r3, #1
 8001cec:	6113      	str	r3, [r2, #16]
        if (current_alert_state == 2 || current_alert_state == 3) {
 8001cee:	4b0a      	ldr	r3, [pc, #40]	@ (8001d18 <TIM2_IRQHandler+0x4c>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d004      	beq.n	8001d02 <TIM2_IRQHandler+0x36>
 8001cf8:	4b07      	ldr	r3, [pc, #28]	@ (8001d18 <TIM2_IRQHandler+0x4c>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b03      	cmp	r3, #3
 8001d00:	d105      	bne.n	8001d0e <TIM2_IRQHandler+0x42>
            RGB_GPIO_PORT->ODR ^= (1U << RGB_RED_PIN);
 8001d02:	4b06      	ldr	r3, [pc, #24]	@ (8001d1c <TIM2_IRQHandler+0x50>)
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	4a05      	ldr	r2, [pc, #20]	@ (8001d1c <TIM2_IRQHandler+0x50>)
 8001d08:	f083 0308 	eor.w	r3, r3, #8
 8001d0c:	6153      	str	r3, [r2, #20]
        }
    }
}
 8001d0e:	bf00      	nop
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	200001fc 	.word	0x200001fc
 8001d1c:	40020400 	.word	0x40020400

08001d20 <Servo_Init>:
#include "servo.h"
#include "stm32f4xx_hal.h"

void Servo_Init(void) {
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; // Kích hoạt clock cho GPIOA
 8001d24:	4b33      	ldr	r3, [pc, #204]	@ (8001df4 <Servo_Init+0xd4>)
 8001d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d28:	4a32      	ldr	r2, [pc, #200]	@ (8001df4 <Servo_Init+0xd4>)
 8001d2a:	f043 0301 	orr.w	r3, r3, #1
 8001d2e:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;  // Kích hoạt clock cho TIM3
 8001d30:	4b30      	ldr	r3, [pc, #192]	@ (8001df4 <Servo_Init+0xd4>)
 8001d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d34:	4a2f      	ldr	r2, [pc, #188]	@ (8001df4 <Servo_Init+0xd4>)
 8001d36:	f043 0302 	orr.w	r3, r3, #2
 8001d3a:	6413      	str	r3, [r2, #64]	@ 0x40
	GPIOA->MODER &= ~(3U << (SERVO_PIN * 2));
 8001d3c:	4b2e      	ldr	r3, [pc, #184]	@ (8001df8 <Servo_Init+0xd8>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a2d      	ldr	r2, [pc, #180]	@ (8001df8 <Servo_Init+0xd8>)
 8001d42:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d46:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (2U << (SERVO_PIN * 2)); // Chế độ Alternate Function
 8001d48:	4b2b      	ldr	r3, [pc, #172]	@ (8001df8 <Servo_Init+0xd8>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a2a      	ldr	r2, [pc, #168]	@ (8001df8 <Servo_Init+0xd8>)
 8001d4e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001d52:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &= ~(1U << SERVO_PIN);
 8001d54:	4b28      	ldr	r3, [pc, #160]	@ (8001df8 <Servo_Init+0xd8>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	4a27      	ldr	r2, [pc, #156]	@ (8001df8 <Servo_Init+0xd8>)
 8001d5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001d5e:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR |= (3U << (SERVO_PIN * 2)); // Tốc độ cao
 8001d60:	4b25      	ldr	r3, [pc, #148]	@ (8001df8 <Servo_Init+0xd8>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	4a24      	ldr	r2, [pc, #144]	@ (8001df8 <Servo_Init+0xd8>)
 8001d66:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 8001d6a:	6093      	str	r3, [r2, #8]
	GPIOA->AFR[0] |= (2U << (SERVO_PIN * 4)); // AF2 cho TIM3_CH1 (PA6)
 8001d6c:	4b22      	ldr	r3, [pc, #136]	@ (8001df8 <Servo_Init+0xd8>)
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
 8001d70:	4a21      	ldr	r2, [pc, #132]	@ (8001df8 <Servo_Init+0xd8>)
 8001d72:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d76:	6213      	str	r3, [r2, #32]
	TIM3->CR1 = 0;
 8001d78:	4b20      	ldr	r3, [pc, #128]	@ (8001dfc <Servo_Init+0xdc>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]
	TIM3->PSC = (SystemCoreClock / 1000000) - 1; // Tick 1µs
 8001d7e:	4b20      	ldr	r3, [pc, #128]	@ (8001e00 <Servo_Init+0xe0>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a20      	ldr	r2, [pc, #128]	@ (8001e04 <Servo_Init+0xe4>)
 8001d84:	fba2 2303 	umull	r2, r3, r2, r3
 8001d88:	0c9b      	lsrs	r3, r3, #18
 8001d8a:	4a1c      	ldr	r2, [pc, #112]	@ (8001dfc <Servo_Init+0xdc>)
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	6293      	str	r3, [r2, #40]	@ 0x28
	TIM3->ARR = SERVO_PWM_PERIOD - 1; // Chu kỳ 20ms
 8001d90:	4b1a      	ldr	r3, [pc, #104]	@ (8001dfc <Servo_Init+0xdc>)
 8001d92:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001d96:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM3->CCMR1 &= ~(TIM_CCMR1_OC1M); // Xóa OC1M
 8001d98:	4b18      	ldr	r3, [pc, #96]	@ (8001dfc <Servo_Init+0xdc>)
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	4a17      	ldr	r2, [pc, #92]	@ (8001dfc <Servo_Init+0xdc>)
 8001d9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001da2:	6193      	str	r3, [r2, #24]
	TIM3->CCMR1 |= (6U << TIM_CCMR1_OC1M_Pos); // PWM mode 1
 8001da4:	4b15      	ldr	r3, [pc, #84]	@ (8001dfc <Servo_Init+0xdc>)
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	4a14      	ldr	r2, [pc, #80]	@ (8001dfc <Servo_Init+0xdc>)
 8001daa:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001dae:	6193      	str	r3, [r2, #24]
	TIM3->CCMR1 |= TIM_CCMR1_OC1PE; // Bật preload
 8001db0:	4b12      	ldr	r3, [pc, #72]	@ (8001dfc <Servo_Init+0xdc>)
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	4a11      	ldr	r2, [pc, #68]	@ (8001dfc <Servo_Init+0xdc>)
 8001db6:	f043 0308 	orr.w	r3, r3, #8
 8001dba:	6193      	str	r3, [r2, #24]
	TIM3->CCER |= TIM_CCER_CC1E; // Bật kênh 1
 8001dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8001dfc <Servo_Init+0xdc>)
 8001dbe:	6a1b      	ldr	r3, [r3, #32]
 8001dc0:	4a0e      	ldr	r2, [pc, #56]	@ (8001dfc <Servo_Init+0xdc>)
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	6213      	str	r3, [r2, #32]
	TIM3->CCR1 = SERVO_MIN_PULSE; // Độ rộng xung ban đầu (0°)
 8001dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8001dfc <Servo_Init+0xdc>)
 8001dca:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001dce:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->EGR |= TIM_EGR_UG; // Cập nhật thanh ghi
 8001dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8001dfc <Servo_Init+0xdc>)
 8001dd2:	695b      	ldr	r3, [r3, #20]
 8001dd4:	4a09      	ldr	r2, [pc, #36]	@ (8001dfc <Servo_Init+0xdc>)
 8001dd6:	f043 0301 	orr.w	r3, r3, #1
 8001dda:	6153      	str	r3, [r2, #20]
	TIM3->CR1 |= TIM_CR1_CEN; // Bật Timer
 8001ddc:	4b07      	ldr	r3, [pc, #28]	@ (8001dfc <Servo_Init+0xdc>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a06      	ldr	r2, [pc, #24]	@ (8001dfc <Servo_Init+0xdc>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	6013      	str	r3, [r2, #0]
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	40023800 	.word	0x40023800
 8001df8:	40020000 	.word	0x40020000
 8001dfc:	40000400 	.word	0x40000400
 8001e00:	2000000c 	.word	0x2000000c
 8001e04:	431bde83 	.word	0x431bde83

08001e08 <Servo_SetAngle>:

void Servo_SetAngle(uint16_t angle) {
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	80fb      	strh	r3, [r7, #6]
	if (angle > 180) angle = 180;
 8001e12:	88fb      	ldrh	r3, [r7, #6]
 8001e14:	2bb4      	cmp	r3, #180	@ 0xb4
 8001e16:	d901      	bls.n	8001e1c <Servo_SetAngle+0x14>
 8001e18:	23b4      	movs	r3, #180	@ 0xb4
 8001e1a:	80fb      	strh	r3, [r7, #6]
	uint32_t pulse = SERVO_MIN_PULSE + ((SERVO_MAX_PULSE - SERVO_MIN_PULSE) * angle) / 180;
 8001e1c:	88fb      	ldrh	r3, [r7, #6]
 8001e1e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001e22:	fb02 f303 	mul.w	r3, r2, r3
 8001e26:	4a09      	ldr	r2, [pc, #36]	@ (8001e4c <Servo_SetAngle+0x44>)
 8001e28:	fb82 1203 	smull	r1, r2, r2, r3
 8001e2c:	441a      	add	r2, r3
 8001e2e:	11d2      	asrs	r2, r2, #7
 8001e30:	17db      	asrs	r3, r3, #31
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001e38:	60fb      	str	r3, [r7, #12]
	TIM3->CCR1 = pulse; // Sử dụng CCR1 cho kênh 1
 8001e3a:	4a05      	ldr	r2, [pc, #20]	@ (8001e50 <Servo_SetAngle+0x48>)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8001e40:	bf00      	nop
 8001e42:	3714      	adds	r7, #20
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	b60b60b7 	.word	0xb60b60b7
 8001e50:	40000400 	.word	0x40000400

08001e54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e58:	bf00      	nop
 8001e5a:	e7fd      	b.n	8001e58 <NMI_Handler+0x4>

08001e5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e60:	bf00      	nop
 8001e62:	e7fd      	b.n	8001e60 <HardFault_Handler+0x4>

08001e64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e68:	bf00      	nop
 8001e6a:	e7fd      	b.n	8001e68 <MemManage_Handler+0x4>

08001e6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e70:	bf00      	nop
 8001e72:	e7fd      	b.n	8001e70 <BusFault_Handler+0x4>

08001e74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e78:	bf00      	nop
 8001e7a:	e7fd      	b.n	8001e78 <UsageFault_Handler+0x4>

08001e7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e80:	bf00      	nop
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr

08001e8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e9c:	bf00      	nop
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
	...

08001ea8 <SysTick_Handler>:
  * @brief This function handles System tick timer.
  */

extern volatile uint32_t tick;
void SysTick_Handler(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eac:	f000 faba 	bl	8002424 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  tick++;
 8001eb0:	4b03      	ldr	r3, [pc, #12]	@ (8001ec0 <SysTick_Handler+0x18>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	4a02      	ldr	r2, [pc, #8]	@ (8001ec0 <SysTick_Handler+0x18>)
 8001eb8:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000208 	.word	0x20000208

08001ec4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  return 1;
 8001ec8:	2301      	movs	r3, #1
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <_kill>:

int _kill(int pid, int sig)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ede:	f001 fdbf 	bl	8003a60 <__errno>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2216      	movs	r2, #22
 8001ee6:	601a      	str	r2, [r3, #0]
  return -1;
 8001ee8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <_exit>:

void _exit (int status)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001efc:	f04f 31ff 	mov.w	r1, #4294967295
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7ff ffe7 	bl	8001ed4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f06:	bf00      	nop
 8001f08:	e7fd      	b.n	8001f06 <_exit+0x12>

08001f0a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b086      	sub	sp, #24
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	60f8      	str	r0, [r7, #12]
 8001f12:	60b9      	str	r1, [r7, #8]
 8001f14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f16:	2300      	movs	r3, #0
 8001f18:	617b      	str	r3, [r7, #20]
 8001f1a:	e00a      	b.n	8001f32 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f1c:	f3af 8000 	nop.w
 8001f20:	4601      	mov	r1, r0
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	1c5a      	adds	r2, r3, #1
 8001f26:	60ba      	str	r2, [r7, #8]
 8001f28:	b2ca      	uxtb	r2, r1
 8001f2a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	617b      	str	r3, [r7, #20]
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	dbf0      	blt.n	8001f1c <_read+0x12>
  }

  return len;
 8001f3a:	687b      	ldr	r3, [r7, #4]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f50:	2300      	movs	r3, #0
 8001f52:	617b      	str	r3, [r7, #20]
 8001f54:	e009      	b.n	8001f6a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	1c5a      	adds	r2, r3, #1
 8001f5a:	60ba      	str	r2, [r7, #8]
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	3301      	adds	r3, #1
 8001f68:	617b      	str	r3, [r7, #20]
 8001f6a:	697a      	ldr	r2, [r7, #20]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	dbf1      	blt.n	8001f56 <_write+0x12>
  }
  return len;
 8001f72:	687b      	ldr	r3, [r7, #4]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3718      	adds	r7, #24
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <_close>:

int _close(int file)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fa4:	605a      	str	r2, [r3, #4]
  return 0;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <_isatty>:

int _isatty(int file)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fbc:	2301      	movs	r3, #1
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b085      	sub	sp, #20
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	60f8      	str	r0, [r7, #12]
 8001fd2:	60b9      	str	r1, [r7, #8]
 8001fd4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fec:	4a14      	ldr	r2, [pc, #80]	@ (8002040 <_sbrk+0x5c>)
 8001fee:	4b15      	ldr	r3, [pc, #84]	@ (8002044 <_sbrk+0x60>)
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ff8:	4b13      	ldr	r3, [pc, #76]	@ (8002048 <_sbrk+0x64>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d102      	bne.n	8002006 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002000:	4b11      	ldr	r3, [pc, #68]	@ (8002048 <_sbrk+0x64>)
 8002002:	4a12      	ldr	r2, [pc, #72]	@ (800204c <_sbrk+0x68>)
 8002004:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002006:	4b10      	ldr	r3, [pc, #64]	@ (8002048 <_sbrk+0x64>)
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4413      	add	r3, r2
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	429a      	cmp	r2, r3
 8002012:	d207      	bcs.n	8002024 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002014:	f001 fd24 	bl	8003a60 <__errno>
 8002018:	4603      	mov	r3, r0
 800201a:	220c      	movs	r2, #12
 800201c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800201e:	f04f 33ff 	mov.w	r3, #4294967295
 8002022:	e009      	b.n	8002038 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002024:	4b08      	ldr	r3, [pc, #32]	@ (8002048 <_sbrk+0x64>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800202a:	4b07      	ldr	r3, [pc, #28]	@ (8002048 <_sbrk+0x64>)
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4413      	add	r3, r2
 8002032:	4a05      	ldr	r2, [pc, #20]	@ (8002048 <_sbrk+0x64>)
 8002034:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002036:	68fb      	ldr	r3, [r7, #12]
}
 8002038:	4618      	mov	r0, r3
 800203a:	3718      	adds	r7, #24
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	20020000 	.word	0x20020000
 8002044:	00000400 	.word	0x00000400
 8002048:	20000204 	.word	0x20000204
 800204c:	20000360 	.word	0x20000360

08002050 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	6039      	str	r1, [r7, #0]
 800205a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800205c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002060:	2b00      	cmp	r3, #0
 8002062:	db0a      	blt.n	800207a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	b2da      	uxtb	r2, r3
 8002068:	490c      	ldr	r1, [pc, #48]	@ (800209c <__NVIC_SetPriority+0x4c>)
 800206a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206e:	0112      	lsls	r2, r2, #4
 8002070:	b2d2      	uxtb	r2, r2
 8002072:	440b      	add	r3, r1
 8002074:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002078:	e00a      	b.n	8002090 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	b2da      	uxtb	r2, r3
 800207e:	4908      	ldr	r1, [pc, #32]	@ (80020a0 <__NVIC_SetPriority+0x50>)
 8002080:	79fb      	ldrb	r3, [r7, #7]
 8002082:	f003 030f 	and.w	r3, r3, #15
 8002086:	3b04      	subs	r3, #4
 8002088:	0112      	lsls	r2, r2, #4
 800208a:	b2d2      	uxtb	r2, r2
 800208c:	440b      	add	r3, r1
 800208e:	761a      	strb	r2, [r3, #24]
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	e000e100 	.word	0xe000e100
 80020a0:	e000ed00 	.word	0xe000ed00

080020a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	3b01      	subs	r3, #1
 80020b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020b4:	d301      	bcc.n	80020ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020b6:	2301      	movs	r3, #1
 80020b8:	e00f      	b.n	80020da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ba:	4a0a      	ldr	r2, [pc, #40]	@ (80020e4 <SysTick_Config+0x40>)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3b01      	subs	r3, #1
 80020c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020c2:	210f      	movs	r1, #15
 80020c4:	f04f 30ff 	mov.w	r0, #4294967295
 80020c8:	f7ff ffc2 	bl	8002050 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020cc:	4b05      	ldr	r3, [pc, #20]	@ (80020e4 <SysTick_Config+0x40>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020d2:	4b04      	ldr	r3, [pc, #16]	@ (80020e4 <SysTick_Config+0x40>)
 80020d4:	2207      	movs	r2, #7
 80020d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	e000e010 	.word	0xe000e010

080020e8 <delay_ms>:
#include "system_config.h"

volatile uint32_t tick = 0;

void delay_ms(uint32_t ms) {
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
    uint32_t start = tick;
 80020f0:	4b08      	ldr	r3, [pc, #32]	@ (8002114 <delay_ms+0x2c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	60fb      	str	r3, [r7, #12]
    while (tick - start < ms);
 80020f6:	bf00      	nop
 80020f8:	4b06      	ldr	r3, [pc, #24]	@ (8002114 <delay_ms+0x2c>)
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	429a      	cmp	r2, r3
 8002104:	d8f8      	bhi.n	80020f8 <delay_ms+0x10>
}
 8002106:	bf00      	nop
 8002108:	bf00      	nop
 800210a:	3714      	adds	r7, #20
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	20000208 	.word	0x20000208

08002118 <SystemClock_Config>:

void SystemClock_Config(void) {
 8002118:	b580      	push	{r7, lr}
 800211a:	b094      	sub	sp, #80	@ 0x50
 800211c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800211e:	f107 0320 	add.w	r3, r7, #32
 8002122:	2230      	movs	r2, #48	@ 0x30
 8002124:	2100      	movs	r1, #0
 8002126:	4618      	mov	r0, r3
 8002128:	f001 fc47 	bl	80039ba <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800212c:	f107 030c 	add.w	r3, r7, #12
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	60da      	str	r2, [r3, #12]
 800213a:	611a      	str	r2, [r3, #16]

    __HAL_RCC_PWR_CLK_ENABLE();
 800213c:	2300      	movs	r3, #0
 800213e:	60bb      	str	r3, [r7, #8]
 8002140:	4b2c      	ldr	r3, [pc, #176]	@ (80021f4 <SystemClock_Config+0xdc>)
 8002142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002144:	4a2b      	ldr	r2, [pc, #172]	@ (80021f4 <SystemClock_Config+0xdc>)
 8002146:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800214a:	6413      	str	r3, [r2, #64]	@ 0x40
 800214c:	4b29      	ldr	r3, [pc, #164]	@ (80021f4 <SystemClock_Config+0xdc>)
 800214e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002150:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002154:	60bb      	str	r3, [r7, #8]
 8002156:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002158:	2300      	movs	r3, #0
 800215a:	607b      	str	r3, [r7, #4]
 800215c:	4b26      	ldr	r3, [pc, #152]	@ (80021f8 <SystemClock_Config+0xe0>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a25      	ldr	r2, [pc, #148]	@ (80021f8 <SystemClock_Config+0xe0>)
 8002162:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002166:	6013      	str	r3, [r2, #0]
 8002168:	4b23      	ldr	r3, [pc, #140]	@ (80021f8 <SystemClock_Config+0xe0>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002170:	607b      	str	r3, [r7, #4]
 8002172:	687b      	ldr	r3, [r7, #4]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002174:	2301      	movs	r3, #1
 8002176:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002178:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800217c:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800217e:	2302      	movs	r3, #2
 8002180:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002182:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002186:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 4;
 8002188:	2304      	movs	r3, #4
 800218a:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 84;
 800218c:	2354      	movs	r3, #84	@ 0x54
 800218e:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002190:	2302      	movs	r3, #2
 8002192:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8002194:	2304      	movs	r3, #4
 8002196:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002198:	f107 0320 	add.w	r3, r7, #32
 800219c:	4618      	mov	r0, r3
 800219e:	f000 fa17 	bl	80025d0 <HAL_RCC_OscConfig>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <SystemClock_Config+0x94>
        while (1);
 80021a8:	bf00      	nop
 80021aa:	e7fd      	b.n	80021a8 <SystemClock_Config+0x90>
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80021ac:	230f      	movs	r3, #15
 80021ae:	60fb      	str	r3, [r7, #12]
                                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021b0:	2302      	movs	r3, #2
 80021b2:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021bc:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021be:	2300      	movs	r3, #0
 80021c0:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80021c2:	f107 030c 	add.w	r3, r7, #12
 80021c6:	2102      	movs	r1, #2
 80021c8:	4618      	mov	r0, r3
 80021ca:	f000 fc79 	bl	8002ac0 <HAL_RCC_ClockConfig>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <SystemClock_Config+0xc0>
        while (1);
 80021d4:	bf00      	nop
 80021d6:	e7fd      	b.n	80021d4 <SystemClock_Config+0xbc>
    }
    SysTick_Config(SystemCoreClock / 1000);
 80021d8:	4b08      	ldr	r3, [pc, #32]	@ (80021fc <SystemClock_Config+0xe4>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a08      	ldr	r2, [pc, #32]	@ (8002200 <SystemClock_Config+0xe8>)
 80021de:	fba2 2303 	umull	r2, r3, r2, r3
 80021e2:	099b      	lsrs	r3, r3, #6
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff ff5d 	bl	80020a4 <SysTick_Config>
}
 80021ea:	bf00      	nop
 80021ec:	3750      	adds	r7, #80	@ 0x50
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40007000 	.word	0x40007000
 80021fc:	2000000c 	.word	0x2000000c
 8002200:	10624dd3 	.word	0x10624dd3

08002204 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002208:	4b06      	ldr	r3, [pc, #24]	@ (8002224 <SystemInit+0x20>)
 800220a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800220e:	4a05      	ldr	r2, [pc, #20]	@ (8002224 <SystemInit+0x20>)
 8002210:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002214:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002218:	bf00      	nop
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	e000ed00 	.word	0xe000ed00

08002228 <UART1_Init>:
#include "uart.h"

void UART1_Init(void) {
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 800222c:	4b20      	ldr	r3, [pc, #128]	@ (80022b0 <UART1_Init+0x88>)
 800222e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002230:	4a1f      	ldr	r2, [pc, #124]	@ (80022b0 <UART1_Init+0x88>)
 8002232:	f043 0301 	orr.w	r3, r3, #1
 8002236:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8002238:	4b1d      	ldr	r3, [pc, #116]	@ (80022b0 <UART1_Init+0x88>)
 800223a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800223c:	4a1c      	ldr	r2, [pc, #112]	@ (80022b0 <UART1_Init+0x88>)
 800223e:	f043 0310 	orr.w	r3, r3, #16
 8002242:	6453      	str	r3, [r2, #68]	@ 0x44
    GPIOA->MODER &= ~((3U << (UART1_TX_PIN * 2)) | (3U << (UART1_RX_PIN * 2)));
 8002244:	4b1b      	ldr	r3, [pc, #108]	@ (80022b4 <UART1_Init+0x8c>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a1a      	ldr	r2, [pc, #104]	@ (80022b4 <UART1_Init+0x8c>)
 800224a:	f423 1370 	bic.w	r3, r3, #3932160	@ 0x3c0000
 800224e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (2U << (UART1_TX_PIN * 2)) | (2U << (UART1_RX_PIN * 2));
 8002250:	4b18      	ldr	r3, [pc, #96]	@ (80022b4 <UART1_Init+0x8c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a17      	ldr	r2, [pc, #92]	@ (80022b4 <UART1_Init+0x8c>)
 8002256:	f443 1320 	orr.w	r3, r3, #2621440	@ 0x280000
 800225a:	6013      	str	r3, [r2, #0]
    GPIOA->OTYPER &= ~((1U << UART1_TX_PIN) | (1U << UART1_RX_PIN));
 800225c:	4b15      	ldr	r3, [pc, #84]	@ (80022b4 <UART1_Init+0x8c>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	4a14      	ldr	r2, [pc, #80]	@ (80022b4 <UART1_Init+0x8c>)
 8002262:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002266:	6053      	str	r3, [r2, #4]
    GPIOA->OSPEEDR |= (3U << (UART1_TX_PIN * 2)) | (3U << (UART1_RX_PIN * 2));
 8002268:	4b12      	ldr	r3, [pc, #72]	@ (80022b4 <UART1_Init+0x8c>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	4a11      	ldr	r2, [pc, #68]	@ (80022b4 <UART1_Init+0x8c>)
 800226e:	f443 1370 	orr.w	r3, r3, #3932160	@ 0x3c0000
 8002272:	6093      	str	r3, [r2, #8]
    GPIOA->AFR[1] |= (7U << ((UART1_TX_PIN - 8) * 4)) | (7U << ((UART1_RX_PIN - 8) * 4));
 8002274:	4b0f      	ldr	r3, [pc, #60]	@ (80022b4 <UART1_Init+0x8c>)
 8002276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002278:	4a0e      	ldr	r2, [pc, #56]	@ (80022b4 <UART1_Init+0x8c>)
 800227a:	f443 63ee 	orr.w	r3, r3, #1904	@ 0x770
 800227e:	6253      	str	r3, [r2, #36]	@ 0x24
    USART1->CR1 = 0;
 8002280:	4b0d      	ldr	r3, [pc, #52]	@ (80022b8 <UART1_Init+0x90>)
 8002282:	2200      	movs	r2, #0
 8002284:	60da      	str	r2, [r3, #12]
    USART1->BRR = SystemCoreClock / UART1_BAUDRATE;
 8002286:	4b0d      	ldr	r3, [pc, #52]	@ (80022bc <UART1_Init+0x94>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a0b      	ldr	r2, [pc, #44]	@ (80022b8 <UART1_Init+0x90>)
 800228c:	490c      	ldr	r1, [pc, #48]	@ (80022c0 <UART1_Init+0x98>)
 800228e:	fba1 1303 	umull	r1, r3, r1, r3
 8002292:	0a9b      	lsrs	r3, r3, #10
 8002294:	6093      	str	r3, [r2, #8]
    USART1->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8002296:	4b08      	ldr	r3, [pc, #32]	@ (80022b8 <UART1_Init+0x90>)
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	4a07      	ldr	r2, [pc, #28]	@ (80022b8 <UART1_Init+0x90>)
 800229c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80022a0:	f043 030c 	orr.w	r3, r3, #12
 80022a4:	60d3      	str	r3, [r2, #12]
}
 80022a6:	bf00      	nop
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	40023800 	.word	0x40023800
 80022b4:	40020000 	.word	0x40020000
 80022b8:	40011000 	.word	0x40011000
 80022bc:	2000000c 	.word	0x2000000c
 80022c0:	1b4e81b5 	.word	0x1b4e81b5

080022c4 <UART1_SendString>:

void UART1_SendString(char *str) {
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
    while (*str) {
 80022cc:	e00c      	b.n	80022e8 <UART1_SendString+0x24>
        while (!(USART1->SR & USART_SR_TXE));
 80022ce:	bf00      	nop
 80022d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002300 <UART1_SendString+0x3c>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d0f9      	beq.n	80022d0 <UART1_SendString+0xc>
        USART1->DR = *str++;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	1c5a      	adds	r2, r3, #1
 80022e0:	607a      	str	r2, [r7, #4]
 80022e2:	781a      	ldrb	r2, [r3, #0]
 80022e4:	4b06      	ldr	r3, [pc, #24]	@ (8002300 <UART1_SendString+0x3c>)
 80022e6:	605a      	str	r2, [r3, #4]
    while (*str) {
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1ee      	bne.n	80022ce <UART1_SendString+0xa>
    }
}
 80022f0:	bf00      	nop
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	40011000 	.word	0x40011000

08002304 <UART1_ReceiveString>:

void UART1_ReceiveString(char *buffer, uint8_t max_len) {
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	460b      	mov	r3, r1
 800230e:	70fb      	strb	r3, [r7, #3]
    uint8_t i = 0;
 8002310:	2300      	movs	r3, #0
 8002312:	73fb      	strb	r3, [r7, #15]
    while (i < max_len - 1) {
 8002314:	e01a      	b.n	800234c <UART1_ReceiveString+0x48>
        while (!(USART1->SR & USART_SR_RXNE));
 8002316:	bf00      	nop
 8002318:	4b14      	ldr	r3, [pc, #80]	@ (800236c <UART1_ReceiveString+0x68>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0320 	and.w	r3, r3, #32
 8002320:	2b00      	cmp	r3, #0
 8002322:	d0f9      	beq.n	8002318 <UART1_ReceiveString+0x14>
        char c = USART1->DR;
 8002324:	4b11      	ldr	r3, [pc, #68]	@ (800236c <UART1_ReceiveString+0x68>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	73bb      	strb	r3, [r7, #14]
        if (c == '\n') {
 800232a:	7bbb      	ldrb	r3, [r7, #14]
 800232c:	2b0a      	cmp	r3, #10
 800232e:	d105      	bne.n	800233c <UART1_ReceiveString+0x38>
            buffer[i] = '\0';
 8002330:	7bfb      	ldrb	r3, [r7, #15]
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	4413      	add	r3, r2
 8002336:	2200      	movs	r2, #0
 8002338:	701a      	strb	r2, [r3, #0]
            break;
 800233a:	e00c      	b.n	8002356 <UART1_ReceiveString+0x52>
        }
        buffer[i++] = c;
 800233c:	7bfb      	ldrb	r3, [r7, #15]
 800233e:	1c5a      	adds	r2, r3, #1
 8002340:	73fa      	strb	r2, [r7, #15]
 8002342:	461a      	mov	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4413      	add	r3, r2
 8002348:	7bba      	ldrb	r2, [r7, #14]
 800234a:	701a      	strb	r2, [r3, #0]
    while (i < max_len - 1) {
 800234c:	7bfa      	ldrb	r2, [r7, #15]
 800234e:	78fb      	ldrb	r3, [r7, #3]
 8002350:	3b01      	subs	r3, #1
 8002352:	429a      	cmp	r2, r3
 8002354:	dbdf      	blt.n	8002316 <UART1_ReceiveString+0x12>
    }
    buffer[i] = '\0';
 8002356:	7bfb      	ldrb	r3, [r7, #15]
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	4413      	add	r3, r2
 800235c:	2200      	movs	r2, #0
 800235e:	701a      	strb	r2, [r3, #0]
}
 8002360:	bf00      	nop
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	40011000 	.word	0x40011000

08002370 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002370:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80023a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002374:	f7ff ff46 	bl	8002204 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002378:	480c      	ldr	r0, [pc, #48]	@ (80023ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800237a:	490d      	ldr	r1, [pc, #52]	@ (80023b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800237c:	4a0d      	ldr	r2, [pc, #52]	@ (80023b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800237e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002380:	e002      	b.n	8002388 <LoopCopyDataInit>

08002382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002386:	3304      	adds	r3, #4

08002388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800238a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800238c:	d3f9      	bcc.n	8002382 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800238e:	4a0a      	ldr	r2, [pc, #40]	@ (80023b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002390:	4c0a      	ldr	r4, [pc, #40]	@ (80023bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002394:	e001      	b.n	800239a <LoopFillZerobss>

08002396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002398:	3204      	adds	r2, #4

0800239a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800239a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800239c:	d3fb      	bcc.n	8002396 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800239e:	f001 fb65 	bl	8003a6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023a2:	f7fe ff41 	bl	8001228 <main>
  bx  lr    
 80023a6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80023a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023b0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80023b4:	08006a70 	.word	0x08006a70
  ldr r2, =_sbss
 80023b8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80023bc:	2000035c 	.word	0x2000035c

080023c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023c0:	e7fe      	b.n	80023c0 <ADC_IRQHandler>
	...

080023c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023cc:	4b12      	ldr	r3, [pc, #72]	@ (8002418 <HAL_InitTick+0x54>)
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	4b12      	ldr	r3, [pc, #72]	@ (800241c <HAL_InitTick+0x58>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	4619      	mov	r1, r3
 80023d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023da:	fbb3 f3f1 	udiv	r3, r3, r1
 80023de:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e2:	4618      	mov	r0, r3
 80023e4:	f000 f8e8 	bl	80025b8 <HAL_SYSTICK_Config>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e00e      	b.n	8002410 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2b0f      	cmp	r3, #15
 80023f6:	d80a      	bhi.n	800240e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023f8:	2200      	movs	r2, #0
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002400:	f000 f8be 	bl	8002580 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002404:	4a06      	ldr	r2, [pc, #24]	@ (8002420 <HAL_InitTick+0x5c>)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800240a:	2300      	movs	r3, #0
 800240c:	e000      	b.n	8002410 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
}
 8002410:	4618      	mov	r0, r3
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	2000000c 	.word	0x2000000c
 800241c:	20000014 	.word	0x20000014
 8002420:	20000010 	.word	0x20000010

08002424 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002428:	4b06      	ldr	r3, [pc, #24]	@ (8002444 <HAL_IncTick+0x20>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	461a      	mov	r2, r3
 800242e:	4b06      	ldr	r3, [pc, #24]	@ (8002448 <HAL_IncTick+0x24>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4413      	add	r3, r2
 8002434:	4a04      	ldr	r2, [pc, #16]	@ (8002448 <HAL_IncTick+0x24>)
 8002436:	6013      	str	r3, [r2, #0]
}
 8002438:	bf00      	nop
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	20000014 	.word	0x20000014
 8002448:	2000020c 	.word	0x2000020c

0800244c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  return uwTick;
 8002450:	4b03      	ldr	r3, [pc, #12]	@ (8002460 <HAL_GetTick+0x14>)
 8002452:	681b      	ldr	r3, [r3, #0]
}
 8002454:	4618      	mov	r0, r3
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	2000020c 	.word	0x2000020c

08002464 <__NVIC_GetPriorityGrouping>:
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002468:	4b04      	ldr	r3, [pc, #16]	@ (800247c <__NVIC_GetPriorityGrouping+0x18>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	0a1b      	lsrs	r3, r3, #8
 800246e:	f003 0307 	and.w	r3, r3, #7
}
 8002472:	4618      	mov	r0, r3
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	e000ed00 	.word	0xe000ed00

08002480 <__NVIC_SetPriority>:
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	6039      	str	r1, [r7, #0]
 800248a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800248c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002490:	2b00      	cmp	r3, #0
 8002492:	db0a      	blt.n	80024aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	b2da      	uxtb	r2, r3
 8002498:	490c      	ldr	r1, [pc, #48]	@ (80024cc <__NVIC_SetPriority+0x4c>)
 800249a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249e:	0112      	lsls	r2, r2, #4
 80024a0:	b2d2      	uxtb	r2, r2
 80024a2:	440b      	add	r3, r1
 80024a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80024a8:	e00a      	b.n	80024c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	4908      	ldr	r1, [pc, #32]	@ (80024d0 <__NVIC_SetPriority+0x50>)
 80024b0:	79fb      	ldrb	r3, [r7, #7]
 80024b2:	f003 030f 	and.w	r3, r3, #15
 80024b6:	3b04      	subs	r3, #4
 80024b8:	0112      	lsls	r2, r2, #4
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	440b      	add	r3, r1
 80024be:	761a      	strb	r2, [r3, #24]
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	e000e100 	.word	0xe000e100
 80024d0:	e000ed00 	.word	0xe000ed00

080024d4 <NVIC_EncodePriority>:
{
 80024d4:	b480      	push	{r7}
 80024d6:	b089      	sub	sp, #36	@ 0x24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	f1c3 0307 	rsb	r3, r3, #7
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	bf28      	it	cs
 80024f2:	2304      	movcs	r3, #4
 80024f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	3304      	adds	r3, #4
 80024fa:	2b06      	cmp	r3, #6
 80024fc:	d902      	bls.n	8002504 <NVIC_EncodePriority+0x30>
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	3b03      	subs	r3, #3
 8002502:	e000      	b.n	8002506 <NVIC_EncodePriority+0x32>
 8002504:	2300      	movs	r3, #0
 8002506:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002508:	f04f 32ff 	mov.w	r2, #4294967295
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	43da      	mvns	r2, r3
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	401a      	ands	r2, r3
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800251c:	f04f 31ff 	mov.w	r1, #4294967295
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	fa01 f303 	lsl.w	r3, r1, r3
 8002526:	43d9      	mvns	r1, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800252c:	4313      	orrs	r3, r2
}
 800252e:	4618      	mov	r0, r3
 8002530:	3724      	adds	r7, #36	@ 0x24
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
	...

0800253c <SysTick_Config>:
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3b01      	subs	r3, #1
 8002548:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800254c:	d301      	bcc.n	8002552 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800254e:	2301      	movs	r3, #1
 8002550:	e00f      	b.n	8002572 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002552:	4a0a      	ldr	r2, [pc, #40]	@ (800257c <SysTick_Config+0x40>)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3b01      	subs	r3, #1
 8002558:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800255a:	210f      	movs	r1, #15
 800255c:	f04f 30ff 	mov.w	r0, #4294967295
 8002560:	f7ff ff8e 	bl	8002480 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002564:	4b05      	ldr	r3, [pc, #20]	@ (800257c <SysTick_Config+0x40>)
 8002566:	2200      	movs	r2, #0
 8002568:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800256a:	4b04      	ldr	r3, [pc, #16]	@ (800257c <SysTick_Config+0x40>)
 800256c:	2207      	movs	r2, #7
 800256e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	e000e010 	.word	0xe000e010

08002580 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	4603      	mov	r3, r0
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
 800258c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800258e:	2300      	movs	r3, #0
 8002590:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002592:	f7ff ff67 	bl	8002464 <__NVIC_GetPriorityGrouping>
 8002596:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	68b9      	ldr	r1, [r7, #8]
 800259c:	6978      	ldr	r0, [r7, #20]
 800259e:	f7ff ff99 	bl	80024d4 <NVIC_EncodePriority>
 80025a2:	4602      	mov	r2, r0
 80025a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025a8:	4611      	mov	r1, r2
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7ff ff68 	bl	8002480 <__NVIC_SetPriority>
}
 80025b0:	bf00      	nop
 80025b2:	3718      	adds	r7, #24
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f7ff ffbb 	bl	800253c <SysTick_Config>
 80025c6:	4603      	mov	r3, r0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e267      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d075      	beq.n	80026da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80025ee:	4b88      	ldr	r3, [pc, #544]	@ (8002810 <HAL_RCC_OscConfig+0x240>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 030c 	and.w	r3, r3, #12
 80025f6:	2b04      	cmp	r3, #4
 80025f8:	d00c      	beq.n	8002614 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025fa:	4b85      	ldr	r3, [pc, #532]	@ (8002810 <HAL_RCC_OscConfig+0x240>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002602:	2b08      	cmp	r3, #8
 8002604:	d112      	bne.n	800262c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002606:	4b82      	ldr	r3, [pc, #520]	@ (8002810 <HAL_RCC_OscConfig+0x240>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800260e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002612:	d10b      	bne.n	800262c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002614:	4b7e      	ldr	r3, [pc, #504]	@ (8002810 <HAL_RCC_OscConfig+0x240>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d05b      	beq.n	80026d8 <HAL_RCC_OscConfig+0x108>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d157      	bne.n	80026d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e242      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002634:	d106      	bne.n	8002644 <HAL_RCC_OscConfig+0x74>
 8002636:	4b76      	ldr	r3, [pc, #472]	@ (8002810 <HAL_RCC_OscConfig+0x240>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a75      	ldr	r2, [pc, #468]	@ (8002810 <HAL_RCC_OscConfig+0x240>)
 800263c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002640:	6013      	str	r3, [r2, #0]
 8002642:	e01d      	b.n	8002680 <HAL_RCC_OscConfig+0xb0>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800264c:	d10c      	bne.n	8002668 <HAL_RCC_OscConfig+0x98>
 800264e:	4b70      	ldr	r3, [pc, #448]	@ (8002810 <HAL_RCC_OscConfig+0x240>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a6f      	ldr	r2, [pc, #444]	@ (8002810 <HAL_RCC_OscConfig+0x240>)
 8002654:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	4b6d      	ldr	r3, [pc, #436]	@ (8002810 <HAL_RCC_OscConfig+0x240>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a6c      	ldr	r2, [pc, #432]	@ (8002810 <HAL_RCC_OscConfig+0x240>)
 8002660:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002664:	6013      	str	r3, [r2, #0]
 8002666:	e00b      	b.n	8002680 <HAL_RCC_OscConfig+0xb0>
 8002668:	4b69      	ldr	r3, [pc, #420]	@ (8002810 <HAL_RCC_OscConfig+0x240>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a68      	ldr	r2, [pc, #416]	@ (8002810 <HAL_RCC_OscConfig+0x240>)
 800266e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002672:	6013      	str	r3, [r2, #0]
 8002674:	4b66      	ldr	r3, [pc, #408]	@ (8002810 <HAL_RCC_OscConfig+0x240>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a65      	ldr	r2, [pc, #404]	@ (8002810 <HAL_RCC_OscConfig+0x240>)
 800267a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800267e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d013      	beq.n	80026b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002688:	f7ff fee0 	bl	800244c <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002690:	f7ff fedc 	bl	800244c <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b64      	cmp	r3, #100	@ 0x64
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e207      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026a2:	4b5b      	ldr	r3, [pc, #364]	@ (8002810 <HAL_RCC_OscConfig+0x240>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d0f0      	beq.n	8002690 <HAL_RCC_OscConfig+0xc0>
 80026ae:	e014      	b.n	80026da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b0:	f7ff fecc 	bl	800244c <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026b8:	f7ff fec8 	bl	800244c <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b64      	cmp	r3, #100	@ 0x64
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e1f3      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ca:	4b51      	ldr	r3, [pc, #324]	@ (8002810 <HAL_RCC_OscConfig+0x240>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1f0      	bne.n	80026b8 <HAL_RCC_OscConfig+0xe8>
 80026d6:	e000      	b.n	80026da <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d063      	beq.n	80027ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80026e6:	4b4a      	ldr	r3, [pc, #296]	@ (8002810 <HAL_RCC_OscConfig+0x240>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 030c 	and.w	r3, r3, #12
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00b      	beq.n	800270a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026f2:	4b47      	ldr	r3, [pc, #284]	@ (8002810 <HAL_RCC_OscConfig+0x240>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80026fa:	2b08      	cmp	r3, #8
 80026fc:	d11c      	bne.n	8002738 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026fe:	4b44      	ldr	r3, [pc, #272]	@ (8002810 <HAL_RCC_OscConfig+0x240>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d116      	bne.n	8002738 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800270a:	4b41      	ldr	r3, [pc, #260]	@ (8002810 <HAL_RCC_OscConfig+0x240>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d005      	beq.n	8002722 <HAL_RCC_OscConfig+0x152>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d001      	beq.n	8002722 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e1c7      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002722:	4b3b      	ldr	r3, [pc, #236]	@ (8002810 <HAL_RCC_OscConfig+0x240>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	4937      	ldr	r1, [pc, #220]	@ (8002810 <HAL_RCC_OscConfig+0x240>)
 8002732:	4313      	orrs	r3, r2
 8002734:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002736:	e03a      	b.n	80027ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d020      	beq.n	8002782 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002740:	4b34      	ldr	r3, [pc, #208]	@ (8002814 <HAL_RCC_OscConfig+0x244>)
 8002742:	2201      	movs	r2, #1
 8002744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002746:	f7ff fe81 	bl	800244c <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800274c:	e008      	b.n	8002760 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800274e:	f7ff fe7d 	bl	800244c <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d901      	bls.n	8002760 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e1a8      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002760:	4b2b      	ldr	r3, [pc, #172]	@ (8002810 <HAL_RCC_OscConfig+0x240>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d0f0      	beq.n	800274e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800276c:	4b28      	ldr	r3, [pc, #160]	@ (8002810 <HAL_RCC_OscConfig+0x240>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	4925      	ldr	r1, [pc, #148]	@ (8002810 <HAL_RCC_OscConfig+0x240>)
 800277c:	4313      	orrs	r3, r2
 800277e:	600b      	str	r3, [r1, #0]
 8002780:	e015      	b.n	80027ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002782:	4b24      	ldr	r3, [pc, #144]	@ (8002814 <HAL_RCC_OscConfig+0x244>)
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002788:	f7ff fe60 	bl	800244c <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002790:	f7ff fe5c 	bl	800244c <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e187      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027a2:	4b1b      	ldr	r3, [pc, #108]	@ (8002810 <HAL_RCC_OscConfig+0x240>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1f0      	bne.n	8002790 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0308 	and.w	r3, r3, #8
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d036      	beq.n	8002828 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d016      	beq.n	80027f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027c2:	4b15      	ldr	r3, [pc, #84]	@ (8002818 <HAL_RCC_OscConfig+0x248>)
 80027c4:	2201      	movs	r2, #1
 80027c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c8:	f7ff fe40 	bl	800244c <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027d0:	f7ff fe3c 	bl	800244c <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e167      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002810 <HAL_RCC_OscConfig+0x240>)
 80027e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d0f0      	beq.n	80027d0 <HAL_RCC_OscConfig+0x200>
 80027ee:	e01b      	b.n	8002828 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027f0:	4b09      	ldr	r3, [pc, #36]	@ (8002818 <HAL_RCC_OscConfig+0x248>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f6:	f7ff fe29 	bl	800244c <HAL_GetTick>
 80027fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027fc:	e00e      	b.n	800281c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027fe:	f7ff fe25 	bl	800244c <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d907      	bls.n	800281c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e150      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4e2>
 8002810:	40023800 	.word	0x40023800
 8002814:	42470000 	.word	0x42470000
 8002818:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800281c:	4b88      	ldr	r3, [pc, #544]	@ (8002a40 <HAL_RCC_OscConfig+0x470>)
 800281e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1ea      	bne.n	80027fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 8097 	beq.w	8002964 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002836:	2300      	movs	r3, #0
 8002838:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800283a:	4b81      	ldr	r3, [pc, #516]	@ (8002a40 <HAL_RCC_OscConfig+0x470>)
 800283c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10f      	bne.n	8002866 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	60bb      	str	r3, [r7, #8]
 800284a:	4b7d      	ldr	r3, [pc, #500]	@ (8002a40 <HAL_RCC_OscConfig+0x470>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284e:	4a7c      	ldr	r2, [pc, #496]	@ (8002a40 <HAL_RCC_OscConfig+0x470>)
 8002850:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002854:	6413      	str	r3, [r2, #64]	@ 0x40
 8002856:	4b7a      	ldr	r3, [pc, #488]	@ (8002a40 <HAL_RCC_OscConfig+0x470>)
 8002858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800285e:	60bb      	str	r3, [r7, #8]
 8002860:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002862:	2301      	movs	r3, #1
 8002864:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002866:	4b77      	ldr	r3, [pc, #476]	@ (8002a44 <HAL_RCC_OscConfig+0x474>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800286e:	2b00      	cmp	r3, #0
 8002870:	d118      	bne.n	80028a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002872:	4b74      	ldr	r3, [pc, #464]	@ (8002a44 <HAL_RCC_OscConfig+0x474>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a73      	ldr	r2, [pc, #460]	@ (8002a44 <HAL_RCC_OscConfig+0x474>)
 8002878:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800287c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800287e:	f7ff fde5 	bl	800244c <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002884:	e008      	b.n	8002898 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002886:	f7ff fde1 	bl	800244c <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e10c      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002898:	4b6a      	ldr	r3, [pc, #424]	@ (8002a44 <HAL_RCC_OscConfig+0x474>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0f0      	beq.n	8002886 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d106      	bne.n	80028ba <HAL_RCC_OscConfig+0x2ea>
 80028ac:	4b64      	ldr	r3, [pc, #400]	@ (8002a40 <HAL_RCC_OscConfig+0x470>)
 80028ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028b0:	4a63      	ldr	r2, [pc, #396]	@ (8002a40 <HAL_RCC_OscConfig+0x470>)
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80028b8:	e01c      	b.n	80028f4 <HAL_RCC_OscConfig+0x324>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	2b05      	cmp	r3, #5
 80028c0:	d10c      	bne.n	80028dc <HAL_RCC_OscConfig+0x30c>
 80028c2:	4b5f      	ldr	r3, [pc, #380]	@ (8002a40 <HAL_RCC_OscConfig+0x470>)
 80028c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028c6:	4a5e      	ldr	r2, [pc, #376]	@ (8002a40 <HAL_RCC_OscConfig+0x470>)
 80028c8:	f043 0304 	orr.w	r3, r3, #4
 80028cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80028ce:	4b5c      	ldr	r3, [pc, #368]	@ (8002a40 <HAL_RCC_OscConfig+0x470>)
 80028d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028d2:	4a5b      	ldr	r2, [pc, #364]	@ (8002a40 <HAL_RCC_OscConfig+0x470>)
 80028d4:	f043 0301 	orr.w	r3, r3, #1
 80028d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80028da:	e00b      	b.n	80028f4 <HAL_RCC_OscConfig+0x324>
 80028dc:	4b58      	ldr	r3, [pc, #352]	@ (8002a40 <HAL_RCC_OscConfig+0x470>)
 80028de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028e0:	4a57      	ldr	r2, [pc, #348]	@ (8002a40 <HAL_RCC_OscConfig+0x470>)
 80028e2:	f023 0301 	bic.w	r3, r3, #1
 80028e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80028e8:	4b55      	ldr	r3, [pc, #340]	@ (8002a40 <HAL_RCC_OscConfig+0x470>)
 80028ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ec:	4a54      	ldr	r2, [pc, #336]	@ (8002a40 <HAL_RCC_OscConfig+0x470>)
 80028ee:	f023 0304 	bic.w	r3, r3, #4
 80028f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d015      	beq.n	8002928 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028fc:	f7ff fda6 	bl	800244c <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002902:	e00a      	b.n	800291a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002904:	f7ff fda2 	bl	800244c <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002912:	4293      	cmp	r3, r2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e0cb      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800291a:	4b49      	ldr	r3, [pc, #292]	@ (8002a40 <HAL_RCC_OscConfig+0x470>)
 800291c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0ee      	beq.n	8002904 <HAL_RCC_OscConfig+0x334>
 8002926:	e014      	b.n	8002952 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002928:	f7ff fd90 	bl	800244c <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800292e:	e00a      	b.n	8002946 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002930:	f7ff fd8c 	bl	800244c <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800293e:	4293      	cmp	r3, r2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e0b5      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002946:	4b3e      	ldr	r3, [pc, #248]	@ (8002a40 <HAL_RCC_OscConfig+0x470>)
 8002948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1ee      	bne.n	8002930 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002952:	7dfb      	ldrb	r3, [r7, #23]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d105      	bne.n	8002964 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002958:	4b39      	ldr	r3, [pc, #228]	@ (8002a40 <HAL_RCC_OscConfig+0x470>)
 800295a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295c:	4a38      	ldr	r2, [pc, #224]	@ (8002a40 <HAL_RCC_OscConfig+0x470>)
 800295e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002962:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	2b00      	cmp	r3, #0
 800296a:	f000 80a1 	beq.w	8002ab0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800296e:	4b34      	ldr	r3, [pc, #208]	@ (8002a40 <HAL_RCC_OscConfig+0x470>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f003 030c 	and.w	r3, r3, #12
 8002976:	2b08      	cmp	r3, #8
 8002978:	d05c      	beq.n	8002a34 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	2b02      	cmp	r3, #2
 8002980:	d141      	bne.n	8002a06 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002982:	4b31      	ldr	r3, [pc, #196]	@ (8002a48 <HAL_RCC_OscConfig+0x478>)
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002988:	f7ff fd60 	bl	800244c <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002990:	f7ff fd5c 	bl	800244c <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e087      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029a2:	4b27      	ldr	r3, [pc, #156]	@ (8002a40 <HAL_RCC_OscConfig+0x470>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f0      	bne.n	8002990 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	69da      	ldr	r2, [r3, #28]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	431a      	orrs	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029bc:	019b      	lsls	r3, r3, #6
 80029be:	431a      	orrs	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c4:	085b      	lsrs	r3, r3, #1
 80029c6:	3b01      	subs	r3, #1
 80029c8:	041b      	lsls	r3, r3, #16
 80029ca:	431a      	orrs	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d0:	061b      	lsls	r3, r3, #24
 80029d2:	491b      	ldr	r1, [pc, #108]	@ (8002a40 <HAL_RCC_OscConfig+0x470>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a48 <HAL_RCC_OscConfig+0x478>)
 80029da:	2201      	movs	r2, #1
 80029dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029de:	f7ff fd35 	bl	800244c <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029e4:	e008      	b.n	80029f8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e6:	f7ff fd31 	bl	800244c <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e05c      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029f8:	4b11      	ldr	r3, [pc, #68]	@ (8002a40 <HAL_RCC_OscConfig+0x470>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d0f0      	beq.n	80029e6 <HAL_RCC_OscConfig+0x416>
 8002a04:	e054      	b.n	8002ab0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a06:	4b10      	ldr	r3, [pc, #64]	@ (8002a48 <HAL_RCC_OscConfig+0x478>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0c:	f7ff fd1e 	bl	800244c <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a14:	f7ff fd1a 	bl	800244c <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e045      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a26:	4b06      	ldr	r3, [pc, #24]	@ (8002a40 <HAL_RCC_OscConfig+0x470>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1f0      	bne.n	8002a14 <HAL_RCC_OscConfig+0x444>
 8002a32:	e03d      	b.n	8002ab0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d107      	bne.n	8002a4c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e038      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4e2>
 8002a40:	40023800 	.word	0x40023800
 8002a44:	40007000 	.word	0x40007000
 8002a48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a4c:	4b1b      	ldr	r3, [pc, #108]	@ (8002abc <HAL_RCC_OscConfig+0x4ec>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d028      	beq.n	8002aac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d121      	bne.n	8002aac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d11a      	bne.n	8002aac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d111      	bne.n	8002aac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a92:	085b      	lsrs	r3, r3, #1
 8002a94:	3b01      	subs	r3, #1
 8002a96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d107      	bne.n	8002aac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d001      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e000      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3718      	adds	r7, #24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40023800 	.word	0x40023800

08002ac0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e0cc      	b.n	8002c6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ad4:	4b68      	ldr	r3, [pc, #416]	@ (8002c78 <HAL_RCC_ClockConfig+0x1b8>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d90c      	bls.n	8002afc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ae2:	4b65      	ldr	r3, [pc, #404]	@ (8002c78 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	b2d2      	uxtb	r2, r2
 8002ae8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aea:	4b63      	ldr	r3, [pc, #396]	@ (8002c78 <HAL_RCC_ClockConfig+0x1b8>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0307 	and.w	r3, r3, #7
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d001      	beq.n	8002afc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e0b8      	b.n	8002c6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d020      	beq.n	8002b4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d005      	beq.n	8002b20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b14:	4b59      	ldr	r3, [pc, #356]	@ (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	4a58      	ldr	r2, [pc, #352]	@ (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b1a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b1e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0308 	and.w	r3, r3, #8
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d005      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b2c:	4b53      	ldr	r3, [pc, #332]	@ (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	4a52      	ldr	r2, [pc, #328]	@ (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b32:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b38:	4b50      	ldr	r3, [pc, #320]	@ (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	494d      	ldr	r1, [pc, #308]	@ (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d044      	beq.n	8002be0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d107      	bne.n	8002b6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b5e:	4b47      	ldr	r3, [pc, #284]	@ (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d119      	bne.n	8002b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e07f      	b.n	8002c6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d003      	beq.n	8002b7e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b7a:	2b03      	cmp	r3, #3
 8002b7c:	d107      	bne.n	8002b8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b7e:	4b3f      	ldr	r3, [pc, #252]	@ (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d109      	bne.n	8002b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e06f      	b.n	8002c6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b8e:	4b3b      	ldr	r3, [pc, #236]	@ (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e067      	b.n	8002c6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b9e:	4b37      	ldr	r3, [pc, #220]	@ (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f023 0203 	bic.w	r2, r3, #3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	4934      	ldr	r1, [pc, #208]	@ (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bb0:	f7ff fc4c 	bl	800244c <HAL_GetTick>
 8002bb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bb6:	e00a      	b.n	8002bce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bb8:	f7ff fc48 	bl	800244c <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e04f      	b.n	8002c6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bce:	4b2b      	ldr	r3, [pc, #172]	@ (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f003 020c 	and.w	r2, r3, #12
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d1eb      	bne.n	8002bb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002be0:	4b25      	ldr	r3, [pc, #148]	@ (8002c78 <HAL_RCC_ClockConfig+0x1b8>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d20c      	bcs.n	8002c08 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bee:	4b22      	ldr	r3, [pc, #136]	@ (8002c78 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	b2d2      	uxtb	r2, r2
 8002bf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bf6:	4b20      	ldr	r3, [pc, #128]	@ (8002c78 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0307 	and.w	r3, r3, #7
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d001      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e032      	b.n	8002c6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0304 	and.w	r3, r3, #4
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d008      	beq.n	8002c26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c14:	4b19      	ldr	r3, [pc, #100]	@ (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	4916      	ldr	r1, [pc, #88]	@ (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0308 	and.w	r3, r3, #8
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d009      	beq.n	8002c46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c32:	4b12      	ldr	r3, [pc, #72]	@ (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	490e      	ldr	r1, [pc, #56]	@ (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c46:	f000 f821 	bl	8002c8c <HAL_RCC_GetSysClockFreq>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	091b      	lsrs	r3, r3, #4
 8002c52:	f003 030f 	and.w	r3, r3, #15
 8002c56:	490a      	ldr	r1, [pc, #40]	@ (8002c80 <HAL_RCC_ClockConfig+0x1c0>)
 8002c58:	5ccb      	ldrb	r3, [r1, r3]
 8002c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c5e:	4a09      	ldr	r2, [pc, #36]	@ (8002c84 <HAL_RCC_ClockConfig+0x1c4>)
 8002c60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002c62:	4b09      	ldr	r3, [pc, #36]	@ (8002c88 <HAL_RCC_ClockConfig+0x1c8>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7ff fbac 	bl	80023c4 <HAL_InitTick>

  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	40023c00 	.word	0x40023c00
 8002c7c:	40023800 	.word	0x40023800
 8002c80:	080066c4 	.word	0x080066c4
 8002c84:	2000000c 	.word	0x2000000c
 8002c88:	20000010 	.word	0x20000010

08002c8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c90:	b094      	sub	sp, #80	@ 0x50
 8002c92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c94:	2300      	movs	r3, #0
 8002c96:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ca4:	4b79      	ldr	r3, [pc, #484]	@ (8002e8c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f003 030c 	and.w	r3, r3, #12
 8002cac:	2b08      	cmp	r3, #8
 8002cae:	d00d      	beq.n	8002ccc <HAL_RCC_GetSysClockFreq+0x40>
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	f200 80e1 	bhi.w	8002e78 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d002      	beq.n	8002cc0 <HAL_RCC_GetSysClockFreq+0x34>
 8002cba:	2b04      	cmp	r3, #4
 8002cbc:	d003      	beq.n	8002cc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002cbe:	e0db      	b.n	8002e78 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cc0:	4b73      	ldr	r3, [pc, #460]	@ (8002e90 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cc2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cc4:	e0db      	b.n	8002e7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cc6:	4b73      	ldr	r3, [pc, #460]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0x208>)
 8002cc8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cca:	e0d8      	b.n	8002e7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ccc:	4b6f      	ldr	r3, [pc, #444]	@ (8002e8c <HAL_RCC_GetSysClockFreq+0x200>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002cd4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cd6:	4b6d      	ldr	r3, [pc, #436]	@ (8002e8c <HAL_RCC_GetSysClockFreq+0x200>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d063      	beq.n	8002daa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ce2:	4b6a      	ldr	r3, [pc, #424]	@ (8002e8c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	099b      	lsrs	r3, r3, #6
 8002ce8:	2200      	movs	r2, #0
 8002cea:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002cec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cf4:	633b      	str	r3, [r7, #48]	@ 0x30
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	637b      	str	r3, [r7, #52]	@ 0x34
 8002cfa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002cfe:	4622      	mov	r2, r4
 8002d00:	462b      	mov	r3, r5
 8002d02:	f04f 0000 	mov.w	r0, #0
 8002d06:	f04f 0100 	mov.w	r1, #0
 8002d0a:	0159      	lsls	r1, r3, #5
 8002d0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d10:	0150      	lsls	r0, r2, #5
 8002d12:	4602      	mov	r2, r0
 8002d14:	460b      	mov	r3, r1
 8002d16:	4621      	mov	r1, r4
 8002d18:	1a51      	subs	r1, r2, r1
 8002d1a:	6139      	str	r1, [r7, #16]
 8002d1c:	4629      	mov	r1, r5
 8002d1e:	eb63 0301 	sbc.w	r3, r3, r1
 8002d22:	617b      	str	r3, [r7, #20]
 8002d24:	f04f 0200 	mov.w	r2, #0
 8002d28:	f04f 0300 	mov.w	r3, #0
 8002d2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d30:	4659      	mov	r1, fp
 8002d32:	018b      	lsls	r3, r1, #6
 8002d34:	4651      	mov	r1, sl
 8002d36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d3a:	4651      	mov	r1, sl
 8002d3c:	018a      	lsls	r2, r1, #6
 8002d3e:	4651      	mov	r1, sl
 8002d40:	ebb2 0801 	subs.w	r8, r2, r1
 8002d44:	4659      	mov	r1, fp
 8002d46:	eb63 0901 	sbc.w	r9, r3, r1
 8002d4a:	f04f 0200 	mov.w	r2, #0
 8002d4e:	f04f 0300 	mov.w	r3, #0
 8002d52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d5e:	4690      	mov	r8, r2
 8002d60:	4699      	mov	r9, r3
 8002d62:	4623      	mov	r3, r4
 8002d64:	eb18 0303 	adds.w	r3, r8, r3
 8002d68:	60bb      	str	r3, [r7, #8]
 8002d6a:	462b      	mov	r3, r5
 8002d6c:	eb49 0303 	adc.w	r3, r9, r3
 8002d70:	60fb      	str	r3, [r7, #12]
 8002d72:	f04f 0200 	mov.w	r2, #0
 8002d76:	f04f 0300 	mov.w	r3, #0
 8002d7a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d7e:	4629      	mov	r1, r5
 8002d80:	024b      	lsls	r3, r1, #9
 8002d82:	4621      	mov	r1, r4
 8002d84:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d88:	4621      	mov	r1, r4
 8002d8a:	024a      	lsls	r2, r1, #9
 8002d8c:	4610      	mov	r0, r2
 8002d8e:	4619      	mov	r1, r3
 8002d90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d92:	2200      	movs	r2, #0
 8002d94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d9c:	f7fd ff0c 	bl	8000bb8 <__aeabi_uldivmod>
 8002da0:	4602      	mov	r2, r0
 8002da2:	460b      	mov	r3, r1
 8002da4:	4613      	mov	r3, r2
 8002da6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002da8:	e058      	b.n	8002e5c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002daa:	4b38      	ldr	r3, [pc, #224]	@ (8002e8c <HAL_RCC_GetSysClockFreq+0x200>)
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	099b      	lsrs	r3, r3, #6
 8002db0:	2200      	movs	r2, #0
 8002db2:	4618      	mov	r0, r3
 8002db4:	4611      	mov	r1, r2
 8002db6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002dba:	623b      	str	r3, [r7, #32]
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dc0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002dc4:	4642      	mov	r2, r8
 8002dc6:	464b      	mov	r3, r9
 8002dc8:	f04f 0000 	mov.w	r0, #0
 8002dcc:	f04f 0100 	mov.w	r1, #0
 8002dd0:	0159      	lsls	r1, r3, #5
 8002dd2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dd6:	0150      	lsls	r0, r2, #5
 8002dd8:	4602      	mov	r2, r0
 8002dda:	460b      	mov	r3, r1
 8002ddc:	4641      	mov	r1, r8
 8002dde:	ebb2 0a01 	subs.w	sl, r2, r1
 8002de2:	4649      	mov	r1, r9
 8002de4:	eb63 0b01 	sbc.w	fp, r3, r1
 8002de8:	f04f 0200 	mov.w	r2, #0
 8002dec:	f04f 0300 	mov.w	r3, #0
 8002df0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002df4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002df8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002dfc:	ebb2 040a 	subs.w	r4, r2, sl
 8002e00:	eb63 050b 	sbc.w	r5, r3, fp
 8002e04:	f04f 0200 	mov.w	r2, #0
 8002e08:	f04f 0300 	mov.w	r3, #0
 8002e0c:	00eb      	lsls	r3, r5, #3
 8002e0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e12:	00e2      	lsls	r2, r4, #3
 8002e14:	4614      	mov	r4, r2
 8002e16:	461d      	mov	r5, r3
 8002e18:	4643      	mov	r3, r8
 8002e1a:	18e3      	adds	r3, r4, r3
 8002e1c:	603b      	str	r3, [r7, #0]
 8002e1e:	464b      	mov	r3, r9
 8002e20:	eb45 0303 	adc.w	r3, r5, r3
 8002e24:	607b      	str	r3, [r7, #4]
 8002e26:	f04f 0200 	mov.w	r2, #0
 8002e2a:	f04f 0300 	mov.w	r3, #0
 8002e2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e32:	4629      	mov	r1, r5
 8002e34:	028b      	lsls	r3, r1, #10
 8002e36:	4621      	mov	r1, r4
 8002e38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e3c:	4621      	mov	r1, r4
 8002e3e:	028a      	lsls	r2, r1, #10
 8002e40:	4610      	mov	r0, r2
 8002e42:	4619      	mov	r1, r3
 8002e44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e46:	2200      	movs	r2, #0
 8002e48:	61bb      	str	r3, [r7, #24]
 8002e4a:	61fa      	str	r2, [r7, #28]
 8002e4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e50:	f7fd feb2 	bl	8000bb8 <__aeabi_uldivmod>
 8002e54:	4602      	mov	r2, r0
 8002e56:	460b      	mov	r3, r1
 8002e58:	4613      	mov	r3, r2
 8002e5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e8c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	0c1b      	lsrs	r3, r3, #16
 8002e62:	f003 0303 	and.w	r3, r3, #3
 8002e66:	3301      	adds	r3, #1
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002e6c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e74:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e76:	e002      	b.n	8002e7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e78:	4b05      	ldr	r3, [pc, #20]	@ (8002e90 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e7a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3750      	adds	r7, #80	@ 0x50
 8002e84:	46bd      	mov	sp, r7
 8002e86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e8a:	bf00      	nop
 8002e8c:	40023800 	.word	0x40023800
 8002e90:	00f42400 	.word	0x00f42400
 8002e94:	007a1200 	.word	0x007a1200

08002e98 <__cvt>:
 8002e98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002e9c:	ec57 6b10 	vmov	r6, r7, d0
 8002ea0:	2f00      	cmp	r7, #0
 8002ea2:	460c      	mov	r4, r1
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	463b      	mov	r3, r7
 8002ea8:	bfbb      	ittet	lt
 8002eaa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8002eae:	461f      	movlt	r7, r3
 8002eb0:	2300      	movge	r3, #0
 8002eb2:	232d      	movlt	r3, #45	@ 0x2d
 8002eb4:	700b      	strb	r3, [r1, #0]
 8002eb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002eb8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8002ebc:	4691      	mov	r9, r2
 8002ebe:	f023 0820 	bic.w	r8, r3, #32
 8002ec2:	bfbc      	itt	lt
 8002ec4:	4632      	movlt	r2, r6
 8002ec6:	4616      	movlt	r6, r2
 8002ec8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002ecc:	d005      	beq.n	8002eda <__cvt+0x42>
 8002ece:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8002ed2:	d100      	bne.n	8002ed6 <__cvt+0x3e>
 8002ed4:	3401      	adds	r4, #1
 8002ed6:	2102      	movs	r1, #2
 8002ed8:	e000      	b.n	8002edc <__cvt+0x44>
 8002eda:	2103      	movs	r1, #3
 8002edc:	ab03      	add	r3, sp, #12
 8002ede:	9301      	str	r3, [sp, #4]
 8002ee0:	ab02      	add	r3, sp, #8
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	ec47 6b10 	vmov	d0, r6, r7
 8002ee8:	4653      	mov	r3, sl
 8002eea:	4622      	mov	r2, r4
 8002eec:	f000 fe70 	bl	8003bd0 <_dtoa_r>
 8002ef0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8002ef4:	4605      	mov	r5, r0
 8002ef6:	d119      	bne.n	8002f2c <__cvt+0x94>
 8002ef8:	f019 0f01 	tst.w	r9, #1
 8002efc:	d00e      	beq.n	8002f1c <__cvt+0x84>
 8002efe:	eb00 0904 	add.w	r9, r0, r4
 8002f02:	2200      	movs	r2, #0
 8002f04:	2300      	movs	r3, #0
 8002f06:	4630      	mov	r0, r6
 8002f08:	4639      	mov	r1, r7
 8002f0a:	f7fd fde5 	bl	8000ad8 <__aeabi_dcmpeq>
 8002f0e:	b108      	cbz	r0, 8002f14 <__cvt+0x7c>
 8002f10:	f8cd 900c 	str.w	r9, [sp, #12]
 8002f14:	2230      	movs	r2, #48	@ 0x30
 8002f16:	9b03      	ldr	r3, [sp, #12]
 8002f18:	454b      	cmp	r3, r9
 8002f1a:	d31e      	bcc.n	8002f5a <__cvt+0xc2>
 8002f1c:	9b03      	ldr	r3, [sp, #12]
 8002f1e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8002f20:	1b5b      	subs	r3, r3, r5
 8002f22:	4628      	mov	r0, r5
 8002f24:	6013      	str	r3, [r2, #0]
 8002f26:	b004      	add	sp, #16
 8002f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f2c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002f30:	eb00 0904 	add.w	r9, r0, r4
 8002f34:	d1e5      	bne.n	8002f02 <__cvt+0x6a>
 8002f36:	7803      	ldrb	r3, [r0, #0]
 8002f38:	2b30      	cmp	r3, #48	@ 0x30
 8002f3a:	d10a      	bne.n	8002f52 <__cvt+0xba>
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	2300      	movs	r3, #0
 8002f40:	4630      	mov	r0, r6
 8002f42:	4639      	mov	r1, r7
 8002f44:	f7fd fdc8 	bl	8000ad8 <__aeabi_dcmpeq>
 8002f48:	b918      	cbnz	r0, 8002f52 <__cvt+0xba>
 8002f4a:	f1c4 0401 	rsb	r4, r4, #1
 8002f4e:	f8ca 4000 	str.w	r4, [sl]
 8002f52:	f8da 3000 	ldr.w	r3, [sl]
 8002f56:	4499      	add	r9, r3
 8002f58:	e7d3      	b.n	8002f02 <__cvt+0x6a>
 8002f5a:	1c59      	adds	r1, r3, #1
 8002f5c:	9103      	str	r1, [sp, #12]
 8002f5e:	701a      	strb	r2, [r3, #0]
 8002f60:	e7d9      	b.n	8002f16 <__cvt+0x7e>

08002f62 <__exponent>:
 8002f62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f64:	2900      	cmp	r1, #0
 8002f66:	bfba      	itte	lt
 8002f68:	4249      	neglt	r1, r1
 8002f6a:	232d      	movlt	r3, #45	@ 0x2d
 8002f6c:	232b      	movge	r3, #43	@ 0x2b
 8002f6e:	2909      	cmp	r1, #9
 8002f70:	7002      	strb	r2, [r0, #0]
 8002f72:	7043      	strb	r3, [r0, #1]
 8002f74:	dd29      	ble.n	8002fca <__exponent+0x68>
 8002f76:	f10d 0307 	add.w	r3, sp, #7
 8002f7a:	461d      	mov	r5, r3
 8002f7c:	270a      	movs	r7, #10
 8002f7e:	461a      	mov	r2, r3
 8002f80:	fbb1 f6f7 	udiv	r6, r1, r7
 8002f84:	fb07 1416 	mls	r4, r7, r6, r1
 8002f88:	3430      	adds	r4, #48	@ 0x30
 8002f8a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8002f8e:	460c      	mov	r4, r1
 8002f90:	2c63      	cmp	r4, #99	@ 0x63
 8002f92:	f103 33ff 	add.w	r3, r3, #4294967295
 8002f96:	4631      	mov	r1, r6
 8002f98:	dcf1      	bgt.n	8002f7e <__exponent+0x1c>
 8002f9a:	3130      	adds	r1, #48	@ 0x30
 8002f9c:	1e94      	subs	r4, r2, #2
 8002f9e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002fa2:	1c41      	adds	r1, r0, #1
 8002fa4:	4623      	mov	r3, r4
 8002fa6:	42ab      	cmp	r3, r5
 8002fa8:	d30a      	bcc.n	8002fc0 <__exponent+0x5e>
 8002faa:	f10d 0309 	add.w	r3, sp, #9
 8002fae:	1a9b      	subs	r3, r3, r2
 8002fb0:	42ac      	cmp	r4, r5
 8002fb2:	bf88      	it	hi
 8002fb4:	2300      	movhi	r3, #0
 8002fb6:	3302      	adds	r3, #2
 8002fb8:	4403      	add	r3, r0
 8002fba:	1a18      	subs	r0, r3, r0
 8002fbc:	b003      	add	sp, #12
 8002fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fc0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8002fc4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8002fc8:	e7ed      	b.n	8002fa6 <__exponent+0x44>
 8002fca:	2330      	movs	r3, #48	@ 0x30
 8002fcc:	3130      	adds	r1, #48	@ 0x30
 8002fce:	7083      	strb	r3, [r0, #2]
 8002fd0:	70c1      	strb	r1, [r0, #3]
 8002fd2:	1d03      	adds	r3, r0, #4
 8002fd4:	e7f1      	b.n	8002fba <__exponent+0x58>
	...

08002fd8 <_printf_float>:
 8002fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fdc:	b08d      	sub	sp, #52	@ 0x34
 8002fde:	460c      	mov	r4, r1
 8002fe0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8002fe4:	4616      	mov	r6, r2
 8002fe6:	461f      	mov	r7, r3
 8002fe8:	4605      	mov	r5, r0
 8002fea:	f000 fcef 	bl	80039cc <_localeconv_r>
 8002fee:	6803      	ldr	r3, [r0, #0]
 8002ff0:	9304      	str	r3, [sp, #16]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7fd f944 	bl	8000280 <strlen>
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	930a      	str	r3, [sp, #40]	@ 0x28
 8002ffc:	f8d8 3000 	ldr.w	r3, [r8]
 8003000:	9005      	str	r0, [sp, #20]
 8003002:	3307      	adds	r3, #7
 8003004:	f023 0307 	bic.w	r3, r3, #7
 8003008:	f103 0208 	add.w	r2, r3, #8
 800300c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003010:	f8d4 b000 	ldr.w	fp, [r4]
 8003014:	f8c8 2000 	str.w	r2, [r8]
 8003018:	e9d3 8900 	ldrd	r8, r9, [r3]
 800301c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003020:	9307      	str	r3, [sp, #28]
 8003022:	f8cd 8018 	str.w	r8, [sp, #24]
 8003026:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800302a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800302e:	4b9c      	ldr	r3, [pc, #624]	@ (80032a0 <_printf_float+0x2c8>)
 8003030:	f04f 32ff 	mov.w	r2, #4294967295
 8003034:	f7fd fd82 	bl	8000b3c <__aeabi_dcmpun>
 8003038:	bb70      	cbnz	r0, 8003098 <_printf_float+0xc0>
 800303a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800303e:	4b98      	ldr	r3, [pc, #608]	@ (80032a0 <_printf_float+0x2c8>)
 8003040:	f04f 32ff 	mov.w	r2, #4294967295
 8003044:	f7fd fd5c 	bl	8000b00 <__aeabi_dcmple>
 8003048:	bb30      	cbnz	r0, 8003098 <_printf_float+0xc0>
 800304a:	2200      	movs	r2, #0
 800304c:	2300      	movs	r3, #0
 800304e:	4640      	mov	r0, r8
 8003050:	4649      	mov	r1, r9
 8003052:	f7fd fd4b 	bl	8000aec <__aeabi_dcmplt>
 8003056:	b110      	cbz	r0, 800305e <_printf_float+0x86>
 8003058:	232d      	movs	r3, #45	@ 0x2d
 800305a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800305e:	4a91      	ldr	r2, [pc, #580]	@ (80032a4 <_printf_float+0x2cc>)
 8003060:	4b91      	ldr	r3, [pc, #580]	@ (80032a8 <_printf_float+0x2d0>)
 8003062:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003066:	bf94      	ite	ls
 8003068:	4690      	movls	r8, r2
 800306a:	4698      	movhi	r8, r3
 800306c:	2303      	movs	r3, #3
 800306e:	6123      	str	r3, [r4, #16]
 8003070:	f02b 0304 	bic.w	r3, fp, #4
 8003074:	6023      	str	r3, [r4, #0]
 8003076:	f04f 0900 	mov.w	r9, #0
 800307a:	9700      	str	r7, [sp, #0]
 800307c:	4633      	mov	r3, r6
 800307e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003080:	4621      	mov	r1, r4
 8003082:	4628      	mov	r0, r5
 8003084:	f000 f9d2 	bl	800342c <_printf_common>
 8003088:	3001      	adds	r0, #1
 800308a:	f040 808d 	bne.w	80031a8 <_printf_float+0x1d0>
 800308e:	f04f 30ff 	mov.w	r0, #4294967295
 8003092:	b00d      	add	sp, #52	@ 0x34
 8003094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003098:	4642      	mov	r2, r8
 800309a:	464b      	mov	r3, r9
 800309c:	4640      	mov	r0, r8
 800309e:	4649      	mov	r1, r9
 80030a0:	f7fd fd4c 	bl	8000b3c <__aeabi_dcmpun>
 80030a4:	b140      	cbz	r0, 80030b8 <_printf_float+0xe0>
 80030a6:	464b      	mov	r3, r9
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	bfbc      	itt	lt
 80030ac:	232d      	movlt	r3, #45	@ 0x2d
 80030ae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80030b2:	4a7e      	ldr	r2, [pc, #504]	@ (80032ac <_printf_float+0x2d4>)
 80030b4:	4b7e      	ldr	r3, [pc, #504]	@ (80032b0 <_printf_float+0x2d8>)
 80030b6:	e7d4      	b.n	8003062 <_printf_float+0x8a>
 80030b8:	6863      	ldr	r3, [r4, #4]
 80030ba:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80030be:	9206      	str	r2, [sp, #24]
 80030c0:	1c5a      	adds	r2, r3, #1
 80030c2:	d13b      	bne.n	800313c <_printf_float+0x164>
 80030c4:	2306      	movs	r3, #6
 80030c6:	6063      	str	r3, [r4, #4]
 80030c8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80030cc:	2300      	movs	r3, #0
 80030ce:	6022      	str	r2, [r4, #0]
 80030d0:	9303      	str	r3, [sp, #12]
 80030d2:	ab0a      	add	r3, sp, #40	@ 0x28
 80030d4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80030d8:	ab09      	add	r3, sp, #36	@ 0x24
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	6861      	ldr	r1, [r4, #4]
 80030de:	ec49 8b10 	vmov	d0, r8, r9
 80030e2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80030e6:	4628      	mov	r0, r5
 80030e8:	f7ff fed6 	bl	8002e98 <__cvt>
 80030ec:	9b06      	ldr	r3, [sp, #24]
 80030ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80030f0:	2b47      	cmp	r3, #71	@ 0x47
 80030f2:	4680      	mov	r8, r0
 80030f4:	d129      	bne.n	800314a <_printf_float+0x172>
 80030f6:	1cc8      	adds	r0, r1, #3
 80030f8:	db02      	blt.n	8003100 <_printf_float+0x128>
 80030fa:	6863      	ldr	r3, [r4, #4]
 80030fc:	4299      	cmp	r1, r3
 80030fe:	dd41      	ble.n	8003184 <_printf_float+0x1ac>
 8003100:	f1aa 0a02 	sub.w	sl, sl, #2
 8003104:	fa5f fa8a 	uxtb.w	sl, sl
 8003108:	3901      	subs	r1, #1
 800310a:	4652      	mov	r2, sl
 800310c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003110:	9109      	str	r1, [sp, #36]	@ 0x24
 8003112:	f7ff ff26 	bl	8002f62 <__exponent>
 8003116:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003118:	1813      	adds	r3, r2, r0
 800311a:	2a01      	cmp	r2, #1
 800311c:	4681      	mov	r9, r0
 800311e:	6123      	str	r3, [r4, #16]
 8003120:	dc02      	bgt.n	8003128 <_printf_float+0x150>
 8003122:	6822      	ldr	r2, [r4, #0]
 8003124:	07d2      	lsls	r2, r2, #31
 8003126:	d501      	bpl.n	800312c <_printf_float+0x154>
 8003128:	3301      	adds	r3, #1
 800312a:	6123      	str	r3, [r4, #16]
 800312c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003130:	2b00      	cmp	r3, #0
 8003132:	d0a2      	beq.n	800307a <_printf_float+0xa2>
 8003134:	232d      	movs	r3, #45	@ 0x2d
 8003136:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800313a:	e79e      	b.n	800307a <_printf_float+0xa2>
 800313c:	9a06      	ldr	r2, [sp, #24]
 800313e:	2a47      	cmp	r2, #71	@ 0x47
 8003140:	d1c2      	bne.n	80030c8 <_printf_float+0xf0>
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1c0      	bne.n	80030c8 <_printf_float+0xf0>
 8003146:	2301      	movs	r3, #1
 8003148:	e7bd      	b.n	80030c6 <_printf_float+0xee>
 800314a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800314e:	d9db      	bls.n	8003108 <_printf_float+0x130>
 8003150:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003154:	d118      	bne.n	8003188 <_printf_float+0x1b0>
 8003156:	2900      	cmp	r1, #0
 8003158:	6863      	ldr	r3, [r4, #4]
 800315a:	dd0b      	ble.n	8003174 <_printf_float+0x19c>
 800315c:	6121      	str	r1, [r4, #16]
 800315e:	b913      	cbnz	r3, 8003166 <_printf_float+0x18e>
 8003160:	6822      	ldr	r2, [r4, #0]
 8003162:	07d0      	lsls	r0, r2, #31
 8003164:	d502      	bpl.n	800316c <_printf_float+0x194>
 8003166:	3301      	adds	r3, #1
 8003168:	440b      	add	r3, r1
 800316a:	6123      	str	r3, [r4, #16]
 800316c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800316e:	f04f 0900 	mov.w	r9, #0
 8003172:	e7db      	b.n	800312c <_printf_float+0x154>
 8003174:	b913      	cbnz	r3, 800317c <_printf_float+0x1a4>
 8003176:	6822      	ldr	r2, [r4, #0]
 8003178:	07d2      	lsls	r2, r2, #31
 800317a:	d501      	bpl.n	8003180 <_printf_float+0x1a8>
 800317c:	3302      	adds	r3, #2
 800317e:	e7f4      	b.n	800316a <_printf_float+0x192>
 8003180:	2301      	movs	r3, #1
 8003182:	e7f2      	b.n	800316a <_printf_float+0x192>
 8003184:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003188:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800318a:	4299      	cmp	r1, r3
 800318c:	db05      	blt.n	800319a <_printf_float+0x1c2>
 800318e:	6823      	ldr	r3, [r4, #0]
 8003190:	6121      	str	r1, [r4, #16]
 8003192:	07d8      	lsls	r0, r3, #31
 8003194:	d5ea      	bpl.n	800316c <_printf_float+0x194>
 8003196:	1c4b      	adds	r3, r1, #1
 8003198:	e7e7      	b.n	800316a <_printf_float+0x192>
 800319a:	2900      	cmp	r1, #0
 800319c:	bfd4      	ite	le
 800319e:	f1c1 0202 	rsble	r2, r1, #2
 80031a2:	2201      	movgt	r2, #1
 80031a4:	4413      	add	r3, r2
 80031a6:	e7e0      	b.n	800316a <_printf_float+0x192>
 80031a8:	6823      	ldr	r3, [r4, #0]
 80031aa:	055a      	lsls	r2, r3, #21
 80031ac:	d407      	bmi.n	80031be <_printf_float+0x1e6>
 80031ae:	6923      	ldr	r3, [r4, #16]
 80031b0:	4642      	mov	r2, r8
 80031b2:	4631      	mov	r1, r6
 80031b4:	4628      	mov	r0, r5
 80031b6:	47b8      	blx	r7
 80031b8:	3001      	adds	r0, #1
 80031ba:	d12b      	bne.n	8003214 <_printf_float+0x23c>
 80031bc:	e767      	b.n	800308e <_printf_float+0xb6>
 80031be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80031c2:	f240 80dd 	bls.w	8003380 <_printf_float+0x3a8>
 80031c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80031ca:	2200      	movs	r2, #0
 80031cc:	2300      	movs	r3, #0
 80031ce:	f7fd fc83 	bl	8000ad8 <__aeabi_dcmpeq>
 80031d2:	2800      	cmp	r0, #0
 80031d4:	d033      	beq.n	800323e <_printf_float+0x266>
 80031d6:	4a37      	ldr	r2, [pc, #220]	@ (80032b4 <_printf_float+0x2dc>)
 80031d8:	2301      	movs	r3, #1
 80031da:	4631      	mov	r1, r6
 80031dc:	4628      	mov	r0, r5
 80031de:	47b8      	blx	r7
 80031e0:	3001      	adds	r0, #1
 80031e2:	f43f af54 	beq.w	800308e <_printf_float+0xb6>
 80031e6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80031ea:	4543      	cmp	r3, r8
 80031ec:	db02      	blt.n	80031f4 <_printf_float+0x21c>
 80031ee:	6823      	ldr	r3, [r4, #0]
 80031f0:	07d8      	lsls	r0, r3, #31
 80031f2:	d50f      	bpl.n	8003214 <_printf_float+0x23c>
 80031f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80031f8:	4631      	mov	r1, r6
 80031fa:	4628      	mov	r0, r5
 80031fc:	47b8      	blx	r7
 80031fe:	3001      	adds	r0, #1
 8003200:	f43f af45 	beq.w	800308e <_printf_float+0xb6>
 8003204:	f04f 0900 	mov.w	r9, #0
 8003208:	f108 38ff 	add.w	r8, r8, #4294967295
 800320c:	f104 0a1a 	add.w	sl, r4, #26
 8003210:	45c8      	cmp	r8, r9
 8003212:	dc09      	bgt.n	8003228 <_printf_float+0x250>
 8003214:	6823      	ldr	r3, [r4, #0]
 8003216:	079b      	lsls	r3, r3, #30
 8003218:	f100 8103 	bmi.w	8003422 <_printf_float+0x44a>
 800321c:	68e0      	ldr	r0, [r4, #12]
 800321e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003220:	4298      	cmp	r0, r3
 8003222:	bfb8      	it	lt
 8003224:	4618      	movlt	r0, r3
 8003226:	e734      	b.n	8003092 <_printf_float+0xba>
 8003228:	2301      	movs	r3, #1
 800322a:	4652      	mov	r2, sl
 800322c:	4631      	mov	r1, r6
 800322e:	4628      	mov	r0, r5
 8003230:	47b8      	blx	r7
 8003232:	3001      	adds	r0, #1
 8003234:	f43f af2b 	beq.w	800308e <_printf_float+0xb6>
 8003238:	f109 0901 	add.w	r9, r9, #1
 800323c:	e7e8      	b.n	8003210 <_printf_float+0x238>
 800323e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003240:	2b00      	cmp	r3, #0
 8003242:	dc39      	bgt.n	80032b8 <_printf_float+0x2e0>
 8003244:	4a1b      	ldr	r2, [pc, #108]	@ (80032b4 <_printf_float+0x2dc>)
 8003246:	2301      	movs	r3, #1
 8003248:	4631      	mov	r1, r6
 800324a:	4628      	mov	r0, r5
 800324c:	47b8      	blx	r7
 800324e:	3001      	adds	r0, #1
 8003250:	f43f af1d 	beq.w	800308e <_printf_float+0xb6>
 8003254:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003258:	ea59 0303 	orrs.w	r3, r9, r3
 800325c:	d102      	bne.n	8003264 <_printf_float+0x28c>
 800325e:	6823      	ldr	r3, [r4, #0]
 8003260:	07d9      	lsls	r1, r3, #31
 8003262:	d5d7      	bpl.n	8003214 <_printf_float+0x23c>
 8003264:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003268:	4631      	mov	r1, r6
 800326a:	4628      	mov	r0, r5
 800326c:	47b8      	blx	r7
 800326e:	3001      	adds	r0, #1
 8003270:	f43f af0d 	beq.w	800308e <_printf_float+0xb6>
 8003274:	f04f 0a00 	mov.w	sl, #0
 8003278:	f104 0b1a 	add.w	fp, r4, #26
 800327c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800327e:	425b      	negs	r3, r3
 8003280:	4553      	cmp	r3, sl
 8003282:	dc01      	bgt.n	8003288 <_printf_float+0x2b0>
 8003284:	464b      	mov	r3, r9
 8003286:	e793      	b.n	80031b0 <_printf_float+0x1d8>
 8003288:	2301      	movs	r3, #1
 800328a:	465a      	mov	r2, fp
 800328c:	4631      	mov	r1, r6
 800328e:	4628      	mov	r0, r5
 8003290:	47b8      	blx	r7
 8003292:	3001      	adds	r0, #1
 8003294:	f43f aefb 	beq.w	800308e <_printf_float+0xb6>
 8003298:	f10a 0a01 	add.w	sl, sl, #1
 800329c:	e7ee      	b.n	800327c <_printf_float+0x2a4>
 800329e:	bf00      	nop
 80032a0:	7fefffff 	.word	0x7fefffff
 80032a4:	080066d4 	.word	0x080066d4
 80032a8:	080066d8 	.word	0x080066d8
 80032ac:	080066dc 	.word	0x080066dc
 80032b0:	080066e0 	.word	0x080066e0
 80032b4:	080066e4 	.word	0x080066e4
 80032b8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80032ba:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80032be:	4553      	cmp	r3, sl
 80032c0:	bfa8      	it	ge
 80032c2:	4653      	movge	r3, sl
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	4699      	mov	r9, r3
 80032c8:	dc36      	bgt.n	8003338 <_printf_float+0x360>
 80032ca:	f04f 0b00 	mov.w	fp, #0
 80032ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80032d2:	f104 021a 	add.w	r2, r4, #26
 80032d6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80032d8:	9306      	str	r3, [sp, #24]
 80032da:	eba3 0309 	sub.w	r3, r3, r9
 80032de:	455b      	cmp	r3, fp
 80032e0:	dc31      	bgt.n	8003346 <_printf_float+0x36e>
 80032e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80032e4:	459a      	cmp	sl, r3
 80032e6:	dc3a      	bgt.n	800335e <_printf_float+0x386>
 80032e8:	6823      	ldr	r3, [r4, #0]
 80032ea:	07da      	lsls	r2, r3, #31
 80032ec:	d437      	bmi.n	800335e <_printf_float+0x386>
 80032ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80032f0:	ebaa 0903 	sub.w	r9, sl, r3
 80032f4:	9b06      	ldr	r3, [sp, #24]
 80032f6:	ebaa 0303 	sub.w	r3, sl, r3
 80032fa:	4599      	cmp	r9, r3
 80032fc:	bfa8      	it	ge
 80032fe:	4699      	movge	r9, r3
 8003300:	f1b9 0f00 	cmp.w	r9, #0
 8003304:	dc33      	bgt.n	800336e <_printf_float+0x396>
 8003306:	f04f 0800 	mov.w	r8, #0
 800330a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800330e:	f104 0b1a 	add.w	fp, r4, #26
 8003312:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003314:	ebaa 0303 	sub.w	r3, sl, r3
 8003318:	eba3 0309 	sub.w	r3, r3, r9
 800331c:	4543      	cmp	r3, r8
 800331e:	f77f af79 	ble.w	8003214 <_printf_float+0x23c>
 8003322:	2301      	movs	r3, #1
 8003324:	465a      	mov	r2, fp
 8003326:	4631      	mov	r1, r6
 8003328:	4628      	mov	r0, r5
 800332a:	47b8      	blx	r7
 800332c:	3001      	adds	r0, #1
 800332e:	f43f aeae 	beq.w	800308e <_printf_float+0xb6>
 8003332:	f108 0801 	add.w	r8, r8, #1
 8003336:	e7ec      	b.n	8003312 <_printf_float+0x33a>
 8003338:	4642      	mov	r2, r8
 800333a:	4631      	mov	r1, r6
 800333c:	4628      	mov	r0, r5
 800333e:	47b8      	blx	r7
 8003340:	3001      	adds	r0, #1
 8003342:	d1c2      	bne.n	80032ca <_printf_float+0x2f2>
 8003344:	e6a3      	b.n	800308e <_printf_float+0xb6>
 8003346:	2301      	movs	r3, #1
 8003348:	4631      	mov	r1, r6
 800334a:	4628      	mov	r0, r5
 800334c:	9206      	str	r2, [sp, #24]
 800334e:	47b8      	blx	r7
 8003350:	3001      	adds	r0, #1
 8003352:	f43f ae9c 	beq.w	800308e <_printf_float+0xb6>
 8003356:	9a06      	ldr	r2, [sp, #24]
 8003358:	f10b 0b01 	add.w	fp, fp, #1
 800335c:	e7bb      	b.n	80032d6 <_printf_float+0x2fe>
 800335e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003362:	4631      	mov	r1, r6
 8003364:	4628      	mov	r0, r5
 8003366:	47b8      	blx	r7
 8003368:	3001      	adds	r0, #1
 800336a:	d1c0      	bne.n	80032ee <_printf_float+0x316>
 800336c:	e68f      	b.n	800308e <_printf_float+0xb6>
 800336e:	9a06      	ldr	r2, [sp, #24]
 8003370:	464b      	mov	r3, r9
 8003372:	4442      	add	r2, r8
 8003374:	4631      	mov	r1, r6
 8003376:	4628      	mov	r0, r5
 8003378:	47b8      	blx	r7
 800337a:	3001      	adds	r0, #1
 800337c:	d1c3      	bne.n	8003306 <_printf_float+0x32e>
 800337e:	e686      	b.n	800308e <_printf_float+0xb6>
 8003380:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003384:	f1ba 0f01 	cmp.w	sl, #1
 8003388:	dc01      	bgt.n	800338e <_printf_float+0x3b6>
 800338a:	07db      	lsls	r3, r3, #31
 800338c:	d536      	bpl.n	80033fc <_printf_float+0x424>
 800338e:	2301      	movs	r3, #1
 8003390:	4642      	mov	r2, r8
 8003392:	4631      	mov	r1, r6
 8003394:	4628      	mov	r0, r5
 8003396:	47b8      	blx	r7
 8003398:	3001      	adds	r0, #1
 800339a:	f43f ae78 	beq.w	800308e <_printf_float+0xb6>
 800339e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80033a2:	4631      	mov	r1, r6
 80033a4:	4628      	mov	r0, r5
 80033a6:	47b8      	blx	r7
 80033a8:	3001      	adds	r0, #1
 80033aa:	f43f ae70 	beq.w	800308e <_printf_float+0xb6>
 80033ae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80033b2:	2200      	movs	r2, #0
 80033b4:	2300      	movs	r3, #0
 80033b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80033ba:	f7fd fb8d 	bl	8000ad8 <__aeabi_dcmpeq>
 80033be:	b9c0      	cbnz	r0, 80033f2 <_printf_float+0x41a>
 80033c0:	4653      	mov	r3, sl
 80033c2:	f108 0201 	add.w	r2, r8, #1
 80033c6:	4631      	mov	r1, r6
 80033c8:	4628      	mov	r0, r5
 80033ca:	47b8      	blx	r7
 80033cc:	3001      	adds	r0, #1
 80033ce:	d10c      	bne.n	80033ea <_printf_float+0x412>
 80033d0:	e65d      	b.n	800308e <_printf_float+0xb6>
 80033d2:	2301      	movs	r3, #1
 80033d4:	465a      	mov	r2, fp
 80033d6:	4631      	mov	r1, r6
 80033d8:	4628      	mov	r0, r5
 80033da:	47b8      	blx	r7
 80033dc:	3001      	adds	r0, #1
 80033de:	f43f ae56 	beq.w	800308e <_printf_float+0xb6>
 80033e2:	f108 0801 	add.w	r8, r8, #1
 80033e6:	45d0      	cmp	r8, sl
 80033e8:	dbf3      	blt.n	80033d2 <_printf_float+0x3fa>
 80033ea:	464b      	mov	r3, r9
 80033ec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80033f0:	e6df      	b.n	80031b2 <_printf_float+0x1da>
 80033f2:	f04f 0800 	mov.w	r8, #0
 80033f6:	f104 0b1a 	add.w	fp, r4, #26
 80033fa:	e7f4      	b.n	80033e6 <_printf_float+0x40e>
 80033fc:	2301      	movs	r3, #1
 80033fe:	4642      	mov	r2, r8
 8003400:	e7e1      	b.n	80033c6 <_printf_float+0x3ee>
 8003402:	2301      	movs	r3, #1
 8003404:	464a      	mov	r2, r9
 8003406:	4631      	mov	r1, r6
 8003408:	4628      	mov	r0, r5
 800340a:	47b8      	blx	r7
 800340c:	3001      	adds	r0, #1
 800340e:	f43f ae3e 	beq.w	800308e <_printf_float+0xb6>
 8003412:	f108 0801 	add.w	r8, r8, #1
 8003416:	68e3      	ldr	r3, [r4, #12]
 8003418:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800341a:	1a5b      	subs	r3, r3, r1
 800341c:	4543      	cmp	r3, r8
 800341e:	dcf0      	bgt.n	8003402 <_printf_float+0x42a>
 8003420:	e6fc      	b.n	800321c <_printf_float+0x244>
 8003422:	f04f 0800 	mov.w	r8, #0
 8003426:	f104 0919 	add.w	r9, r4, #25
 800342a:	e7f4      	b.n	8003416 <_printf_float+0x43e>

0800342c <_printf_common>:
 800342c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003430:	4616      	mov	r6, r2
 8003432:	4698      	mov	r8, r3
 8003434:	688a      	ldr	r2, [r1, #8]
 8003436:	690b      	ldr	r3, [r1, #16]
 8003438:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800343c:	4293      	cmp	r3, r2
 800343e:	bfb8      	it	lt
 8003440:	4613      	movlt	r3, r2
 8003442:	6033      	str	r3, [r6, #0]
 8003444:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003448:	4607      	mov	r7, r0
 800344a:	460c      	mov	r4, r1
 800344c:	b10a      	cbz	r2, 8003452 <_printf_common+0x26>
 800344e:	3301      	adds	r3, #1
 8003450:	6033      	str	r3, [r6, #0]
 8003452:	6823      	ldr	r3, [r4, #0]
 8003454:	0699      	lsls	r1, r3, #26
 8003456:	bf42      	ittt	mi
 8003458:	6833      	ldrmi	r3, [r6, #0]
 800345a:	3302      	addmi	r3, #2
 800345c:	6033      	strmi	r3, [r6, #0]
 800345e:	6825      	ldr	r5, [r4, #0]
 8003460:	f015 0506 	ands.w	r5, r5, #6
 8003464:	d106      	bne.n	8003474 <_printf_common+0x48>
 8003466:	f104 0a19 	add.w	sl, r4, #25
 800346a:	68e3      	ldr	r3, [r4, #12]
 800346c:	6832      	ldr	r2, [r6, #0]
 800346e:	1a9b      	subs	r3, r3, r2
 8003470:	42ab      	cmp	r3, r5
 8003472:	dc26      	bgt.n	80034c2 <_printf_common+0x96>
 8003474:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003478:	6822      	ldr	r2, [r4, #0]
 800347a:	3b00      	subs	r3, #0
 800347c:	bf18      	it	ne
 800347e:	2301      	movne	r3, #1
 8003480:	0692      	lsls	r2, r2, #26
 8003482:	d42b      	bmi.n	80034dc <_printf_common+0xb0>
 8003484:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003488:	4641      	mov	r1, r8
 800348a:	4638      	mov	r0, r7
 800348c:	47c8      	blx	r9
 800348e:	3001      	adds	r0, #1
 8003490:	d01e      	beq.n	80034d0 <_printf_common+0xa4>
 8003492:	6823      	ldr	r3, [r4, #0]
 8003494:	6922      	ldr	r2, [r4, #16]
 8003496:	f003 0306 	and.w	r3, r3, #6
 800349a:	2b04      	cmp	r3, #4
 800349c:	bf02      	ittt	eq
 800349e:	68e5      	ldreq	r5, [r4, #12]
 80034a0:	6833      	ldreq	r3, [r6, #0]
 80034a2:	1aed      	subeq	r5, r5, r3
 80034a4:	68a3      	ldr	r3, [r4, #8]
 80034a6:	bf0c      	ite	eq
 80034a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034ac:	2500      	movne	r5, #0
 80034ae:	4293      	cmp	r3, r2
 80034b0:	bfc4      	itt	gt
 80034b2:	1a9b      	subgt	r3, r3, r2
 80034b4:	18ed      	addgt	r5, r5, r3
 80034b6:	2600      	movs	r6, #0
 80034b8:	341a      	adds	r4, #26
 80034ba:	42b5      	cmp	r5, r6
 80034bc:	d11a      	bne.n	80034f4 <_printf_common+0xc8>
 80034be:	2000      	movs	r0, #0
 80034c0:	e008      	b.n	80034d4 <_printf_common+0xa8>
 80034c2:	2301      	movs	r3, #1
 80034c4:	4652      	mov	r2, sl
 80034c6:	4641      	mov	r1, r8
 80034c8:	4638      	mov	r0, r7
 80034ca:	47c8      	blx	r9
 80034cc:	3001      	adds	r0, #1
 80034ce:	d103      	bne.n	80034d8 <_printf_common+0xac>
 80034d0:	f04f 30ff 	mov.w	r0, #4294967295
 80034d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034d8:	3501      	adds	r5, #1
 80034da:	e7c6      	b.n	800346a <_printf_common+0x3e>
 80034dc:	18e1      	adds	r1, r4, r3
 80034de:	1c5a      	adds	r2, r3, #1
 80034e0:	2030      	movs	r0, #48	@ 0x30
 80034e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80034e6:	4422      	add	r2, r4
 80034e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80034ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80034f0:	3302      	adds	r3, #2
 80034f2:	e7c7      	b.n	8003484 <_printf_common+0x58>
 80034f4:	2301      	movs	r3, #1
 80034f6:	4622      	mov	r2, r4
 80034f8:	4641      	mov	r1, r8
 80034fa:	4638      	mov	r0, r7
 80034fc:	47c8      	blx	r9
 80034fe:	3001      	adds	r0, #1
 8003500:	d0e6      	beq.n	80034d0 <_printf_common+0xa4>
 8003502:	3601      	adds	r6, #1
 8003504:	e7d9      	b.n	80034ba <_printf_common+0x8e>
	...

08003508 <_printf_i>:
 8003508:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800350c:	7e0f      	ldrb	r7, [r1, #24]
 800350e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003510:	2f78      	cmp	r7, #120	@ 0x78
 8003512:	4691      	mov	r9, r2
 8003514:	4680      	mov	r8, r0
 8003516:	460c      	mov	r4, r1
 8003518:	469a      	mov	sl, r3
 800351a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800351e:	d807      	bhi.n	8003530 <_printf_i+0x28>
 8003520:	2f62      	cmp	r7, #98	@ 0x62
 8003522:	d80a      	bhi.n	800353a <_printf_i+0x32>
 8003524:	2f00      	cmp	r7, #0
 8003526:	f000 80d2 	beq.w	80036ce <_printf_i+0x1c6>
 800352a:	2f58      	cmp	r7, #88	@ 0x58
 800352c:	f000 80b9 	beq.w	80036a2 <_printf_i+0x19a>
 8003530:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003534:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003538:	e03a      	b.n	80035b0 <_printf_i+0xa8>
 800353a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800353e:	2b15      	cmp	r3, #21
 8003540:	d8f6      	bhi.n	8003530 <_printf_i+0x28>
 8003542:	a101      	add	r1, pc, #4	@ (adr r1, 8003548 <_printf_i+0x40>)
 8003544:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003548:	080035a1 	.word	0x080035a1
 800354c:	080035b5 	.word	0x080035b5
 8003550:	08003531 	.word	0x08003531
 8003554:	08003531 	.word	0x08003531
 8003558:	08003531 	.word	0x08003531
 800355c:	08003531 	.word	0x08003531
 8003560:	080035b5 	.word	0x080035b5
 8003564:	08003531 	.word	0x08003531
 8003568:	08003531 	.word	0x08003531
 800356c:	08003531 	.word	0x08003531
 8003570:	08003531 	.word	0x08003531
 8003574:	080036b5 	.word	0x080036b5
 8003578:	080035df 	.word	0x080035df
 800357c:	0800366f 	.word	0x0800366f
 8003580:	08003531 	.word	0x08003531
 8003584:	08003531 	.word	0x08003531
 8003588:	080036d7 	.word	0x080036d7
 800358c:	08003531 	.word	0x08003531
 8003590:	080035df 	.word	0x080035df
 8003594:	08003531 	.word	0x08003531
 8003598:	08003531 	.word	0x08003531
 800359c:	08003677 	.word	0x08003677
 80035a0:	6833      	ldr	r3, [r6, #0]
 80035a2:	1d1a      	adds	r2, r3, #4
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6032      	str	r2, [r6, #0]
 80035a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80035ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80035b0:	2301      	movs	r3, #1
 80035b2:	e09d      	b.n	80036f0 <_printf_i+0x1e8>
 80035b4:	6833      	ldr	r3, [r6, #0]
 80035b6:	6820      	ldr	r0, [r4, #0]
 80035b8:	1d19      	adds	r1, r3, #4
 80035ba:	6031      	str	r1, [r6, #0]
 80035bc:	0606      	lsls	r6, r0, #24
 80035be:	d501      	bpl.n	80035c4 <_printf_i+0xbc>
 80035c0:	681d      	ldr	r5, [r3, #0]
 80035c2:	e003      	b.n	80035cc <_printf_i+0xc4>
 80035c4:	0645      	lsls	r5, r0, #25
 80035c6:	d5fb      	bpl.n	80035c0 <_printf_i+0xb8>
 80035c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80035cc:	2d00      	cmp	r5, #0
 80035ce:	da03      	bge.n	80035d8 <_printf_i+0xd0>
 80035d0:	232d      	movs	r3, #45	@ 0x2d
 80035d2:	426d      	negs	r5, r5
 80035d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80035d8:	4859      	ldr	r0, [pc, #356]	@ (8003740 <_printf_i+0x238>)
 80035da:	230a      	movs	r3, #10
 80035dc:	e011      	b.n	8003602 <_printf_i+0xfa>
 80035de:	6821      	ldr	r1, [r4, #0]
 80035e0:	6833      	ldr	r3, [r6, #0]
 80035e2:	0608      	lsls	r0, r1, #24
 80035e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80035e8:	d402      	bmi.n	80035f0 <_printf_i+0xe8>
 80035ea:	0649      	lsls	r1, r1, #25
 80035ec:	bf48      	it	mi
 80035ee:	b2ad      	uxthmi	r5, r5
 80035f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80035f2:	4853      	ldr	r0, [pc, #332]	@ (8003740 <_printf_i+0x238>)
 80035f4:	6033      	str	r3, [r6, #0]
 80035f6:	bf14      	ite	ne
 80035f8:	230a      	movne	r3, #10
 80035fa:	2308      	moveq	r3, #8
 80035fc:	2100      	movs	r1, #0
 80035fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003602:	6866      	ldr	r6, [r4, #4]
 8003604:	60a6      	str	r6, [r4, #8]
 8003606:	2e00      	cmp	r6, #0
 8003608:	bfa2      	ittt	ge
 800360a:	6821      	ldrge	r1, [r4, #0]
 800360c:	f021 0104 	bicge.w	r1, r1, #4
 8003610:	6021      	strge	r1, [r4, #0]
 8003612:	b90d      	cbnz	r5, 8003618 <_printf_i+0x110>
 8003614:	2e00      	cmp	r6, #0
 8003616:	d04b      	beq.n	80036b0 <_printf_i+0x1a8>
 8003618:	4616      	mov	r6, r2
 800361a:	fbb5 f1f3 	udiv	r1, r5, r3
 800361e:	fb03 5711 	mls	r7, r3, r1, r5
 8003622:	5dc7      	ldrb	r7, [r0, r7]
 8003624:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003628:	462f      	mov	r7, r5
 800362a:	42bb      	cmp	r3, r7
 800362c:	460d      	mov	r5, r1
 800362e:	d9f4      	bls.n	800361a <_printf_i+0x112>
 8003630:	2b08      	cmp	r3, #8
 8003632:	d10b      	bne.n	800364c <_printf_i+0x144>
 8003634:	6823      	ldr	r3, [r4, #0]
 8003636:	07df      	lsls	r7, r3, #31
 8003638:	d508      	bpl.n	800364c <_printf_i+0x144>
 800363a:	6923      	ldr	r3, [r4, #16]
 800363c:	6861      	ldr	r1, [r4, #4]
 800363e:	4299      	cmp	r1, r3
 8003640:	bfde      	ittt	le
 8003642:	2330      	movle	r3, #48	@ 0x30
 8003644:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003648:	f106 36ff 	addle.w	r6, r6, #4294967295
 800364c:	1b92      	subs	r2, r2, r6
 800364e:	6122      	str	r2, [r4, #16]
 8003650:	f8cd a000 	str.w	sl, [sp]
 8003654:	464b      	mov	r3, r9
 8003656:	aa03      	add	r2, sp, #12
 8003658:	4621      	mov	r1, r4
 800365a:	4640      	mov	r0, r8
 800365c:	f7ff fee6 	bl	800342c <_printf_common>
 8003660:	3001      	adds	r0, #1
 8003662:	d14a      	bne.n	80036fa <_printf_i+0x1f2>
 8003664:	f04f 30ff 	mov.w	r0, #4294967295
 8003668:	b004      	add	sp, #16
 800366a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800366e:	6823      	ldr	r3, [r4, #0]
 8003670:	f043 0320 	orr.w	r3, r3, #32
 8003674:	6023      	str	r3, [r4, #0]
 8003676:	4833      	ldr	r0, [pc, #204]	@ (8003744 <_printf_i+0x23c>)
 8003678:	2778      	movs	r7, #120	@ 0x78
 800367a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800367e:	6823      	ldr	r3, [r4, #0]
 8003680:	6831      	ldr	r1, [r6, #0]
 8003682:	061f      	lsls	r7, r3, #24
 8003684:	f851 5b04 	ldr.w	r5, [r1], #4
 8003688:	d402      	bmi.n	8003690 <_printf_i+0x188>
 800368a:	065f      	lsls	r7, r3, #25
 800368c:	bf48      	it	mi
 800368e:	b2ad      	uxthmi	r5, r5
 8003690:	6031      	str	r1, [r6, #0]
 8003692:	07d9      	lsls	r1, r3, #31
 8003694:	bf44      	itt	mi
 8003696:	f043 0320 	orrmi.w	r3, r3, #32
 800369a:	6023      	strmi	r3, [r4, #0]
 800369c:	b11d      	cbz	r5, 80036a6 <_printf_i+0x19e>
 800369e:	2310      	movs	r3, #16
 80036a0:	e7ac      	b.n	80035fc <_printf_i+0xf4>
 80036a2:	4827      	ldr	r0, [pc, #156]	@ (8003740 <_printf_i+0x238>)
 80036a4:	e7e9      	b.n	800367a <_printf_i+0x172>
 80036a6:	6823      	ldr	r3, [r4, #0]
 80036a8:	f023 0320 	bic.w	r3, r3, #32
 80036ac:	6023      	str	r3, [r4, #0]
 80036ae:	e7f6      	b.n	800369e <_printf_i+0x196>
 80036b0:	4616      	mov	r6, r2
 80036b2:	e7bd      	b.n	8003630 <_printf_i+0x128>
 80036b4:	6833      	ldr	r3, [r6, #0]
 80036b6:	6825      	ldr	r5, [r4, #0]
 80036b8:	6961      	ldr	r1, [r4, #20]
 80036ba:	1d18      	adds	r0, r3, #4
 80036bc:	6030      	str	r0, [r6, #0]
 80036be:	062e      	lsls	r6, r5, #24
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	d501      	bpl.n	80036c8 <_printf_i+0x1c0>
 80036c4:	6019      	str	r1, [r3, #0]
 80036c6:	e002      	b.n	80036ce <_printf_i+0x1c6>
 80036c8:	0668      	lsls	r0, r5, #25
 80036ca:	d5fb      	bpl.n	80036c4 <_printf_i+0x1bc>
 80036cc:	8019      	strh	r1, [r3, #0]
 80036ce:	2300      	movs	r3, #0
 80036d0:	6123      	str	r3, [r4, #16]
 80036d2:	4616      	mov	r6, r2
 80036d4:	e7bc      	b.n	8003650 <_printf_i+0x148>
 80036d6:	6833      	ldr	r3, [r6, #0]
 80036d8:	1d1a      	adds	r2, r3, #4
 80036da:	6032      	str	r2, [r6, #0]
 80036dc:	681e      	ldr	r6, [r3, #0]
 80036de:	6862      	ldr	r2, [r4, #4]
 80036e0:	2100      	movs	r1, #0
 80036e2:	4630      	mov	r0, r6
 80036e4:	f7fc fd7c 	bl	80001e0 <memchr>
 80036e8:	b108      	cbz	r0, 80036ee <_printf_i+0x1e6>
 80036ea:	1b80      	subs	r0, r0, r6
 80036ec:	6060      	str	r0, [r4, #4]
 80036ee:	6863      	ldr	r3, [r4, #4]
 80036f0:	6123      	str	r3, [r4, #16]
 80036f2:	2300      	movs	r3, #0
 80036f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80036f8:	e7aa      	b.n	8003650 <_printf_i+0x148>
 80036fa:	6923      	ldr	r3, [r4, #16]
 80036fc:	4632      	mov	r2, r6
 80036fe:	4649      	mov	r1, r9
 8003700:	4640      	mov	r0, r8
 8003702:	47d0      	blx	sl
 8003704:	3001      	adds	r0, #1
 8003706:	d0ad      	beq.n	8003664 <_printf_i+0x15c>
 8003708:	6823      	ldr	r3, [r4, #0]
 800370a:	079b      	lsls	r3, r3, #30
 800370c:	d413      	bmi.n	8003736 <_printf_i+0x22e>
 800370e:	68e0      	ldr	r0, [r4, #12]
 8003710:	9b03      	ldr	r3, [sp, #12]
 8003712:	4298      	cmp	r0, r3
 8003714:	bfb8      	it	lt
 8003716:	4618      	movlt	r0, r3
 8003718:	e7a6      	b.n	8003668 <_printf_i+0x160>
 800371a:	2301      	movs	r3, #1
 800371c:	4632      	mov	r2, r6
 800371e:	4649      	mov	r1, r9
 8003720:	4640      	mov	r0, r8
 8003722:	47d0      	blx	sl
 8003724:	3001      	adds	r0, #1
 8003726:	d09d      	beq.n	8003664 <_printf_i+0x15c>
 8003728:	3501      	adds	r5, #1
 800372a:	68e3      	ldr	r3, [r4, #12]
 800372c:	9903      	ldr	r1, [sp, #12]
 800372e:	1a5b      	subs	r3, r3, r1
 8003730:	42ab      	cmp	r3, r5
 8003732:	dcf2      	bgt.n	800371a <_printf_i+0x212>
 8003734:	e7eb      	b.n	800370e <_printf_i+0x206>
 8003736:	2500      	movs	r5, #0
 8003738:	f104 0619 	add.w	r6, r4, #25
 800373c:	e7f5      	b.n	800372a <_printf_i+0x222>
 800373e:	bf00      	nop
 8003740:	080066e6 	.word	0x080066e6
 8003744:	080066f7 	.word	0x080066f7

08003748 <std>:
 8003748:	2300      	movs	r3, #0
 800374a:	b510      	push	{r4, lr}
 800374c:	4604      	mov	r4, r0
 800374e:	e9c0 3300 	strd	r3, r3, [r0]
 8003752:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003756:	6083      	str	r3, [r0, #8]
 8003758:	8181      	strh	r1, [r0, #12]
 800375a:	6643      	str	r3, [r0, #100]	@ 0x64
 800375c:	81c2      	strh	r2, [r0, #14]
 800375e:	6183      	str	r3, [r0, #24]
 8003760:	4619      	mov	r1, r3
 8003762:	2208      	movs	r2, #8
 8003764:	305c      	adds	r0, #92	@ 0x5c
 8003766:	f000 f928 	bl	80039ba <memset>
 800376a:	4b0d      	ldr	r3, [pc, #52]	@ (80037a0 <std+0x58>)
 800376c:	6263      	str	r3, [r4, #36]	@ 0x24
 800376e:	4b0d      	ldr	r3, [pc, #52]	@ (80037a4 <std+0x5c>)
 8003770:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003772:	4b0d      	ldr	r3, [pc, #52]	@ (80037a8 <std+0x60>)
 8003774:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003776:	4b0d      	ldr	r3, [pc, #52]	@ (80037ac <std+0x64>)
 8003778:	6323      	str	r3, [r4, #48]	@ 0x30
 800377a:	4b0d      	ldr	r3, [pc, #52]	@ (80037b0 <std+0x68>)
 800377c:	6224      	str	r4, [r4, #32]
 800377e:	429c      	cmp	r4, r3
 8003780:	d006      	beq.n	8003790 <std+0x48>
 8003782:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003786:	4294      	cmp	r4, r2
 8003788:	d002      	beq.n	8003790 <std+0x48>
 800378a:	33d0      	adds	r3, #208	@ 0xd0
 800378c:	429c      	cmp	r4, r3
 800378e:	d105      	bne.n	800379c <std+0x54>
 8003790:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003798:	f000 b98c 	b.w	8003ab4 <__retarget_lock_init_recursive>
 800379c:	bd10      	pop	{r4, pc}
 800379e:	bf00      	nop
 80037a0:	08003935 	.word	0x08003935
 80037a4:	08003957 	.word	0x08003957
 80037a8:	0800398f 	.word	0x0800398f
 80037ac:	080039b3 	.word	0x080039b3
 80037b0:	20000210 	.word	0x20000210

080037b4 <stdio_exit_handler>:
 80037b4:	4a02      	ldr	r2, [pc, #8]	@ (80037c0 <stdio_exit_handler+0xc>)
 80037b6:	4903      	ldr	r1, [pc, #12]	@ (80037c4 <stdio_exit_handler+0x10>)
 80037b8:	4803      	ldr	r0, [pc, #12]	@ (80037c8 <stdio_exit_handler+0x14>)
 80037ba:	f000 b869 	b.w	8003890 <_fwalk_sglue>
 80037be:	bf00      	nop
 80037c0:	20000018 	.word	0x20000018
 80037c4:	08005415 	.word	0x08005415
 80037c8:	20000028 	.word	0x20000028

080037cc <cleanup_stdio>:
 80037cc:	6841      	ldr	r1, [r0, #4]
 80037ce:	4b0c      	ldr	r3, [pc, #48]	@ (8003800 <cleanup_stdio+0x34>)
 80037d0:	4299      	cmp	r1, r3
 80037d2:	b510      	push	{r4, lr}
 80037d4:	4604      	mov	r4, r0
 80037d6:	d001      	beq.n	80037dc <cleanup_stdio+0x10>
 80037d8:	f001 fe1c 	bl	8005414 <_fflush_r>
 80037dc:	68a1      	ldr	r1, [r4, #8]
 80037de:	4b09      	ldr	r3, [pc, #36]	@ (8003804 <cleanup_stdio+0x38>)
 80037e0:	4299      	cmp	r1, r3
 80037e2:	d002      	beq.n	80037ea <cleanup_stdio+0x1e>
 80037e4:	4620      	mov	r0, r4
 80037e6:	f001 fe15 	bl	8005414 <_fflush_r>
 80037ea:	68e1      	ldr	r1, [r4, #12]
 80037ec:	4b06      	ldr	r3, [pc, #24]	@ (8003808 <cleanup_stdio+0x3c>)
 80037ee:	4299      	cmp	r1, r3
 80037f0:	d004      	beq.n	80037fc <cleanup_stdio+0x30>
 80037f2:	4620      	mov	r0, r4
 80037f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037f8:	f001 be0c 	b.w	8005414 <_fflush_r>
 80037fc:	bd10      	pop	{r4, pc}
 80037fe:	bf00      	nop
 8003800:	20000210 	.word	0x20000210
 8003804:	20000278 	.word	0x20000278
 8003808:	200002e0 	.word	0x200002e0

0800380c <global_stdio_init.part.0>:
 800380c:	b510      	push	{r4, lr}
 800380e:	4b0b      	ldr	r3, [pc, #44]	@ (800383c <global_stdio_init.part.0+0x30>)
 8003810:	4c0b      	ldr	r4, [pc, #44]	@ (8003840 <global_stdio_init.part.0+0x34>)
 8003812:	4a0c      	ldr	r2, [pc, #48]	@ (8003844 <global_stdio_init.part.0+0x38>)
 8003814:	601a      	str	r2, [r3, #0]
 8003816:	4620      	mov	r0, r4
 8003818:	2200      	movs	r2, #0
 800381a:	2104      	movs	r1, #4
 800381c:	f7ff ff94 	bl	8003748 <std>
 8003820:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003824:	2201      	movs	r2, #1
 8003826:	2109      	movs	r1, #9
 8003828:	f7ff ff8e 	bl	8003748 <std>
 800382c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003830:	2202      	movs	r2, #2
 8003832:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003836:	2112      	movs	r1, #18
 8003838:	f7ff bf86 	b.w	8003748 <std>
 800383c:	20000348 	.word	0x20000348
 8003840:	20000210 	.word	0x20000210
 8003844:	080037b5 	.word	0x080037b5

08003848 <__sfp_lock_acquire>:
 8003848:	4801      	ldr	r0, [pc, #4]	@ (8003850 <__sfp_lock_acquire+0x8>)
 800384a:	f000 b934 	b.w	8003ab6 <__retarget_lock_acquire_recursive>
 800384e:	bf00      	nop
 8003850:	20000351 	.word	0x20000351

08003854 <__sfp_lock_release>:
 8003854:	4801      	ldr	r0, [pc, #4]	@ (800385c <__sfp_lock_release+0x8>)
 8003856:	f000 b92f 	b.w	8003ab8 <__retarget_lock_release_recursive>
 800385a:	bf00      	nop
 800385c:	20000351 	.word	0x20000351

08003860 <__sinit>:
 8003860:	b510      	push	{r4, lr}
 8003862:	4604      	mov	r4, r0
 8003864:	f7ff fff0 	bl	8003848 <__sfp_lock_acquire>
 8003868:	6a23      	ldr	r3, [r4, #32]
 800386a:	b11b      	cbz	r3, 8003874 <__sinit+0x14>
 800386c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003870:	f7ff bff0 	b.w	8003854 <__sfp_lock_release>
 8003874:	4b04      	ldr	r3, [pc, #16]	@ (8003888 <__sinit+0x28>)
 8003876:	6223      	str	r3, [r4, #32]
 8003878:	4b04      	ldr	r3, [pc, #16]	@ (800388c <__sinit+0x2c>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1f5      	bne.n	800386c <__sinit+0xc>
 8003880:	f7ff ffc4 	bl	800380c <global_stdio_init.part.0>
 8003884:	e7f2      	b.n	800386c <__sinit+0xc>
 8003886:	bf00      	nop
 8003888:	080037cd 	.word	0x080037cd
 800388c:	20000348 	.word	0x20000348

08003890 <_fwalk_sglue>:
 8003890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003894:	4607      	mov	r7, r0
 8003896:	4688      	mov	r8, r1
 8003898:	4614      	mov	r4, r2
 800389a:	2600      	movs	r6, #0
 800389c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80038a0:	f1b9 0901 	subs.w	r9, r9, #1
 80038a4:	d505      	bpl.n	80038b2 <_fwalk_sglue+0x22>
 80038a6:	6824      	ldr	r4, [r4, #0]
 80038a8:	2c00      	cmp	r4, #0
 80038aa:	d1f7      	bne.n	800389c <_fwalk_sglue+0xc>
 80038ac:	4630      	mov	r0, r6
 80038ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038b2:	89ab      	ldrh	r3, [r5, #12]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d907      	bls.n	80038c8 <_fwalk_sglue+0x38>
 80038b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80038bc:	3301      	adds	r3, #1
 80038be:	d003      	beq.n	80038c8 <_fwalk_sglue+0x38>
 80038c0:	4629      	mov	r1, r5
 80038c2:	4638      	mov	r0, r7
 80038c4:	47c0      	blx	r8
 80038c6:	4306      	orrs	r6, r0
 80038c8:	3568      	adds	r5, #104	@ 0x68
 80038ca:	e7e9      	b.n	80038a0 <_fwalk_sglue+0x10>

080038cc <sniprintf>:
 80038cc:	b40c      	push	{r2, r3}
 80038ce:	b530      	push	{r4, r5, lr}
 80038d0:	4b17      	ldr	r3, [pc, #92]	@ (8003930 <sniprintf+0x64>)
 80038d2:	1e0c      	subs	r4, r1, #0
 80038d4:	681d      	ldr	r5, [r3, #0]
 80038d6:	b09d      	sub	sp, #116	@ 0x74
 80038d8:	da08      	bge.n	80038ec <sniprintf+0x20>
 80038da:	238b      	movs	r3, #139	@ 0x8b
 80038dc:	602b      	str	r3, [r5, #0]
 80038de:	f04f 30ff 	mov.w	r0, #4294967295
 80038e2:	b01d      	add	sp, #116	@ 0x74
 80038e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80038e8:	b002      	add	sp, #8
 80038ea:	4770      	bx	lr
 80038ec:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80038f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80038f4:	bf14      	ite	ne
 80038f6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80038fa:	4623      	moveq	r3, r4
 80038fc:	9304      	str	r3, [sp, #16]
 80038fe:	9307      	str	r3, [sp, #28]
 8003900:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003904:	9002      	str	r0, [sp, #8]
 8003906:	9006      	str	r0, [sp, #24]
 8003908:	f8ad 3016 	strh.w	r3, [sp, #22]
 800390c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800390e:	ab21      	add	r3, sp, #132	@ 0x84
 8003910:	a902      	add	r1, sp, #8
 8003912:	4628      	mov	r0, r5
 8003914:	9301      	str	r3, [sp, #4]
 8003916:	f001 fbfd 	bl	8005114 <_svfiprintf_r>
 800391a:	1c43      	adds	r3, r0, #1
 800391c:	bfbc      	itt	lt
 800391e:	238b      	movlt	r3, #139	@ 0x8b
 8003920:	602b      	strlt	r3, [r5, #0]
 8003922:	2c00      	cmp	r4, #0
 8003924:	d0dd      	beq.n	80038e2 <sniprintf+0x16>
 8003926:	9b02      	ldr	r3, [sp, #8]
 8003928:	2200      	movs	r2, #0
 800392a:	701a      	strb	r2, [r3, #0]
 800392c:	e7d9      	b.n	80038e2 <sniprintf+0x16>
 800392e:	bf00      	nop
 8003930:	20000024 	.word	0x20000024

08003934 <__sread>:
 8003934:	b510      	push	{r4, lr}
 8003936:	460c      	mov	r4, r1
 8003938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800393c:	f000 f86c 	bl	8003a18 <_read_r>
 8003940:	2800      	cmp	r0, #0
 8003942:	bfab      	itete	ge
 8003944:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003946:	89a3      	ldrhlt	r3, [r4, #12]
 8003948:	181b      	addge	r3, r3, r0
 800394a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800394e:	bfac      	ite	ge
 8003950:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003952:	81a3      	strhlt	r3, [r4, #12]
 8003954:	bd10      	pop	{r4, pc}

08003956 <__swrite>:
 8003956:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800395a:	461f      	mov	r7, r3
 800395c:	898b      	ldrh	r3, [r1, #12]
 800395e:	05db      	lsls	r3, r3, #23
 8003960:	4605      	mov	r5, r0
 8003962:	460c      	mov	r4, r1
 8003964:	4616      	mov	r6, r2
 8003966:	d505      	bpl.n	8003974 <__swrite+0x1e>
 8003968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800396c:	2302      	movs	r3, #2
 800396e:	2200      	movs	r2, #0
 8003970:	f000 f840 	bl	80039f4 <_lseek_r>
 8003974:	89a3      	ldrh	r3, [r4, #12]
 8003976:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800397a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800397e:	81a3      	strh	r3, [r4, #12]
 8003980:	4632      	mov	r2, r6
 8003982:	463b      	mov	r3, r7
 8003984:	4628      	mov	r0, r5
 8003986:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800398a:	f000 b857 	b.w	8003a3c <_write_r>

0800398e <__sseek>:
 800398e:	b510      	push	{r4, lr}
 8003990:	460c      	mov	r4, r1
 8003992:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003996:	f000 f82d 	bl	80039f4 <_lseek_r>
 800399a:	1c43      	adds	r3, r0, #1
 800399c:	89a3      	ldrh	r3, [r4, #12]
 800399e:	bf15      	itete	ne
 80039a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80039a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80039a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80039aa:	81a3      	strheq	r3, [r4, #12]
 80039ac:	bf18      	it	ne
 80039ae:	81a3      	strhne	r3, [r4, #12]
 80039b0:	bd10      	pop	{r4, pc}

080039b2 <__sclose>:
 80039b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039b6:	f000 b80d 	b.w	80039d4 <_close_r>

080039ba <memset>:
 80039ba:	4402      	add	r2, r0
 80039bc:	4603      	mov	r3, r0
 80039be:	4293      	cmp	r3, r2
 80039c0:	d100      	bne.n	80039c4 <memset+0xa>
 80039c2:	4770      	bx	lr
 80039c4:	f803 1b01 	strb.w	r1, [r3], #1
 80039c8:	e7f9      	b.n	80039be <memset+0x4>
	...

080039cc <_localeconv_r>:
 80039cc:	4800      	ldr	r0, [pc, #0]	@ (80039d0 <_localeconv_r+0x4>)
 80039ce:	4770      	bx	lr
 80039d0:	20000164 	.word	0x20000164

080039d4 <_close_r>:
 80039d4:	b538      	push	{r3, r4, r5, lr}
 80039d6:	4d06      	ldr	r5, [pc, #24]	@ (80039f0 <_close_r+0x1c>)
 80039d8:	2300      	movs	r3, #0
 80039da:	4604      	mov	r4, r0
 80039dc:	4608      	mov	r0, r1
 80039de:	602b      	str	r3, [r5, #0]
 80039e0:	f7fe facc 	bl	8001f7c <_close>
 80039e4:	1c43      	adds	r3, r0, #1
 80039e6:	d102      	bne.n	80039ee <_close_r+0x1a>
 80039e8:	682b      	ldr	r3, [r5, #0]
 80039ea:	b103      	cbz	r3, 80039ee <_close_r+0x1a>
 80039ec:	6023      	str	r3, [r4, #0]
 80039ee:	bd38      	pop	{r3, r4, r5, pc}
 80039f0:	2000034c 	.word	0x2000034c

080039f4 <_lseek_r>:
 80039f4:	b538      	push	{r3, r4, r5, lr}
 80039f6:	4d07      	ldr	r5, [pc, #28]	@ (8003a14 <_lseek_r+0x20>)
 80039f8:	4604      	mov	r4, r0
 80039fa:	4608      	mov	r0, r1
 80039fc:	4611      	mov	r1, r2
 80039fe:	2200      	movs	r2, #0
 8003a00:	602a      	str	r2, [r5, #0]
 8003a02:	461a      	mov	r2, r3
 8003a04:	f7fe fae1 	bl	8001fca <_lseek>
 8003a08:	1c43      	adds	r3, r0, #1
 8003a0a:	d102      	bne.n	8003a12 <_lseek_r+0x1e>
 8003a0c:	682b      	ldr	r3, [r5, #0]
 8003a0e:	b103      	cbz	r3, 8003a12 <_lseek_r+0x1e>
 8003a10:	6023      	str	r3, [r4, #0]
 8003a12:	bd38      	pop	{r3, r4, r5, pc}
 8003a14:	2000034c 	.word	0x2000034c

08003a18 <_read_r>:
 8003a18:	b538      	push	{r3, r4, r5, lr}
 8003a1a:	4d07      	ldr	r5, [pc, #28]	@ (8003a38 <_read_r+0x20>)
 8003a1c:	4604      	mov	r4, r0
 8003a1e:	4608      	mov	r0, r1
 8003a20:	4611      	mov	r1, r2
 8003a22:	2200      	movs	r2, #0
 8003a24:	602a      	str	r2, [r5, #0]
 8003a26:	461a      	mov	r2, r3
 8003a28:	f7fe fa6f 	bl	8001f0a <_read>
 8003a2c:	1c43      	adds	r3, r0, #1
 8003a2e:	d102      	bne.n	8003a36 <_read_r+0x1e>
 8003a30:	682b      	ldr	r3, [r5, #0]
 8003a32:	b103      	cbz	r3, 8003a36 <_read_r+0x1e>
 8003a34:	6023      	str	r3, [r4, #0]
 8003a36:	bd38      	pop	{r3, r4, r5, pc}
 8003a38:	2000034c 	.word	0x2000034c

08003a3c <_write_r>:
 8003a3c:	b538      	push	{r3, r4, r5, lr}
 8003a3e:	4d07      	ldr	r5, [pc, #28]	@ (8003a5c <_write_r+0x20>)
 8003a40:	4604      	mov	r4, r0
 8003a42:	4608      	mov	r0, r1
 8003a44:	4611      	mov	r1, r2
 8003a46:	2200      	movs	r2, #0
 8003a48:	602a      	str	r2, [r5, #0]
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	f7fe fa7a 	bl	8001f44 <_write>
 8003a50:	1c43      	adds	r3, r0, #1
 8003a52:	d102      	bne.n	8003a5a <_write_r+0x1e>
 8003a54:	682b      	ldr	r3, [r5, #0]
 8003a56:	b103      	cbz	r3, 8003a5a <_write_r+0x1e>
 8003a58:	6023      	str	r3, [r4, #0]
 8003a5a:	bd38      	pop	{r3, r4, r5, pc}
 8003a5c:	2000034c 	.word	0x2000034c

08003a60 <__errno>:
 8003a60:	4b01      	ldr	r3, [pc, #4]	@ (8003a68 <__errno+0x8>)
 8003a62:	6818      	ldr	r0, [r3, #0]
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	20000024 	.word	0x20000024

08003a6c <__libc_init_array>:
 8003a6c:	b570      	push	{r4, r5, r6, lr}
 8003a6e:	4d0d      	ldr	r5, [pc, #52]	@ (8003aa4 <__libc_init_array+0x38>)
 8003a70:	4c0d      	ldr	r4, [pc, #52]	@ (8003aa8 <__libc_init_array+0x3c>)
 8003a72:	1b64      	subs	r4, r4, r5
 8003a74:	10a4      	asrs	r4, r4, #2
 8003a76:	2600      	movs	r6, #0
 8003a78:	42a6      	cmp	r6, r4
 8003a7a:	d109      	bne.n	8003a90 <__libc_init_array+0x24>
 8003a7c:	4d0b      	ldr	r5, [pc, #44]	@ (8003aac <__libc_init_array+0x40>)
 8003a7e:	4c0c      	ldr	r4, [pc, #48]	@ (8003ab0 <__libc_init_array+0x44>)
 8003a80:	f002 fdae 	bl	80065e0 <_init>
 8003a84:	1b64      	subs	r4, r4, r5
 8003a86:	10a4      	asrs	r4, r4, #2
 8003a88:	2600      	movs	r6, #0
 8003a8a:	42a6      	cmp	r6, r4
 8003a8c:	d105      	bne.n	8003a9a <__libc_init_array+0x2e>
 8003a8e:	bd70      	pop	{r4, r5, r6, pc}
 8003a90:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a94:	4798      	blx	r3
 8003a96:	3601      	adds	r6, #1
 8003a98:	e7ee      	b.n	8003a78 <__libc_init_array+0xc>
 8003a9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a9e:	4798      	blx	r3
 8003aa0:	3601      	adds	r6, #1
 8003aa2:	e7f2      	b.n	8003a8a <__libc_init_array+0x1e>
 8003aa4:	08006a68 	.word	0x08006a68
 8003aa8:	08006a68 	.word	0x08006a68
 8003aac:	08006a68 	.word	0x08006a68
 8003ab0:	08006a6c 	.word	0x08006a6c

08003ab4 <__retarget_lock_init_recursive>:
 8003ab4:	4770      	bx	lr

08003ab6 <__retarget_lock_acquire_recursive>:
 8003ab6:	4770      	bx	lr

08003ab8 <__retarget_lock_release_recursive>:
 8003ab8:	4770      	bx	lr

08003aba <quorem>:
 8003aba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003abe:	6903      	ldr	r3, [r0, #16]
 8003ac0:	690c      	ldr	r4, [r1, #16]
 8003ac2:	42a3      	cmp	r3, r4
 8003ac4:	4607      	mov	r7, r0
 8003ac6:	db7e      	blt.n	8003bc6 <quorem+0x10c>
 8003ac8:	3c01      	subs	r4, #1
 8003aca:	f101 0814 	add.w	r8, r1, #20
 8003ace:	00a3      	lsls	r3, r4, #2
 8003ad0:	f100 0514 	add.w	r5, r0, #20
 8003ad4:	9300      	str	r3, [sp, #0]
 8003ad6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003ada:	9301      	str	r3, [sp, #4]
 8003adc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003ae0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003aec:	fbb2 f6f3 	udiv	r6, r2, r3
 8003af0:	d32e      	bcc.n	8003b50 <quorem+0x96>
 8003af2:	f04f 0a00 	mov.w	sl, #0
 8003af6:	46c4      	mov	ip, r8
 8003af8:	46ae      	mov	lr, r5
 8003afa:	46d3      	mov	fp, sl
 8003afc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003b00:	b298      	uxth	r0, r3
 8003b02:	fb06 a000 	mla	r0, r6, r0, sl
 8003b06:	0c02      	lsrs	r2, r0, #16
 8003b08:	0c1b      	lsrs	r3, r3, #16
 8003b0a:	fb06 2303 	mla	r3, r6, r3, r2
 8003b0e:	f8de 2000 	ldr.w	r2, [lr]
 8003b12:	b280      	uxth	r0, r0
 8003b14:	b292      	uxth	r2, r2
 8003b16:	1a12      	subs	r2, r2, r0
 8003b18:	445a      	add	r2, fp
 8003b1a:	f8de 0000 	ldr.w	r0, [lr]
 8003b1e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003b28:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003b2c:	b292      	uxth	r2, r2
 8003b2e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003b32:	45e1      	cmp	r9, ip
 8003b34:	f84e 2b04 	str.w	r2, [lr], #4
 8003b38:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003b3c:	d2de      	bcs.n	8003afc <quorem+0x42>
 8003b3e:	9b00      	ldr	r3, [sp, #0]
 8003b40:	58eb      	ldr	r3, [r5, r3]
 8003b42:	b92b      	cbnz	r3, 8003b50 <quorem+0x96>
 8003b44:	9b01      	ldr	r3, [sp, #4]
 8003b46:	3b04      	subs	r3, #4
 8003b48:	429d      	cmp	r5, r3
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	d32f      	bcc.n	8003bae <quorem+0xf4>
 8003b4e:	613c      	str	r4, [r7, #16]
 8003b50:	4638      	mov	r0, r7
 8003b52:	f001 f97b 	bl	8004e4c <__mcmp>
 8003b56:	2800      	cmp	r0, #0
 8003b58:	db25      	blt.n	8003ba6 <quorem+0xec>
 8003b5a:	4629      	mov	r1, r5
 8003b5c:	2000      	movs	r0, #0
 8003b5e:	f858 2b04 	ldr.w	r2, [r8], #4
 8003b62:	f8d1 c000 	ldr.w	ip, [r1]
 8003b66:	fa1f fe82 	uxth.w	lr, r2
 8003b6a:	fa1f f38c 	uxth.w	r3, ip
 8003b6e:	eba3 030e 	sub.w	r3, r3, lr
 8003b72:	4403      	add	r3, r0
 8003b74:	0c12      	lsrs	r2, r2, #16
 8003b76:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003b7a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003b84:	45c1      	cmp	r9, r8
 8003b86:	f841 3b04 	str.w	r3, [r1], #4
 8003b8a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003b8e:	d2e6      	bcs.n	8003b5e <quorem+0xa4>
 8003b90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003b94:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003b98:	b922      	cbnz	r2, 8003ba4 <quorem+0xea>
 8003b9a:	3b04      	subs	r3, #4
 8003b9c:	429d      	cmp	r5, r3
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	d30b      	bcc.n	8003bba <quorem+0x100>
 8003ba2:	613c      	str	r4, [r7, #16]
 8003ba4:	3601      	adds	r6, #1
 8003ba6:	4630      	mov	r0, r6
 8003ba8:	b003      	add	sp, #12
 8003baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bae:	6812      	ldr	r2, [r2, #0]
 8003bb0:	3b04      	subs	r3, #4
 8003bb2:	2a00      	cmp	r2, #0
 8003bb4:	d1cb      	bne.n	8003b4e <quorem+0x94>
 8003bb6:	3c01      	subs	r4, #1
 8003bb8:	e7c6      	b.n	8003b48 <quorem+0x8e>
 8003bba:	6812      	ldr	r2, [r2, #0]
 8003bbc:	3b04      	subs	r3, #4
 8003bbe:	2a00      	cmp	r2, #0
 8003bc0:	d1ef      	bne.n	8003ba2 <quorem+0xe8>
 8003bc2:	3c01      	subs	r4, #1
 8003bc4:	e7ea      	b.n	8003b9c <quorem+0xe2>
 8003bc6:	2000      	movs	r0, #0
 8003bc8:	e7ee      	b.n	8003ba8 <quorem+0xee>
 8003bca:	0000      	movs	r0, r0
 8003bcc:	0000      	movs	r0, r0
	...

08003bd0 <_dtoa_r>:
 8003bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bd4:	69c7      	ldr	r7, [r0, #28]
 8003bd6:	b099      	sub	sp, #100	@ 0x64
 8003bd8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8003bdc:	ec55 4b10 	vmov	r4, r5, d0
 8003be0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8003be2:	9109      	str	r1, [sp, #36]	@ 0x24
 8003be4:	4683      	mov	fp, r0
 8003be6:	920e      	str	r2, [sp, #56]	@ 0x38
 8003be8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003bea:	b97f      	cbnz	r7, 8003c0c <_dtoa_r+0x3c>
 8003bec:	2010      	movs	r0, #16
 8003bee:	f000 fdfd 	bl	80047ec <malloc>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	f8cb 001c 	str.w	r0, [fp, #28]
 8003bf8:	b920      	cbnz	r0, 8003c04 <_dtoa_r+0x34>
 8003bfa:	4ba7      	ldr	r3, [pc, #668]	@ (8003e98 <_dtoa_r+0x2c8>)
 8003bfc:	21ef      	movs	r1, #239	@ 0xef
 8003bfe:	48a7      	ldr	r0, [pc, #668]	@ (8003e9c <_dtoa_r+0x2cc>)
 8003c00:	f001 fc68 	bl	80054d4 <__assert_func>
 8003c04:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8003c08:	6007      	str	r7, [r0, #0]
 8003c0a:	60c7      	str	r7, [r0, #12]
 8003c0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003c10:	6819      	ldr	r1, [r3, #0]
 8003c12:	b159      	cbz	r1, 8003c2c <_dtoa_r+0x5c>
 8003c14:	685a      	ldr	r2, [r3, #4]
 8003c16:	604a      	str	r2, [r1, #4]
 8003c18:	2301      	movs	r3, #1
 8003c1a:	4093      	lsls	r3, r2
 8003c1c:	608b      	str	r3, [r1, #8]
 8003c1e:	4658      	mov	r0, fp
 8003c20:	f000 feda 	bl	80049d8 <_Bfree>
 8003c24:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]
 8003c2c:	1e2b      	subs	r3, r5, #0
 8003c2e:	bfb9      	ittee	lt
 8003c30:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8003c34:	9303      	strlt	r3, [sp, #12]
 8003c36:	2300      	movge	r3, #0
 8003c38:	6033      	strge	r3, [r6, #0]
 8003c3a:	9f03      	ldr	r7, [sp, #12]
 8003c3c:	4b98      	ldr	r3, [pc, #608]	@ (8003ea0 <_dtoa_r+0x2d0>)
 8003c3e:	bfbc      	itt	lt
 8003c40:	2201      	movlt	r2, #1
 8003c42:	6032      	strlt	r2, [r6, #0]
 8003c44:	43bb      	bics	r3, r7
 8003c46:	d112      	bne.n	8003c6e <_dtoa_r+0x9e>
 8003c48:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8003c4a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8003c4e:	6013      	str	r3, [r2, #0]
 8003c50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003c54:	4323      	orrs	r3, r4
 8003c56:	f000 854d 	beq.w	80046f4 <_dtoa_r+0xb24>
 8003c5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8003c5c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8003eb4 <_dtoa_r+0x2e4>
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 854f 	beq.w	8004704 <_dtoa_r+0xb34>
 8003c66:	f10a 0303 	add.w	r3, sl, #3
 8003c6a:	f000 bd49 	b.w	8004700 <_dtoa_r+0xb30>
 8003c6e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003c72:	2200      	movs	r2, #0
 8003c74:	ec51 0b17 	vmov	r0, r1, d7
 8003c78:	2300      	movs	r3, #0
 8003c7a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8003c7e:	f7fc ff2b 	bl	8000ad8 <__aeabi_dcmpeq>
 8003c82:	4680      	mov	r8, r0
 8003c84:	b158      	cbz	r0, 8003c9e <_dtoa_r+0xce>
 8003c86:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8003c88:	2301      	movs	r3, #1
 8003c8a:	6013      	str	r3, [r2, #0]
 8003c8c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8003c8e:	b113      	cbz	r3, 8003c96 <_dtoa_r+0xc6>
 8003c90:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8003c92:	4b84      	ldr	r3, [pc, #528]	@ (8003ea4 <_dtoa_r+0x2d4>)
 8003c94:	6013      	str	r3, [r2, #0]
 8003c96:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8003eb8 <_dtoa_r+0x2e8>
 8003c9a:	f000 bd33 	b.w	8004704 <_dtoa_r+0xb34>
 8003c9e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8003ca2:	aa16      	add	r2, sp, #88	@ 0x58
 8003ca4:	a917      	add	r1, sp, #92	@ 0x5c
 8003ca6:	4658      	mov	r0, fp
 8003ca8:	f001 f980 	bl	8004fac <__d2b>
 8003cac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8003cb0:	4681      	mov	r9, r0
 8003cb2:	2e00      	cmp	r6, #0
 8003cb4:	d077      	beq.n	8003da6 <_dtoa_r+0x1d6>
 8003cb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003cb8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8003cbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003cc4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003cc8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003ccc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	4b74      	ldr	r3, [pc, #464]	@ (8003ea8 <_dtoa_r+0x2d8>)
 8003cd6:	f7fc fadf 	bl	8000298 <__aeabi_dsub>
 8003cda:	a369      	add	r3, pc, #420	@ (adr r3, 8003e80 <_dtoa_r+0x2b0>)
 8003cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce0:	f7fc fc92 	bl	8000608 <__aeabi_dmul>
 8003ce4:	a368      	add	r3, pc, #416	@ (adr r3, 8003e88 <_dtoa_r+0x2b8>)
 8003ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cea:	f7fc fad7 	bl	800029c <__adddf3>
 8003cee:	4604      	mov	r4, r0
 8003cf0:	4630      	mov	r0, r6
 8003cf2:	460d      	mov	r5, r1
 8003cf4:	f7fc fc1e 	bl	8000534 <__aeabi_i2d>
 8003cf8:	a365      	add	r3, pc, #404	@ (adr r3, 8003e90 <_dtoa_r+0x2c0>)
 8003cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfe:	f7fc fc83 	bl	8000608 <__aeabi_dmul>
 8003d02:	4602      	mov	r2, r0
 8003d04:	460b      	mov	r3, r1
 8003d06:	4620      	mov	r0, r4
 8003d08:	4629      	mov	r1, r5
 8003d0a:	f7fc fac7 	bl	800029c <__adddf3>
 8003d0e:	4604      	mov	r4, r0
 8003d10:	460d      	mov	r5, r1
 8003d12:	f7fc ff29 	bl	8000b68 <__aeabi_d2iz>
 8003d16:	2200      	movs	r2, #0
 8003d18:	4607      	mov	r7, r0
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	4620      	mov	r0, r4
 8003d1e:	4629      	mov	r1, r5
 8003d20:	f7fc fee4 	bl	8000aec <__aeabi_dcmplt>
 8003d24:	b140      	cbz	r0, 8003d38 <_dtoa_r+0x168>
 8003d26:	4638      	mov	r0, r7
 8003d28:	f7fc fc04 	bl	8000534 <__aeabi_i2d>
 8003d2c:	4622      	mov	r2, r4
 8003d2e:	462b      	mov	r3, r5
 8003d30:	f7fc fed2 	bl	8000ad8 <__aeabi_dcmpeq>
 8003d34:	b900      	cbnz	r0, 8003d38 <_dtoa_r+0x168>
 8003d36:	3f01      	subs	r7, #1
 8003d38:	2f16      	cmp	r7, #22
 8003d3a:	d851      	bhi.n	8003de0 <_dtoa_r+0x210>
 8003d3c:	4b5b      	ldr	r3, [pc, #364]	@ (8003eac <_dtoa_r+0x2dc>)
 8003d3e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003d4a:	f7fc fecf 	bl	8000aec <__aeabi_dcmplt>
 8003d4e:	2800      	cmp	r0, #0
 8003d50:	d048      	beq.n	8003de4 <_dtoa_r+0x214>
 8003d52:	3f01      	subs	r7, #1
 8003d54:	2300      	movs	r3, #0
 8003d56:	9312      	str	r3, [sp, #72]	@ 0x48
 8003d58:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8003d5a:	1b9b      	subs	r3, r3, r6
 8003d5c:	1e5a      	subs	r2, r3, #1
 8003d5e:	bf44      	itt	mi
 8003d60:	f1c3 0801 	rsbmi	r8, r3, #1
 8003d64:	2300      	movmi	r3, #0
 8003d66:	9208      	str	r2, [sp, #32]
 8003d68:	bf54      	ite	pl
 8003d6a:	f04f 0800 	movpl.w	r8, #0
 8003d6e:	9308      	strmi	r3, [sp, #32]
 8003d70:	2f00      	cmp	r7, #0
 8003d72:	db39      	blt.n	8003de8 <_dtoa_r+0x218>
 8003d74:	9b08      	ldr	r3, [sp, #32]
 8003d76:	970f      	str	r7, [sp, #60]	@ 0x3c
 8003d78:	443b      	add	r3, r7
 8003d7a:	9308      	str	r3, [sp, #32]
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8003d80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d82:	2b09      	cmp	r3, #9
 8003d84:	d864      	bhi.n	8003e50 <_dtoa_r+0x280>
 8003d86:	2b05      	cmp	r3, #5
 8003d88:	bfc4      	itt	gt
 8003d8a:	3b04      	subgt	r3, #4
 8003d8c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8003d8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d90:	f1a3 0302 	sub.w	r3, r3, #2
 8003d94:	bfcc      	ite	gt
 8003d96:	2400      	movgt	r4, #0
 8003d98:	2401      	movle	r4, #1
 8003d9a:	2b03      	cmp	r3, #3
 8003d9c:	d863      	bhi.n	8003e66 <_dtoa_r+0x296>
 8003d9e:	e8df f003 	tbb	[pc, r3]
 8003da2:	372a      	.short	0x372a
 8003da4:	5535      	.short	0x5535
 8003da6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8003daa:	441e      	add	r6, r3
 8003dac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8003db0:	2b20      	cmp	r3, #32
 8003db2:	bfc1      	itttt	gt
 8003db4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8003db8:	409f      	lslgt	r7, r3
 8003dba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8003dbe:	fa24 f303 	lsrgt.w	r3, r4, r3
 8003dc2:	bfd6      	itet	le
 8003dc4:	f1c3 0320 	rsble	r3, r3, #32
 8003dc8:	ea47 0003 	orrgt.w	r0, r7, r3
 8003dcc:	fa04 f003 	lslle.w	r0, r4, r3
 8003dd0:	f7fc fba0 	bl	8000514 <__aeabi_ui2d>
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8003dda:	3e01      	subs	r6, #1
 8003ddc:	9214      	str	r2, [sp, #80]	@ 0x50
 8003dde:	e777      	b.n	8003cd0 <_dtoa_r+0x100>
 8003de0:	2301      	movs	r3, #1
 8003de2:	e7b8      	b.n	8003d56 <_dtoa_r+0x186>
 8003de4:	9012      	str	r0, [sp, #72]	@ 0x48
 8003de6:	e7b7      	b.n	8003d58 <_dtoa_r+0x188>
 8003de8:	427b      	negs	r3, r7
 8003dea:	930a      	str	r3, [sp, #40]	@ 0x28
 8003dec:	2300      	movs	r3, #0
 8003dee:	eba8 0807 	sub.w	r8, r8, r7
 8003df2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003df4:	e7c4      	b.n	8003d80 <_dtoa_r+0x1b0>
 8003df6:	2300      	movs	r3, #0
 8003df8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003dfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	dc35      	bgt.n	8003e6c <_dtoa_r+0x29c>
 8003e00:	2301      	movs	r3, #1
 8003e02:	9300      	str	r3, [sp, #0]
 8003e04:	9307      	str	r3, [sp, #28]
 8003e06:	461a      	mov	r2, r3
 8003e08:	920e      	str	r2, [sp, #56]	@ 0x38
 8003e0a:	e00b      	b.n	8003e24 <_dtoa_r+0x254>
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e7f3      	b.n	8003df8 <_dtoa_r+0x228>
 8003e10:	2300      	movs	r3, #0
 8003e12:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003e14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003e16:	18fb      	adds	r3, r7, r3
 8003e18:	9300      	str	r3, [sp, #0]
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	9307      	str	r3, [sp, #28]
 8003e20:	bfb8      	it	lt
 8003e22:	2301      	movlt	r3, #1
 8003e24:	f8db 001c 	ldr.w	r0, [fp, #28]
 8003e28:	2100      	movs	r1, #0
 8003e2a:	2204      	movs	r2, #4
 8003e2c:	f102 0514 	add.w	r5, r2, #20
 8003e30:	429d      	cmp	r5, r3
 8003e32:	d91f      	bls.n	8003e74 <_dtoa_r+0x2a4>
 8003e34:	6041      	str	r1, [r0, #4]
 8003e36:	4658      	mov	r0, fp
 8003e38:	f000 fd8e 	bl	8004958 <_Balloc>
 8003e3c:	4682      	mov	sl, r0
 8003e3e:	2800      	cmp	r0, #0
 8003e40:	d13c      	bne.n	8003ebc <_dtoa_r+0x2ec>
 8003e42:	4b1b      	ldr	r3, [pc, #108]	@ (8003eb0 <_dtoa_r+0x2e0>)
 8003e44:	4602      	mov	r2, r0
 8003e46:	f240 11af 	movw	r1, #431	@ 0x1af
 8003e4a:	e6d8      	b.n	8003bfe <_dtoa_r+0x2e>
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e7e0      	b.n	8003e12 <_dtoa_r+0x242>
 8003e50:	2401      	movs	r4, #1
 8003e52:	2300      	movs	r3, #0
 8003e54:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e56:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003e58:	f04f 33ff 	mov.w	r3, #4294967295
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	9307      	str	r3, [sp, #28]
 8003e60:	2200      	movs	r2, #0
 8003e62:	2312      	movs	r3, #18
 8003e64:	e7d0      	b.n	8003e08 <_dtoa_r+0x238>
 8003e66:	2301      	movs	r3, #1
 8003e68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003e6a:	e7f5      	b.n	8003e58 <_dtoa_r+0x288>
 8003e6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003e6e:	9300      	str	r3, [sp, #0]
 8003e70:	9307      	str	r3, [sp, #28]
 8003e72:	e7d7      	b.n	8003e24 <_dtoa_r+0x254>
 8003e74:	3101      	adds	r1, #1
 8003e76:	0052      	lsls	r2, r2, #1
 8003e78:	e7d8      	b.n	8003e2c <_dtoa_r+0x25c>
 8003e7a:	bf00      	nop
 8003e7c:	f3af 8000 	nop.w
 8003e80:	636f4361 	.word	0x636f4361
 8003e84:	3fd287a7 	.word	0x3fd287a7
 8003e88:	8b60c8b3 	.word	0x8b60c8b3
 8003e8c:	3fc68a28 	.word	0x3fc68a28
 8003e90:	509f79fb 	.word	0x509f79fb
 8003e94:	3fd34413 	.word	0x3fd34413
 8003e98:	08006715 	.word	0x08006715
 8003e9c:	0800672c 	.word	0x0800672c
 8003ea0:	7ff00000 	.word	0x7ff00000
 8003ea4:	080066e5 	.word	0x080066e5
 8003ea8:	3ff80000 	.word	0x3ff80000
 8003eac:	08006828 	.word	0x08006828
 8003eb0:	08006784 	.word	0x08006784
 8003eb4:	08006711 	.word	0x08006711
 8003eb8:	080066e4 	.word	0x080066e4
 8003ebc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003ec0:	6018      	str	r0, [r3, #0]
 8003ec2:	9b07      	ldr	r3, [sp, #28]
 8003ec4:	2b0e      	cmp	r3, #14
 8003ec6:	f200 80a4 	bhi.w	8004012 <_dtoa_r+0x442>
 8003eca:	2c00      	cmp	r4, #0
 8003ecc:	f000 80a1 	beq.w	8004012 <_dtoa_r+0x442>
 8003ed0:	2f00      	cmp	r7, #0
 8003ed2:	dd33      	ble.n	8003f3c <_dtoa_r+0x36c>
 8003ed4:	4bad      	ldr	r3, [pc, #692]	@ (800418c <_dtoa_r+0x5bc>)
 8003ed6:	f007 020f 	and.w	r2, r7, #15
 8003eda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003ede:	ed93 7b00 	vldr	d7, [r3]
 8003ee2:	05f8      	lsls	r0, r7, #23
 8003ee4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003ee8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8003eec:	d516      	bpl.n	8003f1c <_dtoa_r+0x34c>
 8003eee:	4ba8      	ldr	r3, [pc, #672]	@ (8004190 <_dtoa_r+0x5c0>)
 8003ef0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003ef4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003ef8:	f7fc fcb0 	bl	800085c <__aeabi_ddiv>
 8003efc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f00:	f004 040f 	and.w	r4, r4, #15
 8003f04:	2603      	movs	r6, #3
 8003f06:	4da2      	ldr	r5, [pc, #648]	@ (8004190 <_dtoa_r+0x5c0>)
 8003f08:	b954      	cbnz	r4, 8003f20 <_dtoa_r+0x350>
 8003f0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f12:	f7fc fca3 	bl	800085c <__aeabi_ddiv>
 8003f16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f1a:	e028      	b.n	8003f6e <_dtoa_r+0x39e>
 8003f1c:	2602      	movs	r6, #2
 8003f1e:	e7f2      	b.n	8003f06 <_dtoa_r+0x336>
 8003f20:	07e1      	lsls	r1, r4, #31
 8003f22:	d508      	bpl.n	8003f36 <_dtoa_r+0x366>
 8003f24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003f28:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003f2c:	f7fc fb6c 	bl	8000608 <__aeabi_dmul>
 8003f30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003f34:	3601      	adds	r6, #1
 8003f36:	1064      	asrs	r4, r4, #1
 8003f38:	3508      	adds	r5, #8
 8003f3a:	e7e5      	b.n	8003f08 <_dtoa_r+0x338>
 8003f3c:	f000 80d2 	beq.w	80040e4 <_dtoa_r+0x514>
 8003f40:	427c      	negs	r4, r7
 8003f42:	4b92      	ldr	r3, [pc, #584]	@ (800418c <_dtoa_r+0x5bc>)
 8003f44:	4d92      	ldr	r5, [pc, #584]	@ (8004190 <_dtoa_r+0x5c0>)
 8003f46:	f004 020f 	and.w	r2, r4, #15
 8003f4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f52:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003f56:	f7fc fb57 	bl	8000608 <__aeabi_dmul>
 8003f5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f5e:	1124      	asrs	r4, r4, #4
 8003f60:	2300      	movs	r3, #0
 8003f62:	2602      	movs	r6, #2
 8003f64:	2c00      	cmp	r4, #0
 8003f66:	f040 80b2 	bne.w	80040ce <_dtoa_r+0x4fe>
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1d3      	bne.n	8003f16 <_dtoa_r+0x346>
 8003f6e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8003f70:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 80b7 	beq.w	80040e8 <_dtoa_r+0x518>
 8003f7a:	4b86      	ldr	r3, [pc, #536]	@ (8004194 <_dtoa_r+0x5c4>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	4620      	mov	r0, r4
 8003f80:	4629      	mov	r1, r5
 8003f82:	f7fc fdb3 	bl	8000aec <__aeabi_dcmplt>
 8003f86:	2800      	cmp	r0, #0
 8003f88:	f000 80ae 	beq.w	80040e8 <_dtoa_r+0x518>
 8003f8c:	9b07      	ldr	r3, [sp, #28]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f000 80aa 	beq.w	80040e8 <_dtoa_r+0x518>
 8003f94:	9b00      	ldr	r3, [sp, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	dd37      	ble.n	800400a <_dtoa_r+0x43a>
 8003f9a:	1e7b      	subs	r3, r7, #1
 8003f9c:	9304      	str	r3, [sp, #16]
 8003f9e:	4620      	mov	r0, r4
 8003fa0:	4b7d      	ldr	r3, [pc, #500]	@ (8004198 <_dtoa_r+0x5c8>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	4629      	mov	r1, r5
 8003fa6:	f7fc fb2f 	bl	8000608 <__aeabi_dmul>
 8003faa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003fae:	9c00      	ldr	r4, [sp, #0]
 8003fb0:	3601      	adds	r6, #1
 8003fb2:	4630      	mov	r0, r6
 8003fb4:	f7fc fabe 	bl	8000534 <__aeabi_i2d>
 8003fb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003fbc:	f7fc fb24 	bl	8000608 <__aeabi_dmul>
 8003fc0:	4b76      	ldr	r3, [pc, #472]	@ (800419c <_dtoa_r+0x5cc>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f7fc f96a 	bl	800029c <__adddf3>
 8003fc8:	4605      	mov	r5, r0
 8003fca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8003fce:	2c00      	cmp	r4, #0
 8003fd0:	f040 808d 	bne.w	80040ee <_dtoa_r+0x51e>
 8003fd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003fd8:	4b71      	ldr	r3, [pc, #452]	@ (80041a0 <_dtoa_r+0x5d0>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f7fc f95c 	bl	8000298 <__aeabi_dsub>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003fe8:	462a      	mov	r2, r5
 8003fea:	4633      	mov	r3, r6
 8003fec:	f7fc fd9c 	bl	8000b28 <__aeabi_dcmpgt>
 8003ff0:	2800      	cmp	r0, #0
 8003ff2:	f040 828b 	bne.w	800450c <_dtoa_r+0x93c>
 8003ff6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ffa:	462a      	mov	r2, r5
 8003ffc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004000:	f7fc fd74 	bl	8000aec <__aeabi_dcmplt>
 8004004:	2800      	cmp	r0, #0
 8004006:	f040 8128 	bne.w	800425a <_dtoa_r+0x68a>
 800400a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800400e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004012:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004014:	2b00      	cmp	r3, #0
 8004016:	f2c0 815a 	blt.w	80042ce <_dtoa_r+0x6fe>
 800401a:	2f0e      	cmp	r7, #14
 800401c:	f300 8157 	bgt.w	80042ce <_dtoa_r+0x6fe>
 8004020:	4b5a      	ldr	r3, [pc, #360]	@ (800418c <_dtoa_r+0x5bc>)
 8004022:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004026:	ed93 7b00 	vldr	d7, [r3]
 800402a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800402c:	2b00      	cmp	r3, #0
 800402e:	ed8d 7b00 	vstr	d7, [sp]
 8004032:	da03      	bge.n	800403c <_dtoa_r+0x46c>
 8004034:	9b07      	ldr	r3, [sp, #28]
 8004036:	2b00      	cmp	r3, #0
 8004038:	f340 8101 	ble.w	800423e <_dtoa_r+0x66e>
 800403c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004040:	4656      	mov	r6, sl
 8004042:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004046:	4620      	mov	r0, r4
 8004048:	4629      	mov	r1, r5
 800404a:	f7fc fc07 	bl	800085c <__aeabi_ddiv>
 800404e:	f7fc fd8b 	bl	8000b68 <__aeabi_d2iz>
 8004052:	4680      	mov	r8, r0
 8004054:	f7fc fa6e 	bl	8000534 <__aeabi_i2d>
 8004058:	e9dd 2300 	ldrd	r2, r3, [sp]
 800405c:	f7fc fad4 	bl	8000608 <__aeabi_dmul>
 8004060:	4602      	mov	r2, r0
 8004062:	460b      	mov	r3, r1
 8004064:	4620      	mov	r0, r4
 8004066:	4629      	mov	r1, r5
 8004068:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800406c:	f7fc f914 	bl	8000298 <__aeabi_dsub>
 8004070:	f806 4b01 	strb.w	r4, [r6], #1
 8004074:	9d07      	ldr	r5, [sp, #28]
 8004076:	eba6 040a 	sub.w	r4, r6, sl
 800407a:	42a5      	cmp	r5, r4
 800407c:	4602      	mov	r2, r0
 800407e:	460b      	mov	r3, r1
 8004080:	f040 8117 	bne.w	80042b2 <_dtoa_r+0x6e2>
 8004084:	f7fc f90a 	bl	800029c <__adddf3>
 8004088:	e9dd 2300 	ldrd	r2, r3, [sp]
 800408c:	4604      	mov	r4, r0
 800408e:	460d      	mov	r5, r1
 8004090:	f7fc fd4a 	bl	8000b28 <__aeabi_dcmpgt>
 8004094:	2800      	cmp	r0, #0
 8004096:	f040 80f9 	bne.w	800428c <_dtoa_r+0x6bc>
 800409a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800409e:	4620      	mov	r0, r4
 80040a0:	4629      	mov	r1, r5
 80040a2:	f7fc fd19 	bl	8000ad8 <__aeabi_dcmpeq>
 80040a6:	b118      	cbz	r0, 80040b0 <_dtoa_r+0x4e0>
 80040a8:	f018 0f01 	tst.w	r8, #1
 80040ac:	f040 80ee 	bne.w	800428c <_dtoa_r+0x6bc>
 80040b0:	4649      	mov	r1, r9
 80040b2:	4658      	mov	r0, fp
 80040b4:	f000 fc90 	bl	80049d8 <_Bfree>
 80040b8:	2300      	movs	r3, #0
 80040ba:	7033      	strb	r3, [r6, #0]
 80040bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80040be:	3701      	adds	r7, #1
 80040c0:	601f      	str	r7, [r3, #0]
 80040c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f000 831d 	beq.w	8004704 <_dtoa_r+0xb34>
 80040ca:	601e      	str	r6, [r3, #0]
 80040cc:	e31a      	b.n	8004704 <_dtoa_r+0xb34>
 80040ce:	07e2      	lsls	r2, r4, #31
 80040d0:	d505      	bpl.n	80040de <_dtoa_r+0x50e>
 80040d2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80040d6:	f7fc fa97 	bl	8000608 <__aeabi_dmul>
 80040da:	3601      	adds	r6, #1
 80040dc:	2301      	movs	r3, #1
 80040de:	1064      	asrs	r4, r4, #1
 80040e0:	3508      	adds	r5, #8
 80040e2:	e73f      	b.n	8003f64 <_dtoa_r+0x394>
 80040e4:	2602      	movs	r6, #2
 80040e6:	e742      	b.n	8003f6e <_dtoa_r+0x39e>
 80040e8:	9c07      	ldr	r4, [sp, #28]
 80040ea:	9704      	str	r7, [sp, #16]
 80040ec:	e761      	b.n	8003fb2 <_dtoa_r+0x3e2>
 80040ee:	4b27      	ldr	r3, [pc, #156]	@ (800418c <_dtoa_r+0x5bc>)
 80040f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80040f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80040f6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80040fa:	4454      	add	r4, sl
 80040fc:	2900      	cmp	r1, #0
 80040fe:	d053      	beq.n	80041a8 <_dtoa_r+0x5d8>
 8004100:	4928      	ldr	r1, [pc, #160]	@ (80041a4 <_dtoa_r+0x5d4>)
 8004102:	2000      	movs	r0, #0
 8004104:	f7fc fbaa 	bl	800085c <__aeabi_ddiv>
 8004108:	4633      	mov	r3, r6
 800410a:	462a      	mov	r2, r5
 800410c:	f7fc f8c4 	bl	8000298 <__aeabi_dsub>
 8004110:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004114:	4656      	mov	r6, sl
 8004116:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800411a:	f7fc fd25 	bl	8000b68 <__aeabi_d2iz>
 800411e:	4605      	mov	r5, r0
 8004120:	f7fc fa08 	bl	8000534 <__aeabi_i2d>
 8004124:	4602      	mov	r2, r0
 8004126:	460b      	mov	r3, r1
 8004128:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800412c:	f7fc f8b4 	bl	8000298 <__aeabi_dsub>
 8004130:	3530      	adds	r5, #48	@ 0x30
 8004132:	4602      	mov	r2, r0
 8004134:	460b      	mov	r3, r1
 8004136:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800413a:	f806 5b01 	strb.w	r5, [r6], #1
 800413e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004142:	f7fc fcd3 	bl	8000aec <__aeabi_dcmplt>
 8004146:	2800      	cmp	r0, #0
 8004148:	d171      	bne.n	800422e <_dtoa_r+0x65e>
 800414a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800414e:	4911      	ldr	r1, [pc, #68]	@ (8004194 <_dtoa_r+0x5c4>)
 8004150:	2000      	movs	r0, #0
 8004152:	f7fc f8a1 	bl	8000298 <__aeabi_dsub>
 8004156:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800415a:	f7fc fcc7 	bl	8000aec <__aeabi_dcmplt>
 800415e:	2800      	cmp	r0, #0
 8004160:	f040 8095 	bne.w	800428e <_dtoa_r+0x6be>
 8004164:	42a6      	cmp	r6, r4
 8004166:	f43f af50 	beq.w	800400a <_dtoa_r+0x43a>
 800416a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800416e:	4b0a      	ldr	r3, [pc, #40]	@ (8004198 <_dtoa_r+0x5c8>)
 8004170:	2200      	movs	r2, #0
 8004172:	f7fc fa49 	bl	8000608 <__aeabi_dmul>
 8004176:	4b08      	ldr	r3, [pc, #32]	@ (8004198 <_dtoa_r+0x5c8>)
 8004178:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800417c:	2200      	movs	r2, #0
 800417e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004182:	f7fc fa41 	bl	8000608 <__aeabi_dmul>
 8004186:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800418a:	e7c4      	b.n	8004116 <_dtoa_r+0x546>
 800418c:	08006828 	.word	0x08006828
 8004190:	08006800 	.word	0x08006800
 8004194:	3ff00000 	.word	0x3ff00000
 8004198:	40240000 	.word	0x40240000
 800419c:	401c0000 	.word	0x401c0000
 80041a0:	40140000 	.word	0x40140000
 80041a4:	3fe00000 	.word	0x3fe00000
 80041a8:	4631      	mov	r1, r6
 80041aa:	4628      	mov	r0, r5
 80041ac:	f7fc fa2c 	bl	8000608 <__aeabi_dmul>
 80041b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80041b4:	9415      	str	r4, [sp, #84]	@ 0x54
 80041b6:	4656      	mov	r6, sl
 80041b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80041bc:	f7fc fcd4 	bl	8000b68 <__aeabi_d2iz>
 80041c0:	4605      	mov	r5, r0
 80041c2:	f7fc f9b7 	bl	8000534 <__aeabi_i2d>
 80041c6:	4602      	mov	r2, r0
 80041c8:	460b      	mov	r3, r1
 80041ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80041ce:	f7fc f863 	bl	8000298 <__aeabi_dsub>
 80041d2:	3530      	adds	r5, #48	@ 0x30
 80041d4:	f806 5b01 	strb.w	r5, [r6], #1
 80041d8:	4602      	mov	r2, r0
 80041da:	460b      	mov	r3, r1
 80041dc:	42a6      	cmp	r6, r4
 80041de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80041e2:	f04f 0200 	mov.w	r2, #0
 80041e6:	d124      	bne.n	8004232 <_dtoa_r+0x662>
 80041e8:	4bac      	ldr	r3, [pc, #688]	@ (800449c <_dtoa_r+0x8cc>)
 80041ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80041ee:	f7fc f855 	bl	800029c <__adddf3>
 80041f2:	4602      	mov	r2, r0
 80041f4:	460b      	mov	r3, r1
 80041f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80041fa:	f7fc fc95 	bl	8000b28 <__aeabi_dcmpgt>
 80041fe:	2800      	cmp	r0, #0
 8004200:	d145      	bne.n	800428e <_dtoa_r+0x6be>
 8004202:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004206:	49a5      	ldr	r1, [pc, #660]	@ (800449c <_dtoa_r+0x8cc>)
 8004208:	2000      	movs	r0, #0
 800420a:	f7fc f845 	bl	8000298 <__aeabi_dsub>
 800420e:	4602      	mov	r2, r0
 8004210:	460b      	mov	r3, r1
 8004212:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004216:	f7fc fc69 	bl	8000aec <__aeabi_dcmplt>
 800421a:	2800      	cmp	r0, #0
 800421c:	f43f aef5 	beq.w	800400a <_dtoa_r+0x43a>
 8004220:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8004222:	1e73      	subs	r3, r6, #1
 8004224:	9315      	str	r3, [sp, #84]	@ 0x54
 8004226:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800422a:	2b30      	cmp	r3, #48	@ 0x30
 800422c:	d0f8      	beq.n	8004220 <_dtoa_r+0x650>
 800422e:	9f04      	ldr	r7, [sp, #16]
 8004230:	e73e      	b.n	80040b0 <_dtoa_r+0x4e0>
 8004232:	4b9b      	ldr	r3, [pc, #620]	@ (80044a0 <_dtoa_r+0x8d0>)
 8004234:	f7fc f9e8 	bl	8000608 <__aeabi_dmul>
 8004238:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800423c:	e7bc      	b.n	80041b8 <_dtoa_r+0x5e8>
 800423e:	d10c      	bne.n	800425a <_dtoa_r+0x68a>
 8004240:	4b98      	ldr	r3, [pc, #608]	@ (80044a4 <_dtoa_r+0x8d4>)
 8004242:	2200      	movs	r2, #0
 8004244:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004248:	f7fc f9de 	bl	8000608 <__aeabi_dmul>
 800424c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004250:	f7fc fc60 	bl	8000b14 <__aeabi_dcmpge>
 8004254:	2800      	cmp	r0, #0
 8004256:	f000 8157 	beq.w	8004508 <_dtoa_r+0x938>
 800425a:	2400      	movs	r4, #0
 800425c:	4625      	mov	r5, r4
 800425e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004260:	43db      	mvns	r3, r3
 8004262:	9304      	str	r3, [sp, #16]
 8004264:	4656      	mov	r6, sl
 8004266:	2700      	movs	r7, #0
 8004268:	4621      	mov	r1, r4
 800426a:	4658      	mov	r0, fp
 800426c:	f000 fbb4 	bl	80049d8 <_Bfree>
 8004270:	2d00      	cmp	r5, #0
 8004272:	d0dc      	beq.n	800422e <_dtoa_r+0x65e>
 8004274:	b12f      	cbz	r7, 8004282 <_dtoa_r+0x6b2>
 8004276:	42af      	cmp	r7, r5
 8004278:	d003      	beq.n	8004282 <_dtoa_r+0x6b2>
 800427a:	4639      	mov	r1, r7
 800427c:	4658      	mov	r0, fp
 800427e:	f000 fbab 	bl	80049d8 <_Bfree>
 8004282:	4629      	mov	r1, r5
 8004284:	4658      	mov	r0, fp
 8004286:	f000 fba7 	bl	80049d8 <_Bfree>
 800428a:	e7d0      	b.n	800422e <_dtoa_r+0x65e>
 800428c:	9704      	str	r7, [sp, #16]
 800428e:	4633      	mov	r3, r6
 8004290:	461e      	mov	r6, r3
 8004292:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004296:	2a39      	cmp	r2, #57	@ 0x39
 8004298:	d107      	bne.n	80042aa <_dtoa_r+0x6da>
 800429a:	459a      	cmp	sl, r3
 800429c:	d1f8      	bne.n	8004290 <_dtoa_r+0x6c0>
 800429e:	9a04      	ldr	r2, [sp, #16]
 80042a0:	3201      	adds	r2, #1
 80042a2:	9204      	str	r2, [sp, #16]
 80042a4:	2230      	movs	r2, #48	@ 0x30
 80042a6:	f88a 2000 	strb.w	r2, [sl]
 80042aa:	781a      	ldrb	r2, [r3, #0]
 80042ac:	3201      	adds	r2, #1
 80042ae:	701a      	strb	r2, [r3, #0]
 80042b0:	e7bd      	b.n	800422e <_dtoa_r+0x65e>
 80042b2:	4b7b      	ldr	r3, [pc, #492]	@ (80044a0 <_dtoa_r+0x8d0>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	f7fc f9a7 	bl	8000608 <__aeabi_dmul>
 80042ba:	2200      	movs	r2, #0
 80042bc:	2300      	movs	r3, #0
 80042be:	4604      	mov	r4, r0
 80042c0:	460d      	mov	r5, r1
 80042c2:	f7fc fc09 	bl	8000ad8 <__aeabi_dcmpeq>
 80042c6:	2800      	cmp	r0, #0
 80042c8:	f43f aebb 	beq.w	8004042 <_dtoa_r+0x472>
 80042cc:	e6f0      	b.n	80040b0 <_dtoa_r+0x4e0>
 80042ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80042d0:	2a00      	cmp	r2, #0
 80042d2:	f000 80db 	beq.w	800448c <_dtoa_r+0x8bc>
 80042d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80042d8:	2a01      	cmp	r2, #1
 80042da:	f300 80bf 	bgt.w	800445c <_dtoa_r+0x88c>
 80042de:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80042e0:	2a00      	cmp	r2, #0
 80042e2:	f000 80b7 	beq.w	8004454 <_dtoa_r+0x884>
 80042e6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80042ea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80042ec:	4646      	mov	r6, r8
 80042ee:	9a08      	ldr	r2, [sp, #32]
 80042f0:	2101      	movs	r1, #1
 80042f2:	441a      	add	r2, r3
 80042f4:	4658      	mov	r0, fp
 80042f6:	4498      	add	r8, r3
 80042f8:	9208      	str	r2, [sp, #32]
 80042fa:	f000 fc21 	bl	8004b40 <__i2b>
 80042fe:	4605      	mov	r5, r0
 8004300:	b15e      	cbz	r6, 800431a <_dtoa_r+0x74a>
 8004302:	9b08      	ldr	r3, [sp, #32]
 8004304:	2b00      	cmp	r3, #0
 8004306:	dd08      	ble.n	800431a <_dtoa_r+0x74a>
 8004308:	42b3      	cmp	r3, r6
 800430a:	9a08      	ldr	r2, [sp, #32]
 800430c:	bfa8      	it	ge
 800430e:	4633      	movge	r3, r6
 8004310:	eba8 0803 	sub.w	r8, r8, r3
 8004314:	1af6      	subs	r6, r6, r3
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	9308      	str	r3, [sp, #32]
 800431a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800431c:	b1f3      	cbz	r3, 800435c <_dtoa_r+0x78c>
 800431e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004320:	2b00      	cmp	r3, #0
 8004322:	f000 80b7 	beq.w	8004494 <_dtoa_r+0x8c4>
 8004326:	b18c      	cbz	r4, 800434c <_dtoa_r+0x77c>
 8004328:	4629      	mov	r1, r5
 800432a:	4622      	mov	r2, r4
 800432c:	4658      	mov	r0, fp
 800432e:	f000 fcc7 	bl	8004cc0 <__pow5mult>
 8004332:	464a      	mov	r2, r9
 8004334:	4601      	mov	r1, r0
 8004336:	4605      	mov	r5, r0
 8004338:	4658      	mov	r0, fp
 800433a:	f000 fc17 	bl	8004b6c <__multiply>
 800433e:	4649      	mov	r1, r9
 8004340:	9004      	str	r0, [sp, #16]
 8004342:	4658      	mov	r0, fp
 8004344:	f000 fb48 	bl	80049d8 <_Bfree>
 8004348:	9b04      	ldr	r3, [sp, #16]
 800434a:	4699      	mov	r9, r3
 800434c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800434e:	1b1a      	subs	r2, r3, r4
 8004350:	d004      	beq.n	800435c <_dtoa_r+0x78c>
 8004352:	4649      	mov	r1, r9
 8004354:	4658      	mov	r0, fp
 8004356:	f000 fcb3 	bl	8004cc0 <__pow5mult>
 800435a:	4681      	mov	r9, r0
 800435c:	2101      	movs	r1, #1
 800435e:	4658      	mov	r0, fp
 8004360:	f000 fbee 	bl	8004b40 <__i2b>
 8004364:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004366:	4604      	mov	r4, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 81cf 	beq.w	800470c <_dtoa_r+0xb3c>
 800436e:	461a      	mov	r2, r3
 8004370:	4601      	mov	r1, r0
 8004372:	4658      	mov	r0, fp
 8004374:	f000 fca4 	bl	8004cc0 <__pow5mult>
 8004378:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800437a:	2b01      	cmp	r3, #1
 800437c:	4604      	mov	r4, r0
 800437e:	f300 8095 	bgt.w	80044ac <_dtoa_r+0x8dc>
 8004382:	9b02      	ldr	r3, [sp, #8]
 8004384:	2b00      	cmp	r3, #0
 8004386:	f040 8087 	bne.w	8004498 <_dtoa_r+0x8c8>
 800438a:	9b03      	ldr	r3, [sp, #12]
 800438c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004390:	2b00      	cmp	r3, #0
 8004392:	f040 8089 	bne.w	80044a8 <_dtoa_r+0x8d8>
 8004396:	9b03      	ldr	r3, [sp, #12]
 8004398:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800439c:	0d1b      	lsrs	r3, r3, #20
 800439e:	051b      	lsls	r3, r3, #20
 80043a0:	b12b      	cbz	r3, 80043ae <_dtoa_r+0x7de>
 80043a2:	9b08      	ldr	r3, [sp, #32]
 80043a4:	3301      	adds	r3, #1
 80043a6:	9308      	str	r3, [sp, #32]
 80043a8:	f108 0801 	add.w	r8, r8, #1
 80043ac:	2301      	movs	r3, #1
 80043ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80043b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f000 81b0 	beq.w	8004718 <_dtoa_r+0xb48>
 80043b8:	6923      	ldr	r3, [r4, #16]
 80043ba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80043be:	6918      	ldr	r0, [r3, #16]
 80043c0:	f000 fb72 	bl	8004aa8 <__hi0bits>
 80043c4:	f1c0 0020 	rsb	r0, r0, #32
 80043c8:	9b08      	ldr	r3, [sp, #32]
 80043ca:	4418      	add	r0, r3
 80043cc:	f010 001f 	ands.w	r0, r0, #31
 80043d0:	d077      	beq.n	80044c2 <_dtoa_r+0x8f2>
 80043d2:	f1c0 0320 	rsb	r3, r0, #32
 80043d6:	2b04      	cmp	r3, #4
 80043d8:	dd6b      	ble.n	80044b2 <_dtoa_r+0x8e2>
 80043da:	9b08      	ldr	r3, [sp, #32]
 80043dc:	f1c0 001c 	rsb	r0, r0, #28
 80043e0:	4403      	add	r3, r0
 80043e2:	4480      	add	r8, r0
 80043e4:	4406      	add	r6, r0
 80043e6:	9308      	str	r3, [sp, #32]
 80043e8:	f1b8 0f00 	cmp.w	r8, #0
 80043ec:	dd05      	ble.n	80043fa <_dtoa_r+0x82a>
 80043ee:	4649      	mov	r1, r9
 80043f0:	4642      	mov	r2, r8
 80043f2:	4658      	mov	r0, fp
 80043f4:	f000 fcbe 	bl	8004d74 <__lshift>
 80043f8:	4681      	mov	r9, r0
 80043fa:	9b08      	ldr	r3, [sp, #32]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	dd05      	ble.n	800440c <_dtoa_r+0x83c>
 8004400:	4621      	mov	r1, r4
 8004402:	461a      	mov	r2, r3
 8004404:	4658      	mov	r0, fp
 8004406:	f000 fcb5 	bl	8004d74 <__lshift>
 800440a:	4604      	mov	r4, r0
 800440c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800440e:	2b00      	cmp	r3, #0
 8004410:	d059      	beq.n	80044c6 <_dtoa_r+0x8f6>
 8004412:	4621      	mov	r1, r4
 8004414:	4648      	mov	r0, r9
 8004416:	f000 fd19 	bl	8004e4c <__mcmp>
 800441a:	2800      	cmp	r0, #0
 800441c:	da53      	bge.n	80044c6 <_dtoa_r+0x8f6>
 800441e:	1e7b      	subs	r3, r7, #1
 8004420:	9304      	str	r3, [sp, #16]
 8004422:	4649      	mov	r1, r9
 8004424:	2300      	movs	r3, #0
 8004426:	220a      	movs	r2, #10
 8004428:	4658      	mov	r0, fp
 800442a:	f000 faf7 	bl	8004a1c <__multadd>
 800442e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004430:	4681      	mov	r9, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	f000 8172 	beq.w	800471c <_dtoa_r+0xb4c>
 8004438:	2300      	movs	r3, #0
 800443a:	4629      	mov	r1, r5
 800443c:	220a      	movs	r2, #10
 800443e:	4658      	mov	r0, fp
 8004440:	f000 faec 	bl	8004a1c <__multadd>
 8004444:	9b00      	ldr	r3, [sp, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	4605      	mov	r5, r0
 800444a:	dc67      	bgt.n	800451c <_dtoa_r+0x94c>
 800444c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800444e:	2b02      	cmp	r3, #2
 8004450:	dc41      	bgt.n	80044d6 <_dtoa_r+0x906>
 8004452:	e063      	b.n	800451c <_dtoa_r+0x94c>
 8004454:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004456:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800445a:	e746      	b.n	80042ea <_dtoa_r+0x71a>
 800445c:	9b07      	ldr	r3, [sp, #28]
 800445e:	1e5c      	subs	r4, r3, #1
 8004460:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004462:	42a3      	cmp	r3, r4
 8004464:	bfbf      	itttt	lt
 8004466:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004468:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800446a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800446c:	1ae3      	sublt	r3, r4, r3
 800446e:	bfb4      	ite	lt
 8004470:	18d2      	addlt	r2, r2, r3
 8004472:	1b1c      	subge	r4, r3, r4
 8004474:	9b07      	ldr	r3, [sp, #28]
 8004476:	bfbc      	itt	lt
 8004478:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800447a:	2400      	movlt	r4, #0
 800447c:	2b00      	cmp	r3, #0
 800447e:	bfb5      	itete	lt
 8004480:	eba8 0603 	sublt.w	r6, r8, r3
 8004484:	9b07      	ldrge	r3, [sp, #28]
 8004486:	2300      	movlt	r3, #0
 8004488:	4646      	movge	r6, r8
 800448a:	e730      	b.n	80042ee <_dtoa_r+0x71e>
 800448c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800448e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004490:	4646      	mov	r6, r8
 8004492:	e735      	b.n	8004300 <_dtoa_r+0x730>
 8004494:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004496:	e75c      	b.n	8004352 <_dtoa_r+0x782>
 8004498:	2300      	movs	r3, #0
 800449a:	e788      	b.n	80043ae <_dtoa_r+0x7de>
 800449c:	3fe00000 	.word	0x3fe00000
 80044a0:	40240000 	.word	0x40240000
 80044a4:	40140000 	.word	0x40140000
 80044a8:	9b02      	ldr	r3, [sp, #8]
 80044aa:	e780      	b.n	80043ae <_dtoa_r+0x7de>
 80044ac:	2300      	movs	r3, #0
 80044ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80044b0:	e782      	b.n	80043b8 <_dtoa_r+0x7e8>
 80044b2:	d099      	beq.n	80043e8 <_dtoa_r+0x818>
 80044b4:	9a08      	ldr	r2, [sp, #32]
 80044b6:	331c      	adds	r3, #28
 80044b8:	441a      	add	r2, r3
 80044ba:	4498      	add	r8, r3
 80044bc:	441e      	add	r6, r3
 80044be:	9208      	str	r2, [sp, #32]
 80044c0:	e792      	b.n	80043e8 <_dtoa_r+0x818>
 80044c2:	4603      	mov	r3, r0
 80044c4:	e7f6      	b.n	80044b4 <_dtoa_r+0x8e4>
 80044c6:	9b07      	ldr	r3, [sp, #28]
 80044c8:	9704      	str	r7, [sp, #16]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	dc20      	bgt.n	8004510 <_dtoa_r+0x940>
 80044ce:	9300      	str	r3, [sp, #0]
 80044d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	dd1e      	ble.n	8004514 <_dtoa_r+0x944>
 80044d6:	9b00      	ldr	r3, [sp, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f47f aec0 	bne.w	800425e <_dtoa_r+0x68e>
 80044de:	4621      	mov	r1, r4
 80044e0:	2205      	movs	r2, #5
 80044e2:	4658      	mov	r0, fp
 80044e4:	f000 fa9a 	bl	8004a1c <__multadd>
 80044e8:	4601      	mov	r1, r0
 80044ea:	4604      	mov	r4, r0
 80044ec:	4648      	mov	r0, r9
 80044ee:	f000 fcad 	bl	8004e4c <__mcmp>
 80044f2:	2800      	cmp	r0, #0
 80044f4:	f77f aeb3 	ble.w	800425e <_dtoa_r+0x68e>
 80044f8:	4656      	mov	r6, sl
 80044fa:	2331      	movs	r3, #49	@ 0x31
 80044fc:	f806 3b01 	strb.w	r3, [r6], #1
 8004500:	9b04      	ldr	r3, [sp, #16]
 8004502:	3301      	adds	r3, #1
 8004504:	9304      	str	r3, [sp, #16]
 8004506:	e6ae      	b.n	8004266 <_dtoa_r+0x696>
 8004508:	9c07      	ldr	r4, [sp, #28]
 800450a:	9704      	str	r7, [sp, #16]
 800450c:	4625      	mov	r5, r4
 800450e:	e7f3      	b.n	80044f8 <_dtoa_r+0x928>
 8004510:	9b07      	ldr	r3, [sp, #28]
 8004512:	9300      	str	r3, [sp, #0]
 8004514:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004516:	2b00      	cmp	r3, #0
 8004518:	f000 8104 	beq.w	8004724 <_dtoa_r+0xb54>
 800451c:	2e00      	cmp	r6, #0
 800451e:	dd05      	ble.n	800452c <_dtoa_r+0x95c>
 8004520:	4629      	mov	r1, r5
 8004522:	4632      	mov	r2, r6
 8004524:	4658      	mov	r0, fp
 8004526:	f000 fc25 	bl	8004d74 <__lshift>
 800452a:	4605      	mov	r5, r0
 800452c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800452e:	2b00      	cmp	r3, #0
 8004530:	d05a      	beq.n	80045e8 <_dtoa_r+0xa18>
 8004532:	6869      	ldr	r1, [r5, #4]
 8004534:	4658      	mov	r0, fp
 8004536:	f000 fa0f 	bl	8004958 <_Balloc>
 800453a:	4606      	mov	r6, r0
 800453c:	b928      	cbnz	r0, 800454a <_dtoa_r+0x97a>
 800453e:	4b84      	ldr	r3, [pc, #528]	@ (8004750 <_dtoa_r+0xb80>)
 8004540:	4602      	mov	r2, r0
 8004542:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004546:	f7ff bb5a 	b.w	8003bfe <_dtoa_r+0x2e>
 800454a:	692a      	ldr	r2, [r5, #16]
 800454c:	3202      	adds	r2, #2
 800454e:	0092      	lsls	r2, r2, #2
 8004550:	f105 010c 	add.w	r1, r5, #12
 8004554:	300c      	adds	r0, #12
 8004556:	f000 ffaf 	bl	80054b8 <memcpy>
 800455a:	2201      	movs	r2, #1
 800455c:	4631      	mov	r1, r6
 800455e:	4658      	mov	r0, fp
 8004560:	f000 fc08 	bl	8004d74 <__lshift>
 8004564:	f10a 0301 	add.w	r3, sl, #1
 8004568:	9307      	str	r3, [sp, #28]
 800456a:	9b00      	ldr	r3, [sp, #0]
 800456c:	4453      	add	r3, sl
 800456e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004570:	9b02      	ldr	r3, [sp, #8]
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	462f      	mov	r7, r5
 8004578:	930a      	str	r3, [sp, #40]	@ 0x28
 800457a:	4605      	mov	r5, r0
 800457c:	9b07      	ldr	r3, [sp, #28]
 800457e:	4621      	mov	r1, r4
 8004580:	3b01      	subs	r3, #1
 8004582:	4648      	mov	r0, r9
 8004584:	9300      	str	r3, [sp, #0]
 8004586:	f7ff fa98 	bl	8003aba <quorem>
 800458a:	4639      	mov	r1, r7
 800458c:	9002      	str	r0, [sp, #8]
 800458e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004592:	4648      	mov	r0, r9
 8004594:	f000 fc5a 	bl	8004e4c <__mcmp>
 8004598:	462a      	mov	r2, r5
 800459a:	9008      	str	r0, [sp, #32]
 800459c:	4621      	mov	r1, r4
 800459e:	4658      	mov	r0, fp
 80045a0:	f000 fc70 	bl	8004e84 <__mdiff>
 80045a4:	68c2      	ldr	r2, [r0, #12]
 80045a6:	4606      	mov	r6, r0
 80045a8:	bb02      	cbnz	r2, 80045ec <_dtoa_r+0xa1c>
 80045aa:	4601      	mov	r1, r0
 80045ac:	4648      	mov	r0, r9
 80045ae:	f000 fc4d 	bl	8004e4c <__mcmp>
 80045b2:	4602      	mov	r2, r0
 80045b4:	4631      	mov	r1, r6
 80045b6:	4658      	mov	r0, fp
 80045b8:	920e      	str	r2, [sp, #56]	@ 0x38
 80045ba:	f000 fa0d 	bl	80049d8 <_Bfree>
 80045be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80045c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80045c2:	9e07      	ldr	r6, [sp, #28]
 80045c4:	ea43 0102 	orr.w	r1, r3, r2
 80045c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80045ca:	4319      	orrs	r1, r3
 80045cc:	d110      	bne.n	80045f0 <_dtoa_r+0xa20>
 80045ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80045d2:	d029      	beq.n	8004628 <_dtoa_r+0xa58>
 80045d4:	9b08      	ldr	r3, [sp, #32]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	dd02      	ble.n	80045e0 <_dtoa_r+0xa10>
 80045da:	9b02      	ldr	r3, [sp, #8]
 80045dc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80045e0:	9b00      	ldr	r3, [sp, #0]
 80045e2:	f883 8000 	strb.w	r8, [r3]
 80045e6:	e63f      	b.n	8004268 <_dtoa_r+0x698>
 80045e8:	4628      	mov	r0, r5
 80045ea:	e7bb      	b.n	8004564 <_dtoa_r+0x994>
 80045ec:	2201      	movs	r2, #1
 80045ee:	e7e1      	b.n	80045b4 <_dtoa_r+0x9e4>
 80045f0:	9b08      	ldr	r3, [sp, #32]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	db04      	blt.n	8004600 <_dtoa_r+0xa30>
 80045f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80045f8:	430b      	orrs	r3, r1
 80045fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80045fc:	430b      	orrs	r3, r1
 80045fe:	d120      	bne.n	8004642 <_dtoa_r+0xa72>
 8004600:	2a00      	cmp	r2, #0
 8004602:	dded      	ble.n	80045e0 <_dtoa_r+0xa10>
 8004604:	4649      	mov	r1, r9
 8004606:	2201      	movs	r2, #1
 8004608:	4658      	mov	r0, fp
 800460a:	f000 fbb3 	bl	8004d74 <__lshift>
 800460e:	4621      	mov	r1, r4
 8004610:	4681      	mov	r9, r0
 8004612:	f000 fc1b 	bl	8004e4c <__mcmp>
 8004616:	2800      	cmp	r0, #0
 8004618:	dc03      	bgt.n	8004622 <_dtoa_r+0xa52>
 800461a:	d1e1      	bne.n	80045e0 <_dtoa_r+0xa10>
 800461c:	f018 0f01 	tst.w	r8, #1
 8004620:	d0de      	beq.n	80045e0 <_dtoa_r+0xa10>
 8004622:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004626:	d1d8      	bne.n	80045da <_dtoa_r+0xa0a>
 8004628:	9a00      	ldr	r2, [sp, #0]
 800462a:	2339      	movs	r3, #57	@ 0x39
 800462c:	7013      	strb	r3, [r2, #0]
 800462e:	4633      	mov	r3, r6
 8004630:	461e      	mov	r6, r3
 8004632:	3b01      	subs	r3, #1
 8004634:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004638:	2a39      	cmp	r2, #57	@ 0x39
 800463a:	d052      	beq.n	80046e2 <_dtoa_r+0xb12>
 800463c:	3201      	adds	r2, #1
 800463e:	701a      	strb	r2, [r3, #0]
 8004640:	e612      	b.n	8004268 <_dtoa_r+0x698>
 8004642:	2a00      	cmp	r2, #0
 8004644:	dd07      	ble.n	8004656 <_dtoa_r+0xa86>
 8004646:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800464a:	d0ed      	beq.n	8004628 <_dtoa_r+0xa58>
 800464c:	9a00      	ldr	r2, [sp, #0]
 800464e:	f108 0301 	add.w	r3, r8, #1
 8004652:	7013      	strb	r3, [r2, #0]
 8004654:	e608      	b.n	8004268 <_dtoa_r+0x698>
 8004656:	9b07      	ldr	r3, [sp, #28]
 8004658:	9a07      	ldr	r2, [sp, #28]
 800465a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800465e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004660:	4293      	cmp	r3, r2
 8004662:	d028      	beq.n	80046b6 <_dtoa_r+0xae6>
 8004664:	4649      	mov	r1, r9
 8004666:	2300      	movs	r3, #0
 8004668:	220a      	movs	r2, #10
 800466a:	4658      	mov	r0, fp
 800466c:	f000 f9d6 	bl	8004a1c <__multadd>
 8004670:	42af      	cmp	r7, r5
 8004672:	4681      	mov	r9, r0
 8004674:	f04f 0300 	mov.w	r3, #0
 8004678:	f04f 020a 	mov.w	r2, #10
 800467c:	4639      	mov	r1, r7
 800467e:	4658      	mov	r0, fp
 8004680:	d107      	bne.n	8004692 <_dtoa_r+0xac2>
 8004682:	f000 f9cb 	bl	8004a1c <__multadd>
 8004686:	4607      	mov	r7, r0
 8004688:	4605      	mov	r5, r0
 800468a:	9b07      	ldr	r3, [sp, #28]
 800468c:	3301      	adds	r3, #1
 800468e:	9307      	str	r3, [sp, #28]
 8004690:	e774      	b.n	800457c <_dtoa_r+0x9ac>
 8004692:	f000 f9c3 	bl	8004a1c <__multadd>
 8004696:	4629      	mov	r1, r5
 8004698:	4607      	mov	r7, r0
 800469a:	2300      	movs	r3, #0
 800469c:	220a      	movs	r2, #10
 800469e:	4658      	mov	r0, fp
 80046a0:	f000 f9bc 	bl	8004a1c <__multadd>
 80046a4:	4605      	mov	r5, r0
 80046a6:	e7f0      	b.n	800468a <_dtoa_r+0xaba>
 80046a8:	9b00      	ldr	r3, [sp, #0]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	bfcc      	ite	gt
 80046ae:	461e      	movgt	r6, r3
 80046b0:	2601      	movle	r6, #1
 80046b2:	4456      	add	r6, sl
 80046b4:	2700      	movs	r7, #0
 80046b6:	4649      	mov	r1, r9
 80046b8:	2201      	movs	r2, #1
 80046ba:	4658      	mov	r0, fp
 80046bc:	f000 fb5a 	bl	8004d74 <__lshift>
 80046c0:	4621      	mov	r1, r4
 80046c2:	4681      	mov	r9, r0
 80046c4:	f000 fbc2 	bl	8004e4c <__mcmp>
 80046c8:	2800      	cmp	r0, #0
 80046ca:	dcb0      	bgt.n	800462e <_dtoa_r+0xa5e>
 80046cc:	d102      	bne.n	80046d4 <_dtoa_r+0xb04>
 80046ce:	f018 0f01 	tst.w	r8, #1
 80046d2:	d1ac      	bne.n	800462e <_dtoa_r+0xa5e>
 80046d4:	4633      	mov	r3, r6
 80046d6:	461e      	mov	r6, r3
 80046d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80046dc:	2a30      	cmp	r2, #48	@ 0x30
 80046de:	d0fa      	beq.n	80046d6 <_dtoa_r+0xb06>
 80046e0:	e5c2      	b.n	8004268 <_dtoa_r+0x698>
 80046e2:	459a      	cmp	sl, r3
 80046e4:	d1a4      	bne.n	8004630 <_dtoa_r+0xa60>
 80046e6:	9b04      	ldr	r3, [sp, #16]
 80046e8:	3301      	adds	r3, #1
 80046ea:	9304      	str	r3, [sp, #16]
 80046ec:	2331      	movs	r3, #49	@ 0x31
 80046ee:	f88a 3000 	strb.w	r3, [sl]
 80046f2:	e5b9      	b.n	8004268 <_dtoa_r+0x698>
 80046f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80046f6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8004754 <_dtoa_r+0xb84>
 80046fa:	b11b      	cbz	r3, 8004704 <_dtoa_r+0xb34>
 80046fc:	f10a 0308 	add.w	r3, sl, #8
 8004700:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004702:	6013      	str	r3, [r2, #0]
 8004704:	4650      	mov	r0, sl
 8004706:	b019      	add	sp, #100	@ 0x64
 8004708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800470c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800470e:	2b01      	cmp	r3, #1
 8004710:	f77f ae37 	ble.w	8004382 <_dtoa_r+0x7b2>
 8004714:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004716:	930a      	str	r3, [sp, #40]	@ 0x28
 8004718:	2001      	movs	r0, #1
 800471a:	e655      	b.n	80043c8 <_dtoa_r+0x7f8>
 800471c:	9b00      	ldr	r3, [sp, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	f77f aed6 	ble.w	80044d0 <_dtoa_r+0x900>
 8004724:	4656      	mov	r6, sl
 8004726:	4621      	mov	r1, r4
 8004728:	4648      	mov	r0, r9
 800472a:	f7ff f9c6 	bl	8003aba <quorem>
 800472e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004732:	f806 8b01 	strb.w	r8, [r6], #1
 8004736:	9b00      	ldr	r3, [sp, #0]
 8004738:	eba6 020a 	sub.w	r2, r6, sl
 800473c:	4293      	cmp	r3, r2
 800473e:	ddb3      	ble.n	80046a8 <_dtoa_r+0xad8>
 8004740:	4649      	mov	r1, r9
 8004742:	2300      	movs	r3, #0
 8004744:	220a      	movs	r2, #10
 8004746:	4658      	mov	r0, fp
 8004748:	f000 f968 	bl	8004a1c <__multadd>
 800474c:	4681      	mov	r9, r0
 800474e:	e7ea      	b.n	8004726 <_dtoa_r+0xb56>
 8004750:	08006784 	.word	0x08006784
 8004754:	08006708 	.word	0x08006708

08004758 <_free_r>:
 8004758:	b538      	push	{r3, r4, r5, lr}
 800475a:	4605      	mov	r5, r0
 800475c:	2900      	cmp	r1, #0
 800475e:	d041      	beq.n	80047e4 <_free_r+0x8c>
 8004760:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004764:	1f0c      	subs	r4, r1, #4
 8004766:	2b00      	cmp	r3, #0
 8004768:	bfb8      	it	lt
 800476a:	18e4      	addlt	r4, r4, r3
 800476c:	f000 f8e8 	bl	8004940 <__malloc_lock>
 8004770:	4a1d      	ldr	r2, [pc, #116]	@ (80047e8 <_free_r+0x90>)
 8004772:	6813      	ldr	r3, [r2, #0]
 8004774:	b933      	cbnz	r3, 8004784 <_free_r+0x2c>
 8004776:	6063      	str	r3, [r4, #4]
 8004778:	6014      	str	r4, [r2, #0]
 800477a:	4628      	mov	r0, r5
 800477c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004780:	f000 b8e4 	b.w	800494c <__malloc_unlock>
 8004784:	42a3      	cmp	r3, r4
 8004786:	d908      	bls.n	800479a <_free_r+0x42>
 8004788:	6820      	ldr	r0, [r4, #0]
 800478a:	1821      	adds	r1, r4, r0
 800478c:	428b      	cmp	r3, r1
 800478e:	bf01      	itttt	eq
 8004790:	6819      	ldreq	r1, [r3, #0]
 8004792:	685b      	ldreq	r3, [r3, #4]
 8004794:	1809      	addeq	r1, r1, r0
 8004796:	6021      	streq	r1, [r4, #0]
 8004798:	e7ed      	b.n	8004776 <_free_r+0x1e>
 800479a:	461a      	mov	r2, r3
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	b10b      	cbz	r3, 80047a4 <_free_r+0x4c>
 80047a0:	42a3      	cmp	r3, r4
 80047a2:	d9fa      	bls.n	800479a <_free_r+0x42>
 80047a4:	6811      	ldr	r1, [r2, #0]
 80047a6:	1850      	adds	r0, r2, r1
 80047a8:	42a0      	cmp	r0, r4
 80047aa:	d10b      	bne.n	80047c4 <_free_r+0x6c>
 80047ac:	6820      	ldr	r0, [r4, #0]
 80047ae:	4401      	add	r1, r0
 80047b0:	1850      	adds	r0, r2, r1
 80047b2:	4283      	cmp	r3, r0
 80047b4:	6011      	str	r1, [r2, #0]
 80047b6:	d1e0      	bne.n	800477a <_free_r+0x22>
 80047b8:	6818      	ldr	r0, [r3, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	6053      	str	r3, [r2, #4]
 80047be:	4408      	add	r0, r1
 80047c0:	6010      	str	r0, [r2, #0]
 80047c2:	e7da      	b.n	800477a <_free_r+0x22>
 80047c4:	d902      	bls.n	80047cc <_free_r+0x74>
 80047c6:	230c      	movs	r3, #12
 80047c8:	602b      	str	r3, [r5, #0]
 80047ca:	e7d6      	b.n	800477a <_free_r+0x22>
 80047cc:	6820      	ldr	r0, [r4, #0]
 80047ce:	1821      	adds	r1, r4, r0
 80047d0:	428b      	cmp	r3, r1
 80047d2:	bf04      	itt	eq
 80047d4:	6819      	ldreq	r1, [r3, #0]
 80047d6:	685b      	ldreq	r3, [r3, #4]
 80047d8:	6063      	str	r3, [r4, #4]
 80047da:	bf04      	itt	eq
 80047dc:	1809      	addeq	r1, r1, r0
 80047de:	6021      	streq	r1, [r4, #0]
 80047e0:	6054      	str	r4, [r2, #4]
 80047e2:	e7ca      	b.n	800477a <_free_r+0x22>
 80047e4:	bd38      	pop	{r3, r4, r5, pc}
 80047e6:	bf00      	nop
 80047e8:	20000358 	.word	0x20000358

080047ec <malloc>:
 80047ec:	4b02      	ldr	r3, [pc, #8]	@ (80047f8 <malloc+0xc>)
 80047ee:	4601      	mov	r1, r0
 80047f0:	6818      	ldr	r0, [r3, #0]
 80047f2:	f000 b825 	b.w	8004840 <_malloc_r>
 80047f6:	bf00      	nop
 80047f8:	20000024 	.word	0x20000024

080047fc <sbrk_aligned>:
 80047fc:	b570      	push	{r4, r5, r6, lr}
 80047fe:	4e0f      	ldr	r6, [pc, #60]	@ (800483c <sbrk_aligned+0x40>)
 8004800:	460c      	mov	r4, r1
 8004802:	6831      	ldr	r1, [r6, #0]
 8004804:	4605      	mov	r5, r0
 8004806:	b911      	cbnz	r1, 800480e <sbrk_aligned+0x12>
 8004808:	f000 fe46 	bl	8005498 <_sbrk_r>
 800480c:	6030      	str	r0, [r6, #0]
 800480e:	4621      	mov	r1, r4
 8004810:	4628      	mov	r0, r5
 8004812:	f000 fe41 	bl	8005498 <_sbrk_r>
 8004816:	1c43      	adds	r3, r0, #1
 8004818:	d103      	bne.n	8004822 <sbrk_aligned+0x26>
 800481a:	f04f 34ff 	mov.w	r4, #4294967295
 800481e:	4620      	mov	r0, r4
 8004820:	bd70      	pop	{r4, r5, r6, pc}
 8004822:	1cc4      	adds	r4, r0, #3
 8004824:	f024 0403 	bic.w	r4, r4, #3
 8004828:	42a0      	cmp	r0, r4
 800482a:	d0f8      	beq.n	800481e <sbrk_aligned+0x22>
 800482c:	1a21      	subs	r1, r4, r0
 800482e:	4628      	mov	r0, r5
 8004830:	f000 fe32 	bl	8005498 <_sbrk_r>
 8004834:	3001      	adds	r0, #1
 8004836:	d1f2      	bne.n	800481e <sbrk_aligned+0x22>
 8004838:	e7ef      	b.n	800481a <sbrk_aligned+0x1e>
 800483a:	bf00      	nop
 800483c:	20000354 	.word	0x20000354

08004840 <_malloc_r>:
 8004840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004844:	1ccd      	adds	r5, r1, #3
 8004846:	f025 0503 	bic.w	r5, r5, #3
 800484a:	3508      	adds	r5, #8
 800484c:	2d0c      	cmp	r5, #12
 800484e:	bf38      	it	cc
 8004850:	250c      	movcc	r5, #12
 8004852:	2d00      	cmp	r5, #0
 8004854:	4606      	mov	r6, r0
 8004856:	db01      	blt.n	800485c <_malloc_r+0x1c>
 8004858:	42a9      	cmp	r1, r5
 800485a:	d904      	bls.n	8004866 <_malloc_r+0x26>
 800485c:	230c      	movs	r3, #12
 800485e:	6033      	str	r3, [r6, #0]
 8004860:	2000      	movs	r0, #0
 8004862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004866:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800493c <_malloc_r+0xfc>
 800486a:	f000 f869 	bl	8004940 <__malloc_lock>
 800486e:	f8d8 3000 	ldr.w	r3, [r8]
 8004872:	461c      	mov	r4, r3
 8004874:	bb44      	cbnz	r4, 80048c8 <_malloc_r+0x88>
 8004876:	4629      	mov	r1, r5
 8004878:	4630      	mov	r0, r6
 800487a:	f7ff ffbf 	bl	80047fc <sbrk_aligned>
 800487e:	1c43      	adds	r3, r0, #1
 8004880:	4604      	mov	r4, r0
 8004882:	d158      	bne.n	8004936 <_malloc_r+0xf6>
 8004884:	f8d8 4000 	ldr.w	r4, [r8]
 8004888:	4627      	mov	r7, r4
 800488a:	2f00      	cmp	r7, #0
 800488c:	d143      	bne.n	8004916 <_malloc_r+0xd6>
 800488e:	2c00      	cmp	r4, #0
 8004890:	d04b      	beq.n	800492a <_malloc_r+0xea>
 8004892:	6823      	ldr	r3, [r4, #0]
 8004894:	4639      	mov	r1, r7
 8004896:	4630      	mov	r0, r6
 8004898:	eb04 0903 	add.w	r9, r4, r3
 800489c:	f000 fdfc 	bl	8005498 <_sbrk_r>
 80048a0:	4581      	cmp	r9, r0
 80048a2:	d142      	bne.n	800492a <_malloc_r+0xea>
 80048a4:	6821      	ldr	r1, [r4, #0]
 80048a6:	1a6d      	subs	r5, r5, r1
 80048a8:	4629      	mov	r1, r5
 80048aa:	4630      	mov	r0, r6
 80048ac:	f7ff ffa6 	bl	80047fc <sbrk_aligned>
 80048b0:	3001      	adds	r0, #1
 80048b2:	d03a      	beq.n	800492a <_malloc_r+0xea>
 80048b4:	6823      	ldr	r3, [r4, #0]
 80048b6:	442b      	add	r3, r5
 80048b8:	6023      	str	r3, [r4, #0]
 80048ba:	f8d8 3000 	ldr.w	r3, [r8]
 80048be:	685a      	ldr	r2, [r3, #4]
 80048c0:	bb62      	cbnz	r2, 800491c <_malloc_r+0xdc>
 80048c2:	f8c8 7000 	str.w	r7, [r8]
 80048c6:	e00f      	b.n	80048e8 <_malloc_r+0xa8>
 80048c8:	6822      	ldr	r2, [r4, #0]
 80048ca:	1b52      	subs	r2, r2, r5
 80048cc:	d420      	bmi.n	8004910 <_malloc_r+0xd0>
 80048ce:	2a0b      	cmp	r2, #11
 80048d0:	d917      	bls.n	8004902 <_malloc_r+0xc2>
 80048d2:	1961      	adds	r1, r4, r5
 80048d4:	42a3      	cmp	r3, r4
 80048d6:	6025      	str	r5, [r4, #0]
 80048d8:	bf18      	it	ne
 80048da:	6059      	strne	r1, [r3, #4]
 80048dc:	6863      	ldr	r3, [r4, #4]
 80048de:	bf08      	it	eq
 80048e0:	f8c8 1000 	streq.w	r1, [r8]
 80048e4:	5162      	str	r2, [r4, r5]
 80048e6:	604b      	str	r3, [r1, #4]
 80048e8:	4630      	mov	r0, r6
 80048ea:	f000 f82f 	bl	800494c <__malloc_unlock>
 80048ee:	f104 000b 	add.w	r0, r4, #11
 80048f2:	1d23      	adds	r3, r4, #4
 80048f4:	f020 0007 	bic.w	r0, r0, #7
 80048f8:	1ac2      	subs	r2, r0, r3
 80048fa:	bf1c      	itt	ne
 80048fc:	1a1b      	subne	r3, r3, r0
 80048fe:	50a3      	strne	r3, [r4, r2]
 8004900:	e7af      	b.n	8004862 <_malloc_r+0x22>
 8004902:	6862      	ldr	r2, [r4, #4]
 8004904:	42a3      	cmp	r3, r4
 8004906:	bf0c      	ite	eq
 8004908:	f8c8 2000 	streq.w	r2, [r8]
 800490c:	605a      	strne	r2, [r3, #4]
 800490e:	e7eb      	b.n	80048e8 <_malloc_r+0xa8>
 8004910:	4623      	mov	r3, r4
 8004912:	6864      	ldr	r4, [r4, #4]
 8004914:	e7ae      	b.n	8004874 <_malloc_r+0x34>
 8004916:	463c      	mov	r4, r7
 8004918:	687f      	ldr	r7, [r7, #4]
 800491a:	e7b6      	b.n	800488a <_malloc_r+0x4a>
 800491c:	461a      	mov	r2, r3
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	42a3      	cmp	r3, r4
 8004922:	d1fb      	bne.n	800491c <_malloc_r+0xdc>
 8004924:	2300      	movs	r3, #0
 8004926:	6053      	str	r3, [r2, #4]
 8004928:	e7de      	b.n	80048e8 <_malloc_r+0xa8>
 800492a:	230c      	movs	r3, #12
 800492c:	6033      	str	r3, [r6, #0]
 800492e:	4630      	mov	r0, r6
 8004930:	f000 f80c 	bl	800494c <__malloc_unlock>
 8004934:	e794      	b.n	8004860 <_malloc_r+0x20>
 8004936:	6005      	str	r5, [r0, #0]
 8004938:	e7d6      	b.n	80048e8 <_malloc_r+0xa8>
 800493a:	bf00      	nop
 800493c:	20000358 	.word	0x20000358

08004940 <__malloc_lock>:
 8004940:	4801      	ldr	r0, [pc, #4]	@ (8004948 <__malloc_lock+0x8>)
 8004942:	f7ff b8b8 	b.w	8003ab6 <__retarget_lock_acquire_recursive>
 8004946:	bf00      	nop
 8004948:	20000350 	.word	0x20000350

0800494c <__malloc_unlock>:
 800494c:	4801      	ldr	r0, [pc, #4]	@ (8004954 <__malloc_unlock+0x8>)
 800494e:	f7ff b8b3 	b.w	8003ab8 <__retarget_lock_release_recursive>
 8004952:	bf00      	nop
 8004954:	20000350 	.word	0x20000350

08004958 <_Balloc>:
 8004958:	b570      	push	{r4, r5, r6, lr}
 800495a:	69c6      	ldr	r6, [r0, #28]
 800495c:	4604      	mov	r4, r0
 800495e:	460d      	mov	r5, r1
 8004960:	b976      	cbnz	r6, 8004980 <_Balloc+0x28>
 8004962:	2010      	movs	r0, #16
 8004964:	f7ff ff42 	bl	80047ec <malloc>
 8004968:	4602      	mov	r2, r0
 800496a:	61e0      	str	r0, [r4, #28]
 800496c:	b920      	cbnz	r0, 8004978 <_Balloc+0x20>
 800496e:	4b18      	ldr	r3, [pc, #96]	@ (80049d0 <_Balloc+0x78>)
 8004970:	4818      	ldr	r0, [pc, #96]	@ (80049d4 <_Balloc+0x7c>)
 8004972:	216b      	movs	r1, #107	@ 0x6b
 8004974:	f000 fdae 	bl	80054d4 <__assert_func>
 8004978:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800497c:	6006      	str	r6, [r0, #0]
 800497e:	60c6      	str	r6, [r0, #12]
 8004980:	69e6      	ldr	r6, [r4, #28]
 8004982:	68f3      	ldr	r3, [r6, #12]
 8004984:	b183      	cbz	r3, 80049a8 <_Balloc+0x50>
 8004986:	69e3      	ldr	r3, [r4, #28]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800498e:	b9b8      	cbnz	r0, 80049c0 <_Balloc+0x68>
 8004990:	2101      	movs	r1, #1
 8004992:	fa01 f605 	lsl.w	r6, r1, r5
 8004996:	1d72      	adds	r2, r6, #5
 8004998:	0092      	lsls	r2, r2, #2
 800499a:	4620      	mov	r0, r4
 800499c:	f000 fdb8 	bl	8005510 <_calloc_r>
 80049a0:	b160      	cbz	r0, 80049bc <_Balloc+0x64>
 80049a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80049a6:	e00e      	b.n	80049c6 <_Balloc+0x6e>
 80049a8:	2221      	movs	r2, #33	@ 0x21
 80049aa:	2104      	movs	r1, #4
 80049ac:	4620      	mov	r0, r4
 80049ae:	f000 fdaf 	bl	8005510 <_calloc_r>
 80049b2:	69e3      	ldr	r3, [r4, #28]
 80049b4:	60f0      	str	r0, [r6, #12]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d1e4      	bne.n	8004986 <_Balloc+0x2e>
 80049bc:	2000      	movs	r0, #0
 80049be:	bd70      	pop	{r4, r5, r6, pc}
 80049c0:	6802      	ldr	r2, [r0, #0]
 80049c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80049c6:	2300      	movs	r3, #0
 80049c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80049cc:	e7f7      	b.n	80049be <_Balloc+0x66>
 80049ce:	bf00      	nop
 80049d0:	08006715 	.word	0x08006715
 80049d4:	08006795 	.word	0x08006795

080049d8 <_Bfree>:
 80049d8:	b570      	push	{r4, r5, r6, lr}
 80049da:	69c6      	ldr	r6, [r0, #28]
 80049dc:	4605      	mov	r5, r0
 80049de:	460c      	mov	r4, r1
 80049e0:	b976      	cbnz	r6, 8004a00 <_Bfree+0x28>
 80049e2:	2010      	movs	r0, #16
 80049e4:	f7ff ff02 	bl	80047ec <malloc>
 80049e8:	4602      	mov	r2, r0
 80049ea:	61e8      	str	r0, [r5, #28]
 80049ec:	b920      	cbnz	r0, 80049f8 <_Bfree+0x20>
 80049ee:	4b09      	ldr	r3, [pc, #36]	@ (8004a14 <_Bfree+0x3c>)
 80049f0:	4809      	ldr	r0, [pc, #36]	@ (8004a18 <_Bfree+0x40>)
 80049f2:	218f      	movs	r1, #143	@ 0x8f
 80049f4:	f000 fd6e 	bl	80054d4 <__assert_func>
 80049f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80049fc:	6006      	str	r6, [r0, #0]
 80049fe:	60c6      	str	r6, [r0, #12]
 8004a00:	b13c      	cbz	r4, 8004a12 <_Bfree+0x3a>
 8004a02:	69eb      	ldr	r3, [r5, #28]
 8004a04:	6862      	ldr	r2, [r4, #4]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004a0c:	6021      	str	r1, [r4, #0]
 8004a0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004a12:	bd70      	pop	{r4, r5, r6, pc}
 8004a14:	08006715 	.word	0x08006715
 8004a18:	08006795 	.word	0x08006795

08004a1c <__multadd>:
 8004a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a20:	690d      	ldr	r5, [r1, #16]
 8004a22:	4607      	mov	r7, r0
 8004a24:	460c      	mov	r4, r1
 8004a26:	461e      	mov	r6, r3
 8004a28:	f101 0c14 	add.w	ip, r1, #20
 8004a2c:	2000      	movs	r0, #0
 8004a2e:	f8dc 3000 	ldr.w	r3, [ip]
 8004a32:	b299      	uxth	r1, r3
 8004a34:	fb02 6101 	mla	r1, r2, r1, r6
 8004a38:	0c1e      	lsrs	r6, r3, #16
 8004a3a:	0c0b      	lsrs	r3, r1, #16
 8004a3c:	fb02 3306 	mla	r3, r2, r6, r3
 8004a40:	b289      	uxth	r1, r1
 8004a42:	3001      	adds	r0, #1
 8004a44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004a48:	4285      	cmp	r5, r0
 8004a4a:	f84c 1b04 	str.w	r1, [ip], #4
 8004a4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004a52:	dcec      	bgt.n	8004a2e <__multadd+0x12>
 8004a54:	b30e      	cbz	r6, 8004a9a <__multadd+0x7e>
 8004a56:	68a3      	ldr	r3, [r4, #8]
 8004a58:	42ab      	cmp	r3, r5
 8004a5a:	dc19      	bgt.n	8004a90 <__multadd+0x74>
 8004a5c:	6861      	ldr	r1, [r4, #4]
 8004a5e:	4638      	mov	r0, r7
 8004a60:	3101      	adds	r1, #1
 8004a62:	f7ff ff79 	bl	8004958 <_Balloc>
 8004a66:	4680      	mov	r8, r0
 8004a68:	b928      	cbnz	r0, 8004a76 <__multadd+0x5a>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8004aa0 <__multadd+0x84>)
 8004a6e:	480d      	ldr	r0, [pc, #52]	@ (8004aa4 <__multadd+0x88>)
 8004a70:	21ba      	movs	r1, #186	@ 0xba
 8004a72:	f000 fd2f 	bl	80054d4 <__assert_func>
 8004a76:	6922      	ldr	r2, [r4, #16]
 8004a78:	3202      	adds	r2, #2
 8004a7a:	f104 010c 	add.w	r1, r4, #12
 8004a7e:	0092      	lsls	r2, r2, #2
 8004a80:	300c      	adds	r0, #12
 8004a82:	f000 fd19 	bl	80054b8 <memcpy>
 8004a86:	4621      	mov	r1, r4
 8004a88:	4638      	mov	r0, r7
 8004a8a:	f7ff ffa5 	bl	80049d8 <_Bfree>
 8004a8e:	4644      	mov	r4, r8
 8004a90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004a94:	3501      	adds	r5, #1
 8004a96:	615e      	str	r6, [r3, #20]
 8004a98:	6125      	str	r5, [r4, #16]
 8004a9a:	4620      	mov	r0, r4
 8004a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004aa0:	08006784 	.word	0x08006784
 8004aa4:	08006795 	.word	0x08006795

08004aa8 <__hi0bits>:
 8004aa8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004aac:	4603      	mov	r3, r0
 8004aae:	bf36      	itet	cc
 8004ab0:	0403      	lslcc	r3, r0, #16
 8004ab2:	2000      	movcs	r0, #0
 8004ab4:	2010      	movcc	r0, #16
 8004ab6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004aba:	bf3c      	itt	cc
 8004abc:	021b      	lslcc	r3, r3, #8
 8004abe:	3008      	addcc	r0, #8
 8004ac0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ac4:	bf3c      	itt	cc
 8004ac6:	011b      	lslcc	r3, r3, #4
 8004ac8:	3004      	addcc	r0, #4
 8004aca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ace:	bf3c      	itt	cc
 8004ad0:	009b      	lslcc	r3, r3, #2
 8004ad2:	3002      	addcc	r0, #2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	db05      	blt.n	8004ae4 <__hi0bits+0x3c>
 8004ad8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004adc:	f100 0001 	add.w	r0, r0, #1
 8004ae0:	bf08      	it	eq
 8004ae2:	2020      	moveq	r0, #32
 8004ae4:	4770      	bx	lr

08004ae6 <__lo0bits>:
 8004ae6:	6803      	ldr	r3, [r0, #0]
 8004ae8:	4602      	mov	r2, r0
 8004aea:	f013 0007 	ands.w	r0, r3, #7
 8004aee:	d00b      	beq.n	8004b08 <__lo0bits+0x22>
 8004af0:	07d9      	lsls	r1, r3, #31
 8004af2:	d421      	bmi.n	8004b38 <__lo0bits+0x52>
 8004af4:	0798      	lsls	r0, r3, #30
 8004af6:	bf49      	itett	mi
 8004af8:	085b      	lsrmi	r3, r3, #1
 8004afa:	089b      	lsrpl	r3, r3, #2
 8004afc:	2001      	movmi	r0, #1
 8004afe:	6013      	strmi	r3, [r2, #0]
 8004b00:	bf5c      	itt	pl
 8004b02:	6013      	strpl	r3, [r2, #0]
 8004b04:	2002      	movpl	r0, #2
 8004b06:	4770      	bx	lr
 8004b08:	b299      	uxth	r1, r3
 8004b0a:	b909      	cbnz	r1, 8004b10 <__lo0bits+0x2a>
 8004b0c:	0c1b      	lsrs	r3, r3, #16
 8004b0e:	2010      	movs	r0, #16
 8004b10:	b2d9      	uxtb	r1, r3
 8004b12:	b909      	cbnz	r1, 8004b18 <__lo0bits+0x32>
 8004b14:	3008      	adds	r0, #8
 8004b16:	0a1b      	lsrs	r3, r3, #8
 8004b18:	0719      	lsls	r1, r3, #28
 8004b1a:	bf04      	itt	eq
 8004b1c:	091b      	lsreq	r3, r3, #4
 8004b1e:	3004      	addeq	r0, #4
 8004b20:	0799      	lsls	r1, r3, #30
 8004b22:	bf04      	itt	eq
 8004b24:	089b      	lsreq	r3, r3, #2
 8004b26:	3002      	addeq	r0, #2
 8004b28:	07d9      	lsls	r1, r3, #31
 8004b2a:	d403      	bmi.n	8004b34 <__lo0bits+0x4e>
 8004b2c:	085b      	lsrs	r3, r3, #1
 8004b2e:	f100 0001 	add.w	r0, r0, #1
 8004b32:	d003      	beq.n	8004b3c <__lo0bits+0x56>
 8004b34:	6013      	str	r3, [r2, #0]
 8004b36:	4770      	bx	lr
 8004b38:	2000      	movs	r0, #0
 8004b3a:	4770      	bx	lr
 8004b3c:	2020      	movs	r0, #32
 8004b3e:	4770      	bx	lr

08004b40 <__i2b>:
 8004b40:	b510      	push	{r4, lr}
 8004b42:	460c      	mov	r4, r1
 8004b44:	2101      	movs	r1, #1
 8004b46:	f7ff ff07 	bl	8004958 <_Balloc>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	b928      	cbnz	r0, 8004b5a <__i2b+0x1a>
 8004b4e:	4b05      	ldr	r3, [pc, #20]	@ (8004b64 <__i2b+0x24>)
 8004b50:	4805      	ldr	r0, [pc, #20]	@ (8004b68 <__i2b+0x28>)
 8004b52:	f240 1145 	movw	r1, #325	@ 0x145
 8004b56:	f000 fcbd 	bl	80054d4 <__assert_func>
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	6144      	str	r4, [r0, #20]
 8004b5e:	6103      	str	r3, [r0, #16]
 8004b60:	bd10      	pop	{r4, pc}
 8004b62:	bf00      	nop
 8004b64:	08006784 	.word	0x08006784
 8004b68:	08006795 	.word	0x08006795

08004b6c <__multiply>:
 8004b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b70:	4614      	mov	r4, r2
 8004b72:	690a      	ldr	r2, [r1, #16]
 8004b74:	6923      	ldr	r3, [r4, #16]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	bfa8      	it	ge
 8004b7a:	4623      	movge	r3, r4
 8004b7c:	460f      	mov	r7, r1
 8004b7e:	bfa4      	itt	ge
 8004b80:	460c      	movge	r4, r1
 8004b82:	461f      	movge	r7, r3
 8004b84:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004b88:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8004b8c:	68a3      	ldr	r3, [r4, #8]
 8004b8e:	6861      	ldr	r1, [r4, #4]
 8004b90:	eb0a 0609 	add.w	r6, sl, r9
 8004b94:	42b3      	cmp	r3, r6
 8004b96:	b085      	sub	sp, #20
 8004b98:	bfb8      	it	lt
 8004b9a:	3101      	addlt	r1, #1
 8004b9c:	f7ff fedc 	bl	8004958 <_Balloc>
 8004ba0:	b930      	cbnz	r0, 8004bb0 <__multiply+0x44>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	4b44      	ldr	r3, [pc, #272]	@ (8004cb8 <__multiply+0x14c>)
 8004ba6:	4845      	ldr	r0, [pc, #276]	@ (8004cbc <__multiply+0x150>)
 8004ba8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004bac:	f000 fc92 	bl	80054d4 <__assert_func>
 8004bb0:	f100 0514 	add.w	r5, r0, #20
 8004bb4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004bb8:	462b      	mov	r3, r5
 8004bba:	2200      	movs	r2, #0
 8004bbc:	4543      	cmp	r3, r8
 8004bbe:	d321      	bcc.n	8004c04 <__multiply+0x98>
 8004bc0:	f107 0114 	add.w	r1, r7, #20
 8004bc4:	f104 0214 	add.w	r2, r4, #20
 8004bc8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8004bcc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8004bd0:	9302      	str	r3, [sp, #8]
 8004bd2:	1b13      	subs	r3, r2, r4
 8004bd4:	3b15      	subs	r3, #21
 8004bd6:	f023 0303 	bic.w	r3, r3, #3
 8004bda:	3304      	adds	r3, #4
 8004bdc:	f104 0715 	add.w	r7, r4, #21
 8004be0:	42ba      	cmp	r2, r7
 8004be2:	bf38      	it	cc
 8004be4:	2304      	movcc	r3, #4
 8004be6:	9301      	str	r3, [sp, #4]
 8004be8:	9b02      	ldr	r3, [sp, #8]
 8004bea:	9103      	str	r1, [sp, #12]
 8004bec:	428b      	cmp	r3, r1
 8004bee:	d80c      	bhi.n	8004c0a <__multiply+0x9e>
 8004bf0:	2e00      	cmp	r6, #0
 8004bf2:	dd03      	ble.n	8004bfc <__multiply+0x90>
 8004bf4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d05b      	beq.n	8004cb4 <__multiply+0x148>
 8004bfc:	6106      	str	r6, [r0, #16]
 8004bfe:	b005      	add	sp, #20
 8004c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c04:	f843 2b04 	str.w	r2, [r3], #4
 8004c08:	e7d8      	b.n	8004bbc <__multiply+0x50>
 8004c0a:	f8b1 a000 	ldrh.w	sl, [r1]
 8004c0e:	f1ba 0f00 	cmp.w	sl, #0
 8004c12:	d024      	beq.n	8004c5e <__multiply+0xf2>
 8004c14:	f104 0e14 	add.w	lr, r4, #20
 8004c18:	46a9      	mov	r9, r5
 8004c1a:	f04f 0c00 	mov.w	ip, #0
 8004c1e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8004c22:	f8d9 3000 	ldr.w	r3, [r9]
 8004c26:	fa1f fb87 	uxth.w	fp, r7
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	fb0a 330b 	mla	r3, sl, fp, r3
 8004c30:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8004c34:	f8d9 7000 	ldr.w	r7, [r9]
 8004c38:	4463      	add	r3, ip
 8004c3a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8004c3e:	fb0a c70b 	mla	r7, sl, fp, ip
 8004c42:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004c4c:	4572      	cmp	r2, lr
 8004c4e:	f849 3b04 	str.w	r3, [r9], #4
 8004c52:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8004c56:	d8e2      	bhi.n	8004c1e <__multiply+0xb2>
 8004c58:	9b01      	ldr	r3, [sp, #4]
 8004c5a:	f845 c003 	str.w	ip, [r5, r3]
 8004c5e:	9b03      	ldr	r3, [sp, #12]
 8004c60:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8004c64:	3104      	adds	r1, #4
 8004c66:	f1b9 0f00 	cmp.w	r9, #0
 8004c6a:	d021      	beq.n	8004cb0 <__multiply+0x144>
 8004c6c:	682b      	ldr	r3, [r5, #0]
 8004c6e:	f104 0c14 	add.w	ip, r4, #20
 8004c72:	46ae      	mov	lr, r5
 8004c74:	f04f 0a00 	mov.w	sl, #0
 8004c78:	f8bc b000 	ldrh.w	fp, [ip]
 8004c7c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8004c80:	fb09 770b 	mla	r7, r9, fp, r7
 8004c84:	4457      	add	r7, sl
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004c8c:	f84e 3b04 	str.w	r3, [lr], #4
 8004c90:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004c94:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004c98:	f8be 3000 	ldrh.w	r3, [lr]
 8004c9c:	fb09 330a 	mla	r3, r9, sl, r3
 8004ca0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8004ca4:	4562      	cmp	r2, ip
 8004ca6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004caa:	d8e5      	bhi.n	8004c78 <__multiply+0x10c>
 8004cac:	9f01      	ldr	r7, [sp, #4]
 8004cae:	51eb      	str	r3, [r5, r7]
 8004cb0:	3504      	adds	r5, #4
 8004cb2:	e799      	b.n	8004be8 <__multiply+0x7c>
 8004cb4:	3e01      	subs	r6, #1
 8004cb6:	e79b      	b.n	8004bf0 <__multiply+0x84>
 8004cb8:	08006784 	.word	0x08006784
 8004cbc:	08006795 	.word	0x08006795

08004cc0 <__pow5mult>:
 8004cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cc4:	4615      	mov	r5, r2
 8004cc6:	f012 0203 	ands.w	r2, r2, #3
 8004cca:	4607      	mov	r7, r0
 8004ccc:	460e      	mov	r6, r1
 8004cce:	d007      	beq.n	8004ce0 <__pow5mult+0x20>
 8004cd0:	4c25      	ldr	r4, [pc, #148]	@ (8004d68 <__pow5mult+0xa8>)
 8004cd2:	3a01      	subs	r2, #1
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004cda:	f7ff fe9f 	bl	8004a1c <__multadd>
 8004cde:	4606      	mov	r6, r0
 8004ce0:	10ad      	asrs	r5, r5, #2
 8004ce2:	d03d      	beq.n	8004d60 <__pow5mult+0xa0>
 8004ce4:	69fc      	ldr	r4, [r7, #28]
 8004ce6:	b97c      	cbnz	r4, 8004d08 <__pow5mult+0x48>
 8004ce8:	2010      	movs	r0, #16
 8004cea:	f7ff fd7f 	bl	80047ec <malloc>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	61f8      	str	r0, [r7, #28]
 8004cf2:	b928      	cbnz	r0, 8004d00 <__pow5mult+0x40>
 8004cf4:	4b1d      	ldr	r3, [pc, #116]	@ (8004d6c <__pow5mult+0xac>)
 8004cf6:	481e      	ldr	r0, [pc, #120]	@ (8004d70 <__pow5mult+0xb0>)
 8004cf8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8004cfc:	f000 fbea 	bl	80054d4 <__assert_func>
 8004d00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004d04:	6004      	str	r4, [r0, #0]
 8004d06:	60c4      	str	r4, [r0, #12]
 8004d08:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8004d0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004d10:	b94c      	cbnz	r4, 8004d26 <__pow5mult+0x66>
 8004d12:	f240 2171 	movw	r1, #625	@ 0x271
 8004d16:	4638      	mov	r0, r7
 8004d18:	f7ff ff12 	bl	8004b40 <__i2b>
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	f8c8 0008 	str.w	r0, [r8, #8]
 8004d22:	4604      	mov	r4, r0
 8004d24:	6003      	str	r3, [r0, #0]
 8004d26:	f04f 0900 	mov.w	r9, #0
 8004d2a:	07eb      	lsls	r3, r5, #31
 8004d2c:	d50a      	bpl.n	8004d44 <__pow5mult+0x84>
 8004d2e:	4631      	mov	r1, r6
 8004d30:	4622      	mov	r2, r4
 8004d32:	4638      	mov	r0, r7
 8004d34:	f7ff ff1a 	bl	8004b6c <__multiply>
 8004d38:	4631      	mov	r1, r6
 8004d3a:	4680      	mov	r8, r0
 8004d3c:	4638      	mov	r0, r7
 8004d3e:	f7ff fe4b 	bl	80049d8 <_Bfree>
 8004d42:	4646      	mov	r6, r8
 8004d44:	106d      	asrs	r5, r5, #1
 8004d46:	d00b      	beq.n	8004d60 <__pow5mult+0xa0>
 8004d48:	6820      	ldr	r0, [r4, #0]
 8004d4a:	b938      	cbnz	r0, 8004d5c <__pow5mult+0x9c>
 8004d4c:	4622      	mov	r2, r4
 8004d4e:	4621      	mov	r1, r4
 8004d50:	4638      	mov	r0, r7
 8004d52:	f7ff ff0b 	bl	8004b6c <__multiply>
 8004d56:	6020      	str	r0, [r4, #0]
 8004d58:	f8c0 9000 	str.w	r9, [r0]
 8004d5c:	4604      	mov	r4, r0
 8004d5e:	e7e4      	b.n	8004d2a <__pow5mult+0x6a>
 8004d60:	4630      	mov	r0, r6
 8004d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d66:	bf00      	nop
 8004d68:	080067f0 	.word	0x080067f0
 8004d6c:	08006715 	.word	0x08006715
 8004d70:	08006795 	.word	0x08006795

08004d74 <__lshift>:
 8004d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d78:	460c      	mov	r4, r1
 8004d7a:	6849      	ldr	r1, [r1, #4]
 8004d7c:	6923      	ldr	r3, [r4, #16]
 8004d7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004d82:	68a3      	ldr	r3, [r4, #8]
 8004d84:	4607      	mov	r7, r0
 8004d86:	4691      	mov	r9, r2
 8004d88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004d8c:	f108 0601 	add.w	r6, r8, #1
 8004d90:	42b3      	cmp	r3, r6
 8004d92:	db0b      	blt.n	8004dac <__lshift+0x38>
 8004d94:	4638      	mov	r0, r7
 8004d96:	f7ff fddf 	bl	8004958 <_Balloc>
 8004d9a:	4605      	mov	r5, r0
 8004d9c:	b948      	cbnz	r0, 8004db2 <__lshift+0x3e>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	4b28      	ldr	r3, [pc, #160]	@ (8004e44 <__lshift+0xd0>)
 8004da2:	4829      	ldr	r0, [pc, #164]	@ (8004e48 <__lshift+0xd4>)
 8004da4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8004da8:	f000 fb94 	bl	80054d4 <__assert_func>
 8004dac:	3101      	adds	r1, #1
 8004dae:	005b      	lsls	r3, r3, #1
 8004db0:	e7ee      	b.n	8004d90 <__lshift+0x1c>
 8004db2:	2300      	movs	r3, #0
 8004db4:	f100 0114 	add.w	r1, r0, #20
 8004db8:	f100 0210 	add.w	r2, r0, #16
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	4553      	cmp	r3, sl
 8004dc0:	db33      	blt.n	8004e2a <__lshift+0xb6>
 8004dc2:	6920      	ldr	r0, [r4, #16]
 8004dc4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004dc8:	f104 0314 	add.w	r3, r4, #20
 8004dcc:	f019 091f 	ands.w	r9, r9, #31
 8004dd0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004dd4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004dd8:	d02b      	beq.n	8004e32 <__lshift+0xbe>
 8004dda:	f1c9 0e20 	rsb	lr, r9, #32
 8004dde:	468a      	mov	sl, r1
 8004de0:	2200      	movs	r2, #0
 8004de2:	6818      	ldr	r0, [r3, #0]
 8004de4:	fa00 f009 	lsl.w	r0, r0, r9
 8004de8:	4310      	orrs	r0, r2
 8004dea:	f84a 0b04 	str.w	r0, [sl], #4
 8004dee:	f853 2b04 	ldr.w	r2, [r3], #4
 8004df2:	459c      	cmp	ip, r3
 8004df4:	fa22 f20e 	lsr.w	r2, r2, lr
 8004df8:	d8f3      	bhi.n	8004de2 <__lshift+0x6e>
 8004dfa:	ebac 0304 	sub.w	r3, ip, r4
 8004dfe:	3b15      	subs	r3, #21
 8004e00:	f023 0303 	bic.w	r3, r3, #3
 8004e04:	3304      	adds	r3, #4
 8004e06:	f104 0015 	add.w	r0, r4, #21
 8004e0a:	4584      	cmp	ip, r0
 8004e0c:	bf38      	it	cc
 8004e0e:	2304      	movcc	r3, #4
 8004e10:	50ca      	str	r2, [r1, r3]
 8004e12:	b10a      	cbz	r2, 8004e18 <__lshift+0xa4>
 8004e14:	f108 0602 	add.w	r6, r8, #2
 8004e18:	3e01      	subs	r6, #1
 8004e1a:	4638      	mov	r0, r7
 8004e1c:	612e      	str	r6, [r5, #16]
 8004e1e:	4621      	mov	r1, r4
 8004e20:	f7ff fdda 	bl	80049d8 <_Bfree>
 8004e24:	4628      	mov	r0, r5
 8004e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e2a:	f842 0f04 	str.w	r0, [r2, #4]!
 8004e2e:	3301      	adds	r3, #1
 8004e30:	e7c5      	b.n	8004dbe <__lshift+0x4a>
 8004e32:	3904      	subs	r1, #4
 8004e34:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e38:	f841 2f04 	str.w	r2, [r1, #4]!
 8004e3c:	459c      	cmp	ip, r3
 8004e3e:	d8f9      	bhi.n	8004e34 <__lshift+0xc0>
 8004e40:	e7ea      	b.n	8004e18 <__lshift+0xa4>
 8004e42:	bf00      	nop
 8004e44:	08006784 	.word	0x08006784
 8004e48:	08006795 	.word	0x08006795

08004e4c <__mcmp>:
 8004e4c:	690a      	ldr	r2, [r1, #16]
 8004e4e:	4603      	mov	r3, r0
 8004e50:	6900      	ldr	r0, [r0, #16]
 8004e52:	1a80      	subs	r0, r0, r2
 8004e54:	b530      	push	{r4, r5, lr}
 8004e56:	d10e      	bne.n	8004e76 <__mcmp+0x2a>
 8004e58:	3314      	adds	r3, #20
 8004e5a:	3114      	adds	r1, #20
 8004e5c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004e60:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004e64:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004e68:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004e6c:	4295      	cmp	r5, r2
 8004e6e:	d003      	beq.n	8004e78 <__mcmp+0x2c>
 8004e70:	d205      	bcs.n	8004e7e <__mcmp+0x32>
 8004e72:	f04f 30ff 	mov.w	r0, #4294967295
 8004e76:	bd30      	pop	{r4, r5, pc}
 8004e78:	42a3      	cmp	r3, r4
 8004e7a:	d3f3      	bcc.n	8004e64 <__mcmp+0x18>
 8004e7c:	e7fb      	b.n	8004e76 <__mcmp+0x2a>
 8004e7e:	2001      	movs	r0, #1
 8004e80:	e7f9      	b.n	8004e76 <__mcmp+0x2a>
	...

08004e84 <__mdiff>:
 8004e84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e88:	4689      	mov	r9, r1
 8004e8a:	4606      	mov	r6, r0
 8004e8c:	4611      	mov	r1, r2
 8004e8e:	4648      	mov	r0, r9
 8004e90:	4614      	mov	r4, r2
 8004e92:	f7ff ffdb 	bl	8004e4c <__mcmp>
 8004e96:	1e05      	subs	r5, r0, #0
 8004e98:	d112      	bne.n	8004ec0 <__mdiff+0x3c>
 8004e9a:	4629      	mov	r1, r5
 8004e9c:	4630      	mov	r0, r6
 8004e9e:	f7ff fd5b 	bl	8004958 <_Balloc>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	b928      	cbnz	r0, 8004eb2 <__mdiff+0x2e>
 8004ea6:	4b3f      	ldr	r3, [pc, #252]	@ (8004fa4 <__mdiff+0x120>)
 8004ea8:	f240 2137 	movw	r1, #567	@ 0x237
 8004eac:	483e      	ldr	r0, [pc, #248]	@ (8004fa8 <__mdiff+0x124>)
 8004eae:	f000 fb11 	bl	80054d4 <__assert_func>
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004eb8:	4610      	mov	r0, r2
 8004eba:	b003      	add	sp, #12
 8004ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ec0:	bfbc      	itt	lt
 8004ec2:	464b      	movlt	r3, r9
 8004ec4:	46a1      	movlt	r9, r4
 8004ec6:	4630      	mov	r0, r6
 8004ec8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004ecc:	bfba      	itte	lt
 8004ece:	461c      	movlt	r4, r3
 8004ed0:	2501      	movlt	r5, #1
 8004ed2:	2500      	movge	r5, #0
 8004ed4:	f7ff fd40 	bl	8004958 <_Balloc>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	b918      	cbnz	r0, 8004ee4 <__mdiff+0x60>
 8004edc:	4b31      	ldr	r3, [pc, #196]	@ (8004fa4 <__mdiff+0x120>)
 8004ede:	f240 2145 	movw	r1, #581	@ 0x245
 8004ee2:	e7e3      	b.n	8004eac <__mdiff+0x28>
 8004ee4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004ee8:	6926      	ldr	r6, [r4, #16]
 8004eea:	60c5      	str	r5, [r0, #12]
 8004eec:	f109 0310 	add.w	r3, r9, #16
 8004ef0:	f109 0514 	add.w	r5, r9, #20
 8004ef4:	f104 0e14 	add.w	lr, r4, #20
 8004ef8:	f100 0b14 	add.w	fp, r0, #20
 8004efc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8004f00:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8004f04:	9301      	str	r3, [sp, #4]
 8004f06:	46d9      	mov	r9, fp
 8004f08:	f04f 0c00 	mov.w	ip, #0
 8004f0c:	9b01      	ldr	r3, [sp, #4]
 8004f0e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8004f12:	f853 af04 	ldr.w	sl, [r3, #4]!
 8004f16:	9301      	str	r3, [sp, #4]
 8004f18:	fa1f f38a 	uxth.w	r3, sl
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	b283      	uxth	r3, r0
 8004f20:	1acb      	subs	r3, r1, r3
 8004f22:	0c00      	lsrs	r0, r0, #16
 8004f24:	4463      	add	r3, ip
 8004f26:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8004f2a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004f34:	4576      	cmp	r6, lr
 8004f36:	f849 3b04 	str.w	r3, [r9], #4
 8004f3a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004f3e:	d8e5      	bhi.n	8004f0c <__mdiff+0x88>
 8004f40:	1b33      	subs	r3, r6, r4
 8004f42:	3b15      	subs	r3, #21
 8004f44:	f023 0303 	bic.w	r3, r3, #3
 8004f48:	3415      	adds	r4, #21
 8004f4a:	3304      	adds	r3, #4
 8004f4c:	42a6      	cmp	r6, r4
 8004f4e:	bf38      	it	cc
 8004f50:	2304      	movcc	r3, #4
 8004f52:	441d      	add	r5, r3
 8004f54:	445b      	add	r3, fp
 8004f56:	461e      	mov	r6, r3
 8004f58:	462c      	mov	r4, r5
 8004f5a:	4544      	cmp	r4, r8
 8004f5c:	d30e      	bcc.n	8004f7c <__mdiff+0xf8>
 8004f5e:	f108 0103 	add.w	r1, r8, #3
 8004f62:	1b49      	subs	r1, r1, r5
 8004f64:	f021 0103 	bic.w	r1, r1, #3
 8004f68:	3d03      	subs	r5, #3
 8004f6a:	45a8      	cmp	r8, r5
 8004f6c:	bf38      	it	cc
 8004f6e:	2100      	movcc	r1, #0
 8004f70:	440b      	add	r3, r1
 8004f72:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004f76:	b191      	cbz	r1, 8004f9e <__mdiff+0x11a>
 8004f78:	6117      	str	r7, [r2, #16]
 8004f7a:	e79d      	b.n	8004eb8 <__mdiff+0x34>
 8004f7c:	f854 1b04 	ldr.w	r1, [r4], #4
 8004f80:	46e6      	mov	lr, ip
 8004f82:	0c08      	lsrs	r0, r1, #16
 8004f84:	fa1c fc81 	uxtah	ip, ip, r1
 8004f88:	4471      	add	r1, lr
 8004f8a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8004f8e:	b289      	uxth	r1, r1
 8004f90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004f94:	f846 1b04 	str.w	r1, [r6], #4
 8004f98:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004f9c:	e7dd      	b.n	8004f5a <__mdiff+0xd6>
 8004f9e:	3f01      	subs	r7, #1
 8004fa0:	e7e7      	b.n	8004f72 <__mdiff+0xee>
 8004fa2:	bf00      	nop
 8004fa4:	08006784 	.word	0x08006784
 8004fa8:	08006795 	.word	0x08006795

08004fac <__d2b>:
 8004fac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004fb0:	460f      	mov	r7, r1
 8004fb2:	2101      	movs	r1, #1
 8004fb4:	ec59 8b10 	vmov	r8, r9, d0
 8004fb8:	4616      	mov	r6, r2
 8004fba:	f7ff fccd 	bl	8004958 <_Balloc>
 8004fbe:	4604      	mov	r4, r0
 8004fc0:	b930      	cbnz	r0, 8004fd0 <__d2b+0x24>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	4b23      	ldr	r3, [pc, #140]	@ (8005054 <__d2b+0xa8>)
 8004fc6:	4824      	ldr	r0, [pc, #144]	@ (8005058 <__d2b+0xac>)
 8004fc8:	f240 310f 	movw	r1, #783	@ 0x30f
 8004fcc:	f000 fa82 	bl	80054d4 <__assert_func>
 8004fd0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004fd4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004fd8:	b10d      	cbz	r5, 8004fde <__d2b+0x32>
 8004fda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004fde:	9301      	str	r3, [sp, #4]
 8004fe0:	f1b8 0300 	subs.w	r3, r8, #0
 8004fe4:	d023      	beq.n	800502e <__d2b+0x82>
 8004fe6:	4668      	mov	r0, sp
 8004fe8:	9300      	str	r3, [sp, #0]
 8004fea:	f7ff fd7c 	bl	8004ae6 <__lo0bits>
 8004fee:	e9dd 1200 	ldrd	r1, r2, [sp]
 8004ff2:	b1d0      	cbz	r0, 800502a <__d2b+0x7e>
 8004ff4:	f1c0 0320 	rsb	r3, r0, #32
 8004ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffc:	430b      	orrs	r3, r1
 8004ffe:	40c2      	lsrs	r2, r0
 8005000:	6163      	str	r3, [r4, #20]
 8005002:	9201      	str	r2, [sp, #4]
 8005004:	9b01      	ldr	r3, [sp, #4]
 8005006:	61a3      	str	r3, [r4, #24]
 8005008:	2b00      	cmp	r3, #0
 800500a:	bf0c      	ite	eq
 800500c:	2201      	moveq	r2, #1
 800500e:	2202      	movne	r2, #2
 8005010:	6122      	str	r2, [r4, #16]
 8005012:	b1a5      	cbz	r5, 800503e <__d2b+0x92>
 8005014:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005018:	4405      	add	r5, r0
 800501a:	603d      	str	r5, [r7, #0]
 800501c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005020:	6030      	str	r0, [r6, #0]
 8005022:	4620      	mov	r0, r4
 8005024:	b003      	add	sp, #12
 8005026:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800502a:	6161      	str	r1, [r4, #20]
 800502c:	e7ea      	b.n	8005004 <__d2b+0x58>
 800502e:	a801      	add	r0, sp, #4
 8005030:	f7ff fd59 	bl	8004ae6 <__lo0bits>
 8005034:	9b01      	ldr	r3, [sp, #4]
 8005036:	6163      	str	r3, [r4, #20]
 8005038:	3020      	adds	r0, #32
 800503a:	2201      	movs	r2, #1
 800503c:	e7e8      	b.n	8005010 <__d2b+0x64>
 800503e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005042:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005046:	6038      	str	r0, [r7, #0]
 8005048:	6918      	ldr	r0, [r3, #16]
 800504a:	f7ff fd2d 	bl	8004aa8 <__hi0bits>
 800504e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005052:	e7e5      	b.n	8005020 <__d2b+0x74>
 8005054:	08006784 	.word	0x08006784
 8005058:	08006795 	.word	0x08006795

0800505c <__ssputs_r>:
 800505c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005060:	688e      	ldr	r6, [r1, #8]
 8005062:	461f      	mov	r7, r3
 8005064:	42be      	cmp	r6, r7
 8005066:	680b      	ldr	r3, [r1, #0]
 8005068:	4682      	mov	sl, r0
 800506a:	460c      	mov	r4, r1
 800506c:	4690      	mov	r8, r2
 800506e:	d82d      	bhi.n	80050cc <__ssputs_r+0x70>
 8005070:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005074:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005078:	d026      	beq.n	80050c8 <__ssputs_r+0x6c>
 800507a:	6965      	ldr	r5, [r4, #20]
 800507c:	6909      	ldr	r1, [r1, #16]
 800507e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005082:	eba3 0901 	sub.w	r9, r3, r1
 8005086:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800508a:	1c7b      	adds	r3, r7, #1
 800508c:	444b      	add	r3, r9
 800508e:	106d      	asrs	r5, r5, #1
 8005090:	429d      	cmp	r5, r3
 8005092:	bf38      	it	cc
 8005094:	461d      	movcc	r5, r3
 8005096:	0553      	lsls	r3, r2, #21
 8005098:	d527      	bpl.n	80050ea <__ssputs_r+0x8e>
 800509a:	4629      	mov	r1, r5
 800509c:	f7ff fbd0 	bl	8004840 <_malloc_r>
 80050a0:	4606      	mov	r6, r0
 80050a2:	b360      	cbz	r0, 80050fe <__ssputs_r+0xa2>
 80050a4:	6921      	ldr	r1, [r4, #16]
 80050a6:	464a      	mov	r2, r9
 80050a8:	f000 fa06 	bl	80054b8 <memcpy>
 80050ac:	89a3      	ldrh	r3, [r4, #12]
 80050ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80050b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050b6:	81a3      	strh	r3, [r4, #12]
 80050b8:	6126      	str	r6, [r4, #16]
 80050ba:	6165      	str	r5, [r4, #20]
 80050bc:	444e      	add	r6, r9
 80050be:	eba5 0509 	sub.w	r5, r5, r9
 80050c2:	6026      	str	r6, [r4, #0]
 80050c4:	60a5      	str	r5, [r4, #8]
 80050c6:	463e      	mov	r6, r7
 80050c8:	42be      	cmp	r6, r7
 80050ca:	d900      	bls.n	80050ce <__ssputs_r+0x72>
 80050cc:	463e      	mov	r6, r7
 80050ce:	6820      	ldr	r0, [r4, #0]
 80050d0:	4632      	mov	r2, r6
 80050d2:	4641      	mov	r1, r8
 80050d4:	f000 f9c6 	bl	8005464 <memmove>
 80050d8:	68a3      	ldr	r3, [r4, #8]
 80050da:	1b9b      	subs	r3, r3, r6
 80050dc:	60a3      	str	r3, [r4, #8]
 80050de:	6823      	ldr	r3, [r4, #0]
 80050e0:	4433      	add	r3, r6
 80050e2:	6023      	str	r3, [r4, #0]
 80050e4:	2000      	movs	r0, #0
 80050e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050ea:	462a      	mov	r2, r5
 80050ec:	f000 fa36 	bl	800555c <_realloc_r>
 80050f0:	4606      	mov	r6, r0
 80050f2:	2800      	cmp	r0, #0
 80050f4:	d1e0      	bne.n	80050b8 <__ssputs_r+0x5c>
 80050f6:	6921      	ldr	r1, [r4, #16]
 80050f8:	4650      	mov	r0, sl
 80050fa:	f7ff fb2d 	bl	8004758 <_free_r>
 80050fe:	230c      	movs	r3, #12
 8005100:	f8ca 3000 	str.w	r3, [sl]
 8005104:	89a3      	ldrh	r3, [r4, #12]
 8005106:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800510a:	81a3      	strh	r3, [r4, #12]
 800510c:	f04f 30ff 	mov.w	r0, #4294967295
 8005110:	e7e9      	b.n	80050e6 <__ssputs_r+0x8a>
	...

08005114 <_svfiprintf_r>:
 8005114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005118:	4698      	mov	r8, r3
 800511a:	898b      	ldrh	r3, [r1, #12]
 800511c:	061b      	lsls	r3, r3, #24
 800511e:	b09d      	sub	sp, #116	@ 0x74
 8005120:	4607      	mov	r7, r0
 8005122:	460d      	mov	r5, r1
 8005124:	4614      	mov	r4, r2
 8005126:	d510      	bpl.n	800514a <_svfiprintf_r+0x36>
 8005128:	690b      	ldr	r3, [r1, #16]
 800512a:	b973      	cbnz	r3, 800514a <_svfiprintf_r+0x36>
 800512c:	2140      	movs	r1, #64	@ 0x40
 800512e:	f7ff fb87 	bl	8004840 <_malloc_r>
 8005132:	6028      	str	r0, [r5, #0]
 8005134:	6128      	str	r0, [r5, #16]
 8005136:	b930      	cbnz	r0, 8005146 <_svfiprintf_r+0x32>
 8005138:	230c      	movs	r3, #12
 800513a:	603b      	str	r3, [r7, #0]
 800513c:	f04f 30ff 	mov.w	r0, #4294967295
 8005140:	b01d      	add	sp, #116	@ 0x74
 8005142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005146:	2340      	movs	r3, #64	@ 0x40
 8005148:	616b      	str	r3, [r5, #20]
 800514a:	2300      	movs	r3, #0
 800514c:	9309      	str	r3, [sp, #36]	@ 0x24
 800514e:	2320      	movs	r3, #32
 8005150:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005154:	f8cd 800c 	str.w	r8, [sp, #12]
 8005158:	2330      	movs	r3, #48	@ 0x30
 800515a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80052f8 <_svfiprintf_r+0x1e4>
 800515e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005162:	f04f 0901 	mov.w	r9, #1
 8005166:	4623      	mov	r3, r4
 8005168:	469a      	mov	sl, r3
 800516a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800516e:	b10a      	cbz	r2, 8005174 <_svfiprintf_r+0x60>
 8005170:	2a25      	cmp	r2, #37	@ 0x25
 8005172:	d1f9      	bne.n	8005168 <_svfiprintf_r+0x54>
 8005174:	ebba 0b04 	subs.w	fp, sl, r4
 8005178:	d00b      	beq.n	8005192 <_svfiprintf_r+0x7e>
 800517a:	465b      	mov	r3, fp
 800517c:	4622      	mov	r2, r4
 800517e:	4629      	mov	r1, r5
 8005180:	4638      	mov	r0, r7
 8005182:	f7ff ff6b 	bl	800505c <__ssputs_r>
 8005186:	3001      	adds	r0, #1
 8005188:	f000 80a7 	beq.w	80052da <_svfiprintf_r+0x1c6>
 800518c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800518e:	445a      	add	r2, fp
 8005190:	9209      	str	r2, [sp, #36]	@ 0x24
 8005192:	f89a 3000 	ldrb.w	r3, [sl]
 8005196:	2b00      	cmp	r3, #0
 8005198:	f000 809f 	beq.w	80052da <_svfiprintf_r+0x1c6>
 800519c:	2300      	movs	r3, #0
 800519e:	f04f 32ff 	mov.w	r2, #4294967295
 80051a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051a6:	f10a 0a01 	add.w	sl, sl, #1
 80051aa:	9304      	str	r3, [sp, #16]
 80051ac:	9307      	str	r3, [sp, #28]
 80051ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80051b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80051b4:	4654      	mov	r4, sl
 80051b6:	2205      	movs	r2, #5
 80051b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051bc:	484e      	ldr	r0, [pc, #312]	@ (80052f8 <_svfiprintf_r+0x1e4>)
 80051be:	f7fb f80f 	bl	80001e0 <memchr>
 80051c2:	9a04      	ldr	r2, [sp, #16]
 80051c4:	b9d8      	cbnz	r0, 80051fe <_svfiprintf_r+0xea>
 80051c6:	06d0      	lsls	r0, r2, #27
 80051c8:	bf44      	itt	mi
 80051ca:	2320      	movmi	r3, #32
 80051cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80051d0:	0711      	lsls	r1, r2, #28
 80051d2:	bf44      	itt	mi
 80051d4:	232b      	movmi	r3, #43	@ 0x2b
 80051d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80051da:	f89a 3000 	ldrb.w	r3, [sl]
 80051de:	2b2a      	cmp	r3, #42	@ 0x2a
 80051e0:	d015      	beq.n	800520e <_svfiprintf_r+0xfa>
 80051e2:	9a07      	ldr	r2, [sp, #28]
 80051e4:	4654      	mov	r4, sl
 80051e6:	2000      	movs	r0, #0
 80051e8:	f04f 0c0a 	mov.w	ip, #10
 80051ec:	4621      	mov	r1, r4
 80051ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051f2:	3b30      	subs	r3, #48	@ 0x30
 80051f4:	2b09      	cmp	r3, #9
 80051f6:	d94b      	bls.n	8005290 <_svfiprintf_r+0x17c>
 80051f8:	b1b0      	cbz	r0, 8005228 <_svfiprintf_r+0x114>
 80051fa:	9207      	str	r2, [sp, #28]
 80051fc:	e014      	b.n	8005228 <_svfiprintf_r+0x114>
 80051fe:	eba0 0308 	sub.w	r3, r0, r8
 8005202:	fa09 f303 	lsl.w	r3, r9, r3
 8005206:	4313      	orrs	r3, r2
 8005208:	9304      	str	r3, [sp, #16]
 800520a:	46a2      	mov	sl, r4
 800520c:	e7d2      	b.n	80051b4 <_svfiprintf_r+0xa0>
 800520e:	9b03      	ldr	r3, [sp, #12]
 8005210:	1d19      	adds	r1, r3, #4
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	9103      	str	r1, [sp, #12]
 8005216:	2b00      	cmp	r3, #0
 8005218:	bfbb      	ittet	lt
 800521a:	425b      	neglt	r3, r3
 800521c:	f042 0202 	orrlt.w	r2, r2, #2
 8005220:	9307      	strge	r3, [sp, #28]
 8005222:	9307      	strlt	r3, [sp, #28]
 8005224:	bfb8      	it	lt
 8005226:	9204      	strlt	r2, [sp, #16]
 8005228:	7823      	ldrb	r3, [r4, #0]
 800522a:	2b2e      	cmp	r3, #46	@ 0x2e
 800522c:	d10a      	bne.n	8005244 <_svfiprintf_r+0x130>
 800522e:	7863      	ldrb	r3, [r4, #1]
 8005230:	2b2a      	cmp	r3, #42	@ 0x2a
 8005232:	d132      	bne.n	800529a <_svfiprintf_r+0x186>
 8005234:	9b03      	ldr	r3, [sp, #12]
 8005236:	1d1a      	adds	r2, r3, #4
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	9203      	str	r2, [sp, #12]
 800523c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005240:	3402      	adds	r4, #2
 8005242:	9305      	str	r3, [sp, #20]
 8005244:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005308 <_svfiprintf_r+0x1f4>
 8005248:	7821      	ldrb	r1, [r4, #0]
 800524a:	2203      	movs	r2, #3
 800524c:	4650      	mov	r0, sl
 800524e:	f7fa ffc7 	bl	80001e0 <memchr>
 8005252:	b138      	cbz	r0, 8005264 <_svfiprintf_r+0x150>
 8005254:	9b04      	ldr	r3, [sp, #16]
 8005256:	eba0 000a 	sub.w	r0, r0, sl
 800525a:	2240      	movs	r2, #64	@ 0x40
 800525c:	4082      	lsls	r2, r0
 800525e:	4313      	orrs	r3, r2
 8005260:	3401      	adds	r4, #1
 8005262:	9304      	str	r3, [sp, #16]
 8005264:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005268:	4824      	ldr	r0, [pc, #144]	@ (80052fc <_svfiprintf_r+0x1e8>)
 800526a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800526e:	2206      	movs	r2, #6
 8005270:	f7fa ffb6 	bl	80001e0 <memchr>
 8005274:	2800      	cmp	r0, #0
 8005276:	d036      	beq.n	80052e6 <_svfiprintf_r+0x1d2>
 8005278:	4b21      	ldr	r3, [pc, #132]	@ (8005300 <_svfiprintf_r+0x1ec>)
 800527a:	bb1b      	cbnz	r3, 80052c4 <_svfiprintf_r+0x1b0>
 800527c:	9b03      	ldr	r3, [sp, #12]
 800527e:	3307      	adds	r3, #7
 8005280:	f023 0307 	bic.w	r3, r3, #7
 8005284:	3308      	adds	r3, #8
 8005286:	9303      	str	r3, [sp, #12]
 8005288:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800528a:	4433      	add	r3, r6
 800528c:	9309      	str	r3, [sp, #36]	@ 0x24
 800528e:	e76a      	b.n	8005166 <_svfiprintf_r+0x52>
 8005290:	fb0c 3202 	mla	r2, ip, r2, r3
 8005294:	460c      	mov	r4, r1
 8005296:	2001      	movs	r0, #1
 8005298:	e7a8      	b.n	80051ec <_svfiprintf_r+0xd8>
 800529a:	2300      	movs	r3, #0
 800529c:	3401      	adds	r4, #1
 800529e:	9305      	str	r3, [sp, #20]
 80052a0:	4619      	mov	r1, r3
 80052a2:	f04f 0c0a 	mov.w	ip, #10
 80052a6:	4620      	mov	r0, r4
 80052a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052ac:	3a30      	subs	r2, #48	@ 0x30
 80052ae:	2a09      	cmp	r2, #9
 80052b0:	d903      	bls.n	80052ba <_svfiprintf_r+0x1a6>
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d0c6      	beq.n	8005244 <_svfiprintf_r+0x130>
 80052b6:	9105      	str	r1, [sp, #20]
 80052b8:	e7c4      	b.n	8005244 <_svfiprintf_r+0x130>
 80052ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80052be:	4604      	mov	r4, r0
 80052c0:	2301      	movs	r3, #1
 80052c2:	e7f0      	b.n	80052a6 <_svfiprintf_r+0x192>
 80052c4:	ab03      	add	r3, sp, #12
 80052c6:	9300      	str	r3, [sp, #0]
 80052c8:	462a      	mov	r2, r5
 80052ca:	4b0e      	ldr	r3, [pc, #56]	@ (8005304 <_svfiprintf_r+0x1f0>)
 80052cc:	a904      	add	r1, sp, #16
 80052ce:	4638      	mov	r0, r7
 80052d0:	f7fd fe82 	bl	8002fd8 <_printf_float>
 80052d4:	1c42      	adds	r2, r0, #1
 80052d6:	4606      	mov	r6, r0
 80052d8:	d1d6      	bne.n	8005288 <_svfiprintf_r+0x174>
 80052da:	89ab      	ldrh	r3, [r5, #12]
 80052dc:	065b      	lsls	r3, r3, #25
 80052de:	f53f af2d 	bmi.w	800513c <_svfiprintf_r+0x28>
 80052e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80052e4:	e72c      	b.n	8005140 <_svfiprintf_r+0x2c>
 80052e6:	ab03      	add	r3, sp, #12
 80052e8:	9300      	str	r3, [sp, #0]
 80052ea:	462a      	mov	r2, r5
 80052ec:	4b05      	ldr	r3, [pc, #20]	@ (8005304 <_svfiprintf_r+0x1f0>)
 80052ee:	a904      	add	r1, sp, #16
 80052f0:	4638      	mov	r0, r7
 80052f2:	f7fe f909 	bl	8003508 <_printf_i>
 80052f6:	e7ed      	b.n	80052d4 <_svfiprintf_r+0x1c0>
 80052f8:	080068f0 	.word	0x080068f0
 80052fc:	080068fa 	.word	0x080068fa
 8005300:	08002fd9 	.word	0x08002fd9
 8005304:	0800505d 	.word	0x0800505d
 8005308:	080068f6 	.word	0x080068f6

0800530c <__sflush_r>:
 800530c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005314:	0716      	lsls	r6, r2, #28
 8005316:	4605      	mov	r5, r0
 8005318:	460c      	mov	r4, r1
 800531a:	d454      	bmi.n	80053c6 <__sflush_r+0xba>
 800531c:	684b      	ldr	r3, [r1, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	dc02      	bgt.n	8005328 <__sflush_r+0x1c>
 8005322:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005324:	2b00      	cmp	r3, #0
 8005326:	dd48      	ble.n	80053ba <__sflush_r+0xae>
 8005328:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800532a:	2e00      	cmp	r6, #0
 800532c:	d045      	beq.n	80053ba <__sflush_r+0xae>
 800532e:	2300      	movs	r3, #0
 8005330:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005334:	682f      	ldr	r7, [r5, #0]
 8005336:	6a21      	ldr	r1, [r4, #32]
 8005338:	602b      	str	r3, [r5, #0]
 800533a:	d030      	beq.n	800539e <__sflush_r+0x92>
 800533c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800533e:	89a3      	ldrh	r3, [r4, #12]
 8005340:	0759      	lsls	r1, r3, #29
 8005342:	d505      	bpl.n	8005350 <__sflush_r+0x44>
 8005344:	6863      	ldr	r3, [r4, #4]
 8005346:	1ad2      	subs	r2, r2, r3
 8005348:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800534a:	b10b      	cbz	r3, 8005350 <__sflush_r+0x44>
 800534c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800534e:	1ad2      	subs	r2, r2, r3
 8005350:	2300      	movs	r3, #0
 8005352:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005354:	6a21      	ldr	r1, [r4, #32]
 8005356:	4628      	mov	r0, r5
 8005358:	47b0      	blx	r6
 800535a:	1c43      	adds	r3, r0, #1
 800535c:	89a3      	ldrh	r3, [r4, #12]
 800535e:	d106      	bne.n	800536e <__sflush_r+0x62>
 8005360:	6829      	ldr	r1, [r5, #0]
 8005362:	291d      	cmp	r1, #29
 8005364:	d82b      	bhi.n	80053be <__sflush_r+0xb2>
 8005366:	4a2a      	ldr	r2, [pc, #168]	@ (8005410 <__sflush_r+0x104>)
 8005368:	410a      	asrs	r2, r1
 800536a:	07d6      	lsls	r6, r2, #31
 800536c:	d427      	bmi.n	80053be <__sflush_r+0xb2>
 800536e:	2200      	movs	r2, #0
 8005370:	6062      	str	r2, [r4, #4]
 8005372:	04d9      	lsls	r1, r3, #19
 8005374:	6922      	ldr	r2, [r4, #16]
 8005376:	6022      	str	r2, [r4, #0]
 8005378:	d504      	bpl.n	8005384 <__sflush_r+0x78>
 800537a:	1c42      	adds	r2, r0, #1
 800537c:	d101      	bne.n	8005382 <__sflush_r+0x76>
 800537e:	682b      	ldr	r3, [r5, #0]
 8005380:	b903      	cbnz	r3, 8005384 <__sflush_r+0x78>
 8005382:	6560      	str	r0, [r4, #84]	@ 0x54
 8005384:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005386:	602f      	str	r7, [r5, #0]
 8005388:	b1b9      	cbz	r1, 80053ba <__sflush_r+0xae>
 800538a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800538e:	4299      	cmp	r1, r3
 8005390:	d002      	beq.n	8005398 <__sflush_r+0x8c>
 8005392:	4628      	mov	r0, r5
 8005394:	f7ff f9e0 	bl	8004758 <_free_r>
 8005398:	2300      	movs	r3, #0
 800539a:	6363      	str	r3, [r4, #52]	@ 0x34
 800539c:	e00d      	b.n	80053ba <__sflush_r+0xae>
 800539e:	2301      	movs	r3, #1
 80053a0:	4628      	mov	r0, r5
 80053a2:	47b0      	blx	r6
 80053a4:	4602      	mov	r2, r0
 80053a6:	1c50      	adds	r0, r2, #1
 80053a8:	d1c9      	bne.n	800533e <__sflush_r+0x32>
 80053aa:	682b      	ldr	r3, [r5, #0]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d0c6      	beq.n	800533e <__sflush_r+0x32>
 80053b0:	2b1d      	cmp	r3, #29
 80053b2:	d001      	beq.n	80053b8 <__sflush_r+0xac>
 80053b4:	2b16      	cmp	r3, #22
 80053b6:	d11e      	bne.n	80053f6 <__sflush_r+0xea>
 80053b8:	602f      	str	r7, [r5, #0]
 80053ba:	2000      	movs	r0, #0
 80053bc:	e022      	b.n	8005404 <__sflush_r+0xf8>
 80053be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053c2:	b21b      	sxth	r3, r3
 80053c4:	e01b      	b.n	80053fe <__sflush_r+0xf2>
 80053c6:	690f      	ldr	r7, [r1, #16]
 80053c8:	2f00      	cmp	r7, #0
 80053ca:	d0f6      	beq.n	80053ba <__sflush_r+0xae>
 80053cc:	0793      	lsls	r3, r2, #30
 80053ce:	680e      	ldr	r6, [r1, #0]
 80053d0:	bf08      	it	eq
 80053d2:	694b      	ldreq	r3, [r1, #20]
 80053d4:	600f      	str	r7, [r1, #0]
 80053d6:	bf18      	it	ne
 80053d8:	2300      	movne	r3, #0
 80053da:	eba6 0807 	sub.w	r8, r6, r7
 80053de:	608b      	str	r3, [r1, #8]
 80053e0:	f1b8 0f00 	cmp.w	r8, #0
 80053e4:	dde9      	ble.n	80053ba <__sflush_r+0xae>
 80053e6:	6a21      	ldr	r1, [r4, #32]
 80053e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80053ea:	4643      	mov	r3, r8
 80053ec:	463a      	mov	r2, r7
 80053ee:	4628      	mov	r0, r5
 80053f0:	47b0      	blx	r6
 80053f2:	2800      	cmp	r0, #0
 80053f4:	dc08      	bgt.n	8005408 <__sflush_r+0xfc>
 80053f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053fe:	81a3      	strh	r3, [r4, #12]
 8005400:	f04f 30ff 	mov.w	r0, #4294967295
 8005404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005408:	4407      	add	r7, r0
 800540a:	eba8 0800 	sub.w	r8, r8, r0
 800540e:	e7e7      	b.n	80053e0 <__sflush_r+0xd4>
 8005410:	dfbffffe 	.word	0xdfbffffe

08005414 <_fflush_r>:
 8005414:	b538      	push	{r3, r4, r5, lr}
 8005416:	690b      	ldr	r3, [r1, #16]
 8005418:	4605      	mov	r5, r0
 800541a:	460c      	mov	r4, r1
 800541c:	b913      	cbnz	r3, 8005424 <_fflush_r+0x10>
 800541e:	2500      	movs	r5, #0
 8005420:	4628      	mov	r0, r5
 8005422:	bd38      	pop	{r3, r4, r5, pc}
 8005424:	b118      	cbz	r0, 800542e <_fflush_r+0x1a>
 8005426:	6a03      	ldr	r3, [r0, #32]
 8005428:	b90b      	cbnz	r3, 800542e <_fflush_r+0x1a>
 800542a:	f7fe fa19 	bl	8003860 <__sinit>
 800542e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d0f3      	beq.n	800541e <_fflush_r+0xa>
 8005436:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005438:	07d0      	lsls	r0, r2, #31
 800543a:	d404      	bmi.n	8005446 <_fflush_r+0x32>
 800543c:	0599      	lsls	r1, r3, #22
 800543e:	d402      	bmi.n	8005446 <_fflush_r+0x32>
 8005440:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005442:	f7fe fb38 	bl	8003ab6 <__retarget_lock_acquire_recursive>
 8005446:	4628      	mov	r0, r5
 8005448:	4621      	mov	r1, r4
 800544a:	f7ff ff5f 	bl	800530c <__sflush_r>
 800544e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005450:	07da      	lsls	r2, r3, #31
 8005452:	4605      	mov	r5, r0
 8005454:	d4e4      	bmi.n	8005420 <_fflush_r+0xc>
 8005456:	89a3      	ldrh	r3, [r4, #12]
 8005458:	059b      	lsls	r3, r3, #22
 800545a:	d4e1      	bmi.n	8005420 <_fflush_r+0xc>
 800545c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800545e:	f7fe fb2b 	bl	8003ab8 <__retarget_lock_release_recursive>
 8005462:	e7dd      	b.n	8005420 <_fflush_r+0xc>

08005464 <memmove>:
 8005464:	4288      	cmp	r0, r1
 8005466:	b510      	push	{r4, lr}
 8005468:	eb01 0402 	add.w	r4, r1, r2
 800546c:	d902      	bls.n	8005474 <memmove+0x10>
 800546e:	4284      	cmp	r4, r0
 8005470:	4623      	mov	r3, r4
 8005472:	d807      	bhi.n	8005484 <memmove+0x20>
 8005474:	1e43      	subs	r3, r0, #1
 8005476:	42a1      	cmp	r1, r4
 8005478:	d008      	beq.n	800548c <memmove+0x28>
 800547a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800547e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005482:	e7f8      	b.n	8005476 <memmove+0x12>
 8005484:	4402      	add	r2, r0
 8005486:	4601      	mov	r1, r0
 8005488:	428a      	cmp	r2, r1
 800548a:	d100      	bne.n	800548e <memmove+0x2a>
 800548c:	bd10      	pop	{r4, pc}
 800548e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005492:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005496:	e7f7      	b.n	8005488 <memmove+0x24>

08005498 <_sbrk_r>:
 8005498:	b538      	push	{r3, r4, r5, lr}
 800549a:	4d06      	ldr	r5, [pc, #24]	@ (80054b4 <_sbrk_r+0x1c>)
 800549c:	2300      	movs	r3, #0
 800549e:	4604      	mov	r4, r0
 80054a0:	4608      	mov	r0, r1
 80054a2:	602b      	str	r3, [r5, #0]
 80054a4:	f7fc fd9e 	bl	8001fe4 <_sbrk>
 80054a8:	1c43      	adds	r3, r0, #1
 80054aa:	d102      	bne.n	80054b2 <_sbrk_r+0x1a>
 80054ac:	682b      	ldr	r3, [r5, #0]
 80054ae:	b103      	cbz	r3, 80054b2 <_sbrk_r+0x1a>
 80054b0:	6023      	str	r3, [r4, #0]
 80054b2:	bd38      	pop	{r3, r4, r5, pc}
 80054b4:	2000034c 	.word	0x2000034c

080054b8 <memcpy>:
 80054b8:	440a      	add	r2, r1
 80054ba:	4291      	cmp	r1, r2
 80054bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80054c0:	d100      	bne.n	80054c4 <memcpy+0xc>
 80054c2:	4770      	bx	lr
 80054c4:	b510      	push	{r4, lr}
 80054c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054ce:	4291      	cmp	r1, r2
 80054d0:	d1f9      	bne.n	80054c6 <memcpy+0xe>
 80054d2:	bd10      	pop	{r4, pc}

080054d4 <__assert_func>:
 80054d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80054d6:	4614      	mov	r4, r2
 80054d8:	461a      	mov	r2, r3
 80054da:	4b09      	ldr	r3, [pc, #36]	@ (8005500 <__assert_func+0x2c>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4605      	mov	r5, r0
 80054e0:	68d8      	ldr	r0, [r3, #12]
 80054e2:	b954      	cbnz	r4, 80054fa <__assert_func+0x26>
 80054e4:	4b07      	ldr	r3, [pc, #28]	@ (8005504 <__assert_func+0x30>)
 80054e6:	461c      	mov	r4, r3
 80054e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80054ec:	9100      	str	r1, [sp, #0]
 80054ee:	462b      	mov	r3, r5
 80054f0:	4905      	ldr	r1, [pc, #20]	@ (8005508 <__assert_func+0x34>)
 80054f2:	f000 f86f 	bl	80055d4 <fiprintf>
 80054f6:	f000 f87f 	bl	80055f8 <abort>
 80054fa:	4b04      	ldr	r3, [pc, #16]	@ (800550c <__assert_func+0x38>)
 80054fc:	e7f4      	b.n	80054e8 <__assert_func+0x14>
 80054fe:	bf00      	nop
 8005500:	20000024 	.word	0x20000024
 8005504:	08006946 	.word	0x08006946
 8005508:	08006918 	.word	0x08006918
 800550c:	0800690b 	.word	0x0800690b

08005510 <_calloc_r>:
 8005510:	b570      	push	{r4, r5, r6, lr}
 8005512:	fba1 5402 	umull	r5, r4, r1, r2
 8005516:	b93c      	cbnz	r4, 8005528 <_calloc_r+0x18>
 8005518:	4629      	mov	r1, r5
 800551a:	f7ff f991 	bl	8004840 <_malloc_r>
 800551e:	4606      	mov	r6, r0
 8005520:	b928      	cbnz	r0, 800552e <_calloc_r+0x1e>
 8005522:	2600      	movs	r6, #0
 8005524:	4630      	mov	r0, r6
 8005526:	bd70      	pop	{r4, r5, r6, pc}
 8005528:	220c      	movs	r2, #12
 800552a:	6002      	str	r2, [r0, #0]
 800552c:	e7f9      	b.n	8005522 <_calloc_r+0x12>
 800552e:	462a      	mov	r2, r5
 8005530:	4621      	mov	r1, r4
 8005532:	f7fe fa42 	bl	80039ba <memset>
 8005536:	e7f5      	b.n	8005524 <_calloc_r+0x14>

08005538 <__ascii_mbtowc>:
 8005538:	b082      	sub	sp, #8
 800553a:	b901      	cbnz	r1, 800553e <__ascii_mbtowc+0x6>
 800553c:	a901      	add	r1, sp, #4
 800553e:	b142      	cbz	r2, 8005552 <__ascii_mbtowc+0x1a>
 8005540:	b14b      	cbz	r3, 8005556 <__ascii_mbtowc+0x1e>
 8005542:	7813      	ldrb	r3, [r2, #0]
 8005544:	600b      	str	r3, [r1, #0]
 8005546:	7812      	ldrb	r2, [r2, #0]
 8005548:	1e10      	subs	r0, r2, #0
 800554a:	bf18      	it	ne
 800554c:	2001      	movne	r0, #1
 800554e:	b002      	add	sp, #8
 8005550:	4770      	bx	lr
 8005552:	4610      	mov	r0, r2
 8005554:	e7fb      	b.n	800554e <__ascii_mbtowc+0x16>
 8005556:	f06f 0001 	mvn.w	r0, #1
 800555a:	e7f8      	b.n	800554e <__ascii_mbtowc+0x16>

0800555c <_realloc_r>:
 800555c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005560:	4680      	mov	r8, r0
 8005562:	4615      	mov	r5, r2
 8005564:	460c      	mov	r4, r1
 8005566:	b921      	cbnz	r1, 8005572 <_realloc_r+0x16>
 8005568:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800556c:	4611      	mov	r1, r2
 800556e:	f7ff b967 	b.w	8004840 <_malloc_r>
 8005572:	b92a      	cbnz	r2, 8005580 <_realloc_r+0x24>
 8005574:	f7ff f8f0 	bl	8004758 <_free_r>
 8005578:	2400      	movs	r4, #0
 800557a:	4620      	mov	r0, r4
 800557c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005580:	f000 f841 	bl	8005606 <_malloc_usable_size_r>
 8005584:	4285      	cmp	r5, r0
 8005586:	4606      	mov	r6, r0
 8005588:	d802      	bhi.n	8005590 <_realloc_r+0x34>
 800558a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800558e:	d8f4      	bhi.n	800557a <_realloc_r+0x1e>
 8005590:	4629      	mov	r1, r5
 8005592:	4640      	mov	r0, r8
 8005594:	f7ff f954 	bl	8004840 <_malloc_r>
 8005598:	4607      	mov	r7, r0
 800559a:	2800      	cmp	r0, #0
 800559c:	d0ec      	beq.n	8005578 <_realloc_r+0x1c>
 800559e:	42b5      	cmp	r5, r6
 80055a0:	462a      	mov	r2, r5
 80055a2:	4621      	mov	r1, r4
 80055a4:	bf28      	it	cs
 80055a6:	4632      	movcs	r2, r6
 80055a8:	f7ff ff86 	bl	80054b8 <memcpy>
 80055ac:	4621      	mov	r1, r4
 80055ae:	4640      	mov	r0, r8
 80055b0:	f7ff f8d2 	bl	8004758 <_free_r>
 80055b4:	463c      	mov	r4, r7
 80055b6:	e7e0      	b.n	800557a <_realloc_r+0x1e>

080055b8 <__ascii_wctomb>:
 80055b8:	4603      	mov	r3, r0
 80055ba:	4608      	mov	r0, r1
 80055bc:	b141      	cbz	r1, 80055d0 <__ascii_wctomb+0x18>
 80055be:	2aff      	cmp	r2, #255	@ 0xff
 80055c0:	d904      	bls.n	80055cc <__ascii_wctomb+0x14>
 80055c2:	228a      	movs	r2, #138	@ 0x8a
 80055c4:	601a      	str	r2, [r3, #0]
 80055c6:	f04f 30ff 	mov.w	r0, #4294967295
 80055ca:	4770      	bx	lr
 80055cc:	700a      	strb	r2, [r1, #0]
 80055ce:	2001      	movs	r0, #1
 80055d0:	4770      	bx	lr
	...

080055d4 <fiprintf>:
 80055d4:	b40e      	push	{r1, r2, r3}
 80055d6:	b503      	push	{r0, r1, lr}
 80055d8:	4601      	mov	r1, r0
 80055da:	ab03      	add	r3, sp, #12
 80055dc:	4805      	ldr	r0, [pc, #20]	@ (80055f4 <fiprintf+0x20>)
 80055de:	f853 2b04 	ldr.w	r2, [r3], #4
 80055e2:	6800      	ldr	r0, [r0, #0]
 80055e4:	9301      	str	r3, [sp, #4]
 80055e6:	f000 f83f 	bl	8005668 <_vfiprintf_r>
 80055ea:	b002      	add	sp, #8
 80055ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80055f0:	b003      	add	sp, #12
 80055f2:	4770      	bx	lr
 80055f4:	20000024 	.word	0x20000024

080055f8 <abort>:
 80055f8:	b508      	push	{r3, lr}
 80055fa:	2006      	movs	r0, #6
 80055fc:	f000 fa08 	bl	8005a10 <raise>
 8005600:	2001      	movs	r0, #1
 8005602:	f7fc fc77 	bl	8001ef4 <_exit>

08005606 <_malloc_usable_size_r>:
 8005606:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800560a:	1f18      	subs	r0, r3, #4
 800560c:	2b00      	cmp	r3, #0
 800560e:	bfbc      	itt	lt
 8005610:	580b      	ldrlt	r3, [r1, r0]
 8005612:	18c0      	addlt	r0, r0, r3
 8005614:	4770      	bx	lr

08005616 <__sfputc_r>:
 8005616:	6893      	ldr	r3, [r2, #8]
 8005618:	3b01      	subs	r3, #1
 800561a:	2b00      	cmp	r3, #0
 800561c:	b410      	push	{r4}
 800561e:	6093      	str	r3, [r2, #8]
 8005620:	da08      	bge.n	8005634 <__sfputc_r+0x1e>
 8005622:	6994      	ldr	r4, [r2, #24]
 8005624:	42a3      	cmp	r3, r4
 8005626:	db01      	blt.n	800562c <__sfputc_r+0x16>
 8005628:	290a      	cmp	r1, #10
 800562a:	d103      	bne.n	8005634 <__sfputc_r+0x1e>
 800562c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005630:	f000 b932 	b.w	8005898 <__swbuf_r>
 8005634:	6813      	ldr	r3, [r2, #0]
 8005636:	1c58      	adds	r0, r3, #1
 8005638:	6010      	str	r0, [r2, #0]
 800563a:	7019      	strb	r1, [r3, #0]
 800563c:	4608      	mov	r0, r1
 800563e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005642:	4770      	bx	lr

08005644 <__sfputs_r>:
 8005644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005646:	4606      	mov	r6, r0
 8005648:	460f      	mov	r7, r1
 800564a:	4614      	mov	r4, r2
 800564c:	18d5      	adds	r5, r2, r3
 800564e:	42ac      	cmp	r4, r5
 8005650:	d101      	bne.n	8005656 <__sfputs_r+0x12>
 8005652:	2000      	movs	r0, #0
 8005654:	e007      	b.n	8005666 <__sfputs_r+0x22>
 8005656:	f814 1b01 	ldrb.w	r1, [r4], #1
 800565a:	463a      	mov	r2, r7
 800565c:	4630      	mov	r0, r6
 800565e:	f7ff ffda 	bl	8005616 <__sfputc_r>
 8005662:	1c43      	adds	r3, r0, #1
 8005664:	d1f3      	bne.n	800564e <__sfputs_r+0xa>
 8005666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005668 <_vfiprintf_r>:
 8005668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800566c:	460d      	mov	r5, r1
 800566e:	b09d      	sub	sp, #116	@ 0x74
 8005670:	4614      	mov	r4, r2
 8005672:	4698      	mov	r8, r3
 8005674:	4606      	mov	r6, r0
 8005676:	b118      	cbz	r0, 8005680 <_vfiprintf_r+0x18>
 8005678:	6a03      	ldr	r3, [r0, #32]
 800567a:	b90b      	cbnz	r3, 8005680 <_vfiprintf_r+0x18>
 800567c:	f7fe f8f0 	bl	8003860 <__sinit>
 8005680:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005682:	07d9      	lsls	r1, r3, #31
 8005684:	d405      	bmi.n	8005692 <_vfiprintf_r+0x2a>
 8005686:	89ab      	ldrh	r3, [r5, #12]
 8005688:	059a      	lsls	r2, r3, #22
 800568a:	d402      	bmi.n	8005692 <_vfiprintf_r+0x2a>
 800568c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800568e:	f7fe fa12 	bl	8003ab6 <__retarget_lock_acquire_recursive>
 8005692:	89ab      	ldrh	r3, [r5, #12]
 8005694:	071b      	lsls	r3, r3, #28
 8005696:	d501      	bpl.n	800569c <_vfiprintf_r+0x34>
 8005698:	692b      	ldr	r3, [r5, #16]
 800569a:	b99b      	cbnz	r3, 80056c4 <_vfiprintf_r+0x5c>
 800569c:	4629      	mov	r1, r5
 800569e:	4630      	mov	r0, r6
 80056a0:	f000 f938 	bl	8005914 <__swsetup_r>
 80056a4:	b170      	cbz	r0, 80056c4 <_vfiprintf_r+0x5c>
 80056a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80056a8:	07dc      	lsls	r4, r3, #31
 80056aa:	d504      	bpl.n	80056b6 <_vfiprintf_r+0x4e>
 80056ac:	f04f 30ff 	mov.w	r0, #4294967295
 80056b0:	b01d      	add	sp, #116	@ 0x74
 80056b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056b6:	89ab      	ldrh	r3, [r5, #12]
 80056b8:	0598      	lsls	r0, r3, #22
 80056ba:	d4f7      	bmi.n	80056ac <_vfiprintf_r+0x44>
 80056bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80056be:	f7fe f9fb 	bl	8003ab8 <__retarget_lock_release_recursive>
 80056c2:	e7f3      	b.n	80056ac <_vfiprintf_r+0x44>
 80056c4:	2300      	movs	r3, #0
 80056c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80056c8:	2320      	movs	r3, #32
 80056ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80056ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80056d2:	2330      	movs	r3, #48	@ 0x30
 80056d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005884 <_vfiprintf_r+0x21c>
 80056d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80056dc:	f04f 0901 	mov.w	r9, #1
 80056e0:	4623      	mov	r3, r4
 80056e2:	469a      	mov	sl, r3
 80056e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056e8:	b10a      	cbz	r2, 80056ee <_vfiprintf_r+0x86>
 80056ea:	2a25      	cmp	r2, #37	@ 0x25
 80056ec:	d1f9      	bne.n	80056e2 <_vfiprintf_r+0x7a>
 80056ee:	ebba 0b04 	subs.w	fp, sl, r4
 80056f2:	d00b      	beq.n	800570c <_vfiprintf_r+0xa4>
 80056f4:	465b      	mov	r3, fp
 80056f6:	4622      	mov	r2, r4
 80056f8:	4629      	mov	r1, r5
 80056fa:	4630      	mov	r0, r6
 80056fc:	f7ff ffa2 	bl	8005644 <__sfputs_r>
 8005700:	3001      	adds	r0, #1
 8005702:	f000 80a7 	beq.w	8005854 <_vfiprintf_r+0x1ec>
 8005706:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005708:	445a      	add	r2, fp
 800570a:	9209      	str	r2, [sp, #36]	@ 0x24
 800570c:	f89a 3000 	ldrb.w	r3, [sl]
 8005710:	2b00      	cmp	r3, #0
 8005712:	f000 809f 	beq.w	8005854 <_vfiprintf_r+0x1ec>
 8005716:	2300      	movs	r3, #0
 8005718:	f04f 32ff 	mov.w	r2, #4294967295
 800571c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005720:	f10a 0a01 	add.w	sl, sl, #1
 8005724:	9304      	str	r3, [sp, #16]
 8005726:	9307      	str	r3, [sp, #28]
 8005728:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800572c:	931a      	str	r3, [sp, #104]	@ 0x68
 800572e:	4654      	mov	r4, sl
 8005730:	2205      	movs	r2, #5
 8005732:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005736:	4853      	ldr	r0, [pc, #332]	@ (8005884 <_vfiprintf_r+0x21c>)
 8005738:	f7fa fd52 	bl	80001e0 <memchr>
 800573c:	9a04      	ldr	r2, [sp, #16]
 800573e:	b9d8      	cbnz	r0, 8005778 <_vfiprintf_r+0x110>
 8005740:	06d1      	lsls	r1, r2, #27
 8005742:	bf44      	itt	mi
 8005744:	2320      	movmi	r3, #32
 8005746:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800574a:	0713      	lsls	r3, r2, #28
 800574c:	bf44      	itt	mi
 800574e:	232b      	movmi	r3, #43	@ 0x2b
 8005750:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005754:	f89a 3000 	ldrb.w	r3, [sl]
 8005758:	2b2a      	cmp	r3, #42	@ 0x2a
 800575a:	d015      	beq.n	8005788 <_vfiprintf_r+0x120>
 800575c:	9a07      	ldr	r2, [sp, #28]
 800575e:	4654      	mov	r4, sl
 8005760:	2000      	movs	r0, #0
 8005762:	f04f 0c0a 	mov.w	ip, #10
 8005766:	4621      	mov	r1, r4
 8005768:	f811 3b01 	ldrb.w	r3, [r1], #1
 800576c:	3b30      	subs	r3, #48	@ 0x30
 800576e:	2b09      	cmp	r3, #9
 8005770:	d94b      	bls.n	800580a <_vfiprintf_r+0x1a2>
 8005772:	b1b0      	cbz	r0, 80057a2 <_vfiprintf_r+0x13a>
 8005774:	9207      	str	r2, [sp, #28]
 8005776:	e014      	b.n	80057a2 <_vfiprintf_r+0x13a>
 8005778:	eba0 0308 	sub.w	r3, r0, r8
 800577c:	fa09 f303 	lsl.w	r3, r9, r3
 8005780:	4313      	orrs	r3, r2
 8005782:	9304      	str	r3, [sp, #16]
 8005784:	46a2      	mov	sl, r4
 8005786:	e7d2      	b.n	800572e <_vfiprintf_r+0xc6>
 8005788:	9b03      	ldr	r3, [sp, #12]
 800578a:	1d19      	adds	r1, r3, #4
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	9103      	str	r1, [sp, #12]
 8005790:	2b00      	cmp	r3, #0
 8005792:	bfbb      	ittet	lt
 8005794:	425b      	neglt	r3, r3
 8005796:	f042 0202 	orrlt.w	r2, r2, #2
 800579a:	9307      	strge	r3, [sp, #28]
 800579c:	9307      	strlt	r3, [sp, #28]
 800579e:	bfb8      	it	lt
 80057a0:	9204      	strlt	r2, [sp, #16]
 80057a2:	7823      	ldrb	r3, [r4, #0]
 80057a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80057a6:	d10a      	bne.n	80057be <_vfiprintf_r+0x156>
 80057a8:	7863      	ldrb	r3, [r4, #1]
 80057aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80057ac:	d132      	bne.n	8005814 <_vfiprintf_r+0x1ac>
 80057ae:	9b03      	ldr	r3, [sp, #12]
 80057b0:	1d1a      	adds	r2, r3, #4
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	9203      	str	r2, [sp, #12]
 80057b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80057ba:	3402      	adds	r4, #2
 80057bc:	9305      	str	r3, [sp, #20]
 80057be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005894 <_vfiprintf_r+0x22c>
 80057c2:	7821      	ldrb	r1, [r4, #0]
 80057c4:	2203      	movs	r2, #3
 80057c6:	4650      	mov	r0, sl
 80057c8:	f7fa fd0a 	bl	80001e0 <memchr>
 80057cc:	b138      	cbz	r0, 80057de <_vfiprintf_r+0x176>
 80057ce:	9b04      	ldr	r3, [sp, #16]
 80057d0:	eba0 000a 	sub.w	r0, r0, sl
 80057d4:	2240      	movs	r2, #64	@ 0x40
 80057d6:	4082      	lsls	r2, r0
 80057d8:	4313      	orrs	r3, r2
 80057da:	3401      	adds	r4, #1
 80057dc:	9304      	str	r3, [sp, #16]
 80057de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057e2:	4829      	ldr	r0, [pc, #164]	@ (8005888 <_vfiprintf_r+0x220>)
 80057e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80057e8:	2206      	movs	r2, #6
 80057ea:	f7fa fcf9 	bl	80001e0 <memchr>
 80057ee:	2800      	cmp	r0, #0
 80057f0:	d03f      	beq.n	8005872 <_vfiprintf_r+0x20a>
 80057f2:	4b26      	ldr	r3, [pc, #152]	@ (800588c <_vfiprintf_r+0x224>)
 80057f4:	bb1b      	cbnz	r3, 800583e <_vfiprintf_r+0x1d6>
 80057f6:	9b03      	ldr	r3, [sp, #12]
 80057f8:	3307      	adds	r3, #7
 80057fa:	f023 0307 	bic.w	r3, r3, #7
 80057fe:	3308      	adds	r3, #8
 8005800:	9303      	str	r3, [sp, #12]
 8005802:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005804:	443b      	add	r3, r7
 8005806:	9309      	str	r3, [sp, #36]	@ 0x24
 8005808:	e76a      	b.n	80056e0 <_vfiprintf_r+0x78>
 800580a:	fb0c 3202 	mla	r2, ip, r2, r3
 800580e:	460c      	mov	r4, r1
 8005810:	2001      	movs	r0, #1
 8005812:	e7a8      	b.n	8005766 <_vfiprintf_r+0xfe>
 8005814:	2300      	movs	r3, #0
 8005816:	3401      	adds	r4, #1
 8005818:	9305      	str	r3, [sp, #20]
 800581a:	4619      	mov	r1, r3
 800581c:	f04f 0c0a 	mov.w	ip, #10
 8005820:	4620      	mov	r0, r4
 8005822:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005826:	3a30      	subs	r2, #48	@ 0x30
 8005828:	2a09      	cmp	r2, #9
 800582a:	d903      	bls.n	8005834 <_vfiprintf_r+0x1cc>
 800582c:	2b00      	cmp	r3, #0
 800582e:	d0c6      	beq.n	80057be <_vfiprintf_r+0x156>
 8005830:	9105      	str	r1, [sp, #20]
 8005832:	e7c4      	b.n	80057be <_vfiprintf_r+0x156>
 8005834:	fb0c 2101 	mla	r1, ip, r1, r2
 8005838:	4604      	mov	r4, r0
 800583a:	2301      	movs	r3, #1
 800583c:	e7f0      	b.n	8005820 <_vfiprintf_r+0x1b8>
 800583e:	ab03      	add	r3, sp, #12
 8005840:	9300      	str	r3, [sp, #0]
 8005842:	462a      	mov	r2, r5
 8005844:	4b12      	ldr	r3, [pc, #72]	@ (8005890 <_vfiprintf_r+0x228>)
 8005846:	a904      	add	r1, sp, #16
 8005848:	4630      	mov	r0, r6
 800584a:	f7fd fbc5 	bl	8002fd8 <_printf_float>
 800584e:	4607      	mov	r7, r0
 8005850:	1c78      	adds	r0, r7, #1
 8005852:	d1d6      	bne.n	8005802 <_vfiprintf_r+0x19a>
 8005854:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005856:	07d9      	lsls	r1, r3, #31
 8005858:	d405      	bmi.n	8005866 <_vfiprintf_r+0x1fe>
 800585a:	89ab      	ldrh	r3, [r5, #12]
 800585c:	059a      	lsls	r2, r3, #22
 800585e:	d402      	bmi.n	8005866 <_vfiprintf_r+0x1fe>
 8005860:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005862:	f7fe f929 	bl	8003ab8 <__retarget_lock_release_recursive>
 8005866:	89ab      	ldrh	r3, [r5, #12]
 8005868:	065b      	lsls	r3, r3, #25
 800586a:	f53f af1f 	bmi.w	80056ac <_vfiprintf_r+0x44>
 800586e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005870:	e71e      	b.n	80056b0 <_vfiprintf_r+0x48>
 8005872:	ab03      	add	r3, sp, #12
 8005874:	9300      	str	r3, [sp, #0]
 8005876:	462a      	mov	r2, r5
 8005878:	4b05      	ldr	r3, [pc, #20]	@ (8005890 <_vfiprintf_r+0x228>)
 800587a:	a904      	add	r1, sp, #16
 800587c:	4630      	mov	r0, r6
 800587e:	f7fd fe43 	bl	8003508 <_printf_i>
 8005882:	e7e4      	b.n	800584e <_vfiprintf_r+0x1e6>
 8005884:	080068f0 	.word	0x080068f0
 8005888:	080068fa 	.word	0x080068fa
 800588c:	08002fd9 	.word	0x08002fd9
 8005890:	08005645 	.word	0x08005645
 8005894:	080068f6 	.word	0x080068f6

08005898 <__swbuf_r>:
 8005898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800589a:	460e      	mov	r6, r1
 800589c:	4614      	mov	r4, r2
 800589e:	4605      	mov	r5, r0
 80058a0:	b118      	cbz	r0, 80058aa <__swbuf_r+0x12>
 80058a2:	6a03      	ldr	r3, [r0, #32]
 80058a4:	b90b      	cbnz	r3, 80058aa <__swbuf_r+0x12>
 80058a6:	f7fd ffdb 	bl	8003860 <__sinit>
 80058aa:	69a3      	ldr	r3, [r4, #24]
 80058ac:	60a3      	str	r3, [r4, #8]
 80058ae:	89a3      	ldrh	r3, [r4, #12]
 80058b0:	071a      	lsls	r2, r3, #28
 80058b2:	d501      	bpl.n	80058b8 <__swbuf_r+0x20>
 80058b4:	6923      	ldr	r3, [r4, #16]
 80058b6:	b943      	cbnz	r3, 80058ca <__swbuf_r+0x32>
 80058b8:	4621      	mov	r1, r4
 80058ba:	4628      	mov	r0, r5
 80058bc:	f000 f82a 	bl	8005914 <__swsetup_r>
 80058c0:	b118      	cbz	r0, 80058ca <__swbuf_r+0x32>
 80058c2:	f04f 37ff 	mov.w	r7, #4294967295
 80058c6:	4638      	mov	r0, r7
 80058c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058ca:	6823      	ldr	r3, [r4, #0]
 80058cc:	6922      	ldr	r2, [r4, #16]
 80058ce:	1a98      	subs	r0, r3, r2
 80058d0:	6963      	ldr	r3, [r4, #20]
 80058d2:	b2f6      	uxtb	r6, r6
 80058d4:	4283      	cmp	r3, r0
 80058d6:	4637      	mov	r7, r6
 80058d8:	dc05      	bgt.n	80058e6 <__swbuf_r+0x4e>
 80058da:	4621      	mov	r1, r4
 80058dc:	4628      	mov	r0, r5
 80058de:	f7ff fd99 	bl	8005414 <_fflush_r>
 80058e2:	2800      	cmp	r0, #0
 80058e4:	d1ed      	bne.n	80058c2 <__swbuf_r+0x2a>
 80058e6:	68a3      	ldr	r3, [r4, #8]
 80058e8:	3b01      	subs	r3, #1
 80058ea:	60a3      	str	r3, [r4, #8]
 80058ec:	6823      	ldr	r3, [r4, #0]
 80058ee:	1c5a      	adds	r2, r3, #1
 80058f0:	6022      	str	r2, [r4, #0]
 80058f2:	701e      	strb	r6, [r3, #0]
 80058f4:	6962      	ldr	r2, [r4, #20]
 80058f6:	1c43      	adds	r3, r0, #1
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d004      	beq.n	8005906 <__swbuf_r+0x6e>
 80058fc:	89a3      	ldrh	r3, [r4, #12]
 80058fe:	07db      	lsls	r3, r3, #31
 8005900:	d5e1      	bpl.n	80058c6 <__swbuf_r+0x2e>
 8005902:	2e0a      	cmp	r6, #10
 8005904:	d1df      	bne.n	80058c6 <__swbuf_r+0x2e>
 8005906:	4621      	mov	r1, r4
 8005908:	4628      	mov	r0, r5
 800590a:	f7ff fd83 	bl	8005414 <_fflush_r>
 800590e:	2800      	cmp	r0, #0
 8005910:	d0d9      	beq.n	80058c6 <__swbuf_r+0x2e>
 8005912:	e7d6      	b.n	80058c2 <__swbuf_r+0x2a>

08005914 <__swsetup_r>:
 8005914:	b538      	push	{r3, r4, r5, lr}
 8005916:	4b29      	ldr	r3, [pc, #164]	@ (80059bc <__swsetup_r+0xa8>)
 8005918:	4605      	mov	r5, r0
 800591a:	6818      	ldr	r0, [r3, #0]
 800591c:	460c      	mov	r4, r1
 800591e:	b118      	cbz	r0, 8005928 <__swsetup_r+0x14>
 8005920:	6a03      	ldr	r3, [r0, #32]
 8005922:	b90b      	cbnz	r3, 8005928 <__swsetup_r+0x14>
 8005924:	f7fd ff9c 	bl	8003860 <__sinit>
 8005928:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800592c:	0719      	lsls	r1, r3, #28
 800592e:	d422      	bmi.n	8005976 <__swsetup_r+0x62>
 8005930:	06da      	lsls	r2, r3, #27
 8005932:	d407      	bmi.n	8005944 <__swsetup_r+0x30>
 8005934:	2209      	movs	r2, #9
 8005936:	602a      	str	r2, [r5, #0]
 8005938:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800593c:	81a3      	strh	r3, [r4, #12]
 800593e:	f04f 30ff 	mov.w	r0, #4294967295
 8005942:	e033      	b.n	80059ac <__swsetup_r+0x98>
 8005944:	0758      	lsls	r0, r3, #29
 8005946:	d512      	bpl.n	800596e <__swsetup_r+0x5a>
 8005948:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800594a:	b141      	cbz	r1, 800595e <__swsetup_r+0x4a>
 800594c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005950:	4299      	cmp	r1, r3
 8005952:	d002      	beq.n	800595a <__swsetup_r+0x46>
 8005954:	4628      	mov	r0, r5
 8005956:	f7fe feff 	bl	8004758 <_free_r>
 800595a:	2300      	movs	r3, #0
 800595c:	6363      	str	r3, [r4, #52]	@ 0x34
 800595e:	89a3      	ldrh	r3, [r4, #12]
 8005960:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005964:	81a3      	strh	r3, [r4, #12]
 8005966:	2300      	movs	r3, #0
 8005968:	6063      	str	r3, [r4, #4]
 800596a:	6923      	ldr	r3, [r4, #16]
 800596c:	6023      	str	r3, [r4, #0]
 800596e:	89a3      	ldrh	r3, [r4, #12]
 8005970:	f043 0308 	orr.w	r3, r3, #8
 8005974:	81a3      	strh	r3, [r4, #12]
 8005976:	6923      	ldr	r3, [r4, #16]
 8005978:	b94b      	cbnz	r3, 800598e <__swsetup_r+0x7a>
 800597a:	89a3      	ldrh	r3, [r4, #12]
 800597c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005980:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005984:	d003      	beq.n	800598e <__swsetup_r+0x7a>
 8005986:	4621      	mov	r1, r4
 8005988:	4628      	mov	r0, r5
 800598a:	f000 f883 	bl	8005a94 <__smakebuf_r>
 800598e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005992:	f013 0201 	ands.w	r2, r3, #1
 8005996:	d00a      	beq.n	80059ae <__swsetup_r+0x9a>
 8005998:	2200      	movs	r2, #0
 800599a:	60a2      	str	r2, [r4, #8]
 800599c:	6962      	ldr	r2, [r4, #20]
 800599e:	4252      	negs	r2, r2
 80059a0:	61a2      	str	r2, [r4, #24]
 80059a2:	6922      	ldr	r2, [r4, #16]
 80059a4:	b942      	cbnz	r2, 80059b8 <__swsetup_r+0xa4>
 80059a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80059aa:	d1c5      	bne.n	8005938 <__swsetup_r+0x24>
 80059ac:	bd38      	pop	{r3, r4, r5, pc}
 80059ae:	0799      	lsls	r1, r3, #30
 80059b0:	bf58      	it	pl
 80059b2:	6962      	ldrpl	r2, [r4, #20]
 80059b4:	60a2      	str	r2, [r4, #8]
 80059b6:	e7f4      	b.n	80059a2 <__swsetup_r+0x8e>
 80059b8:	2000      	movs	r0, #0
 80059ba:	e7f7      	b.n	80059ac <__swsetup_r+0x98>
 80059bc:	20000024 	.word	0x20000024

080059c0 <_raise_r>:
 80059c0:	291f      	cmp	r1, #31
 80059c2:	b538      	push	{r3, r4, r5, lr}
 80059c4:	4605      	mov	r5, r0
 80059c6:	460c      	mov	r4, r1
 80059c8:	d904      	bls.n	80059d4 <_raise_r+0x14>
 80059ca:	2316      	movs	r3, #22
 80059cc:	6003      	str	r3, [r0, #0]
 80059ce:	f04f 30ff 	mov.w	r0, #4294967295
 80059d2:	bd38      	pop	{r3, r4, r5, pc}
 80059d4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80059d6:	b112      	cbz	r2, 80059de <_raise_r+0x1e>
 80059d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80059dc:	b94b      	cbnz	r3, 80059f2 <_raise_r+0x32>
 80059de:	4628      	mov	r0, r5
 80059e0:	f000 f830 	bl	8005a44 <_getpid_r>
 80059e4:	4622      	mov	r2, r4
 80059e6:	4601      	mov	r1, r0
 80059e8:	4628      	mov	r0, r5
 80059ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059ee:	f000 b817 	b.w	8005a20 <_kill_r>
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d00a      	beq.n	8005a0c <_raise_r+0x4c>
 80059f6:	1c59      	adds	r1, r3, #1
 80059f8:	d103      	bne.n	8005a02 <_raise_r+0x42>
 80059fa:	2316      	movs	r3, #22
 80059fc:	6003      	str	r3, [r0, #0]
 80059fe:	2001      	movs	r0, #1
 8005a00:	e7e7      	b.n	80059d2 <_raise_r+0x12>
 8005a02:	2100      	movs	r1, #0
 8005a04:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005a08:	4620      	mov	r0, r4
 8005a0a:	4798      	blx	r3
 8005a0c:	2000      	movs	r0, #0
 8005a0e:	e7e0      	b.n	80059d2 <_raise_r+0x12>

08005a10 <raise>:
 8005a10:	4b02      	ldr	r3, [pc, #8]	@ (8005a1c <raise+0xc>)
 8005a12:	4601      	mov	r1, r0
 8005a14:	6818      	ldr	r0, [r3, #0]
 8005a16:	f7ff bfd3 	b.w	80059c0 <_raise_r>
 8005a1a:	bf00      	nop
 8005a1c:	20000024 	.word	0x20000024

08005a20 <_kill_r>:
 8005a20:	b538      	push	{r3, r4, r5, lr}
 8005a22:	4d07      	ldr	r5, [pc, #28]	@ (8005a40 <_kill_r+0x20>)
 8005a24:	2300      	movs	r3, #0
 8005a26:	4604      	mov	r4, r0
 8005a28:	4608      	mov	r0, r1
 8005a2a:	4611      	mov	r1, r2
 8005a2c:	602b      	str	r3, [r5, #0]
 8005a2e:	f7fc fa51 	bl	8001ed4 <_kill>
 8005a32:	1c43      	adds	r3, r0, #1
 8005a34:	d102      	bne.n	8005a3c <_kill_r+0x1c>
 8005a36:	682b      	ldr	r3, [r5, #0]
 8005a38:	b103      	cbz	r3, 8005a3c <_kill_r+0x1c>
 8005a3a:	6023      	str	r3, [r4, #0]
 8005a3c:	bd38      	pop	{r3, r4, r5, pc}
 8005a3e:	bf00      	nop
 8005a40:	2000034c 	.word	0x2000034c

08005a44 <_getpid_r>:
 8005a44:	f7fc ba3e 	b.w	8001ec4 <_getpid>

08005a48 <__swhatbuf_r>:
 8005a48:	b570      	push	{r4, r5, r6, lr}
 8005a4a:	460c      	mov	r4, r1
 8005a4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a50:	2900      	cmp	r1, #0
 8005a52:	b096      	sub	sp, #88	@ 0x58
 8005a54:	4615      	mov	r5, r2
 8005a56:	461e      	mov	r6, r3
 8005a58:	da0d      	bge.n	8005a76 <__swhatbuf_r+0x2e>
 8005a5a:	89a3      	ldrh	r3, [r4, #12]
 8005a5c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005a60:	f04f 0100 	mov.w	r1, #0
 8005a64:	bf14      	ite	ne
 8005a66:	2340      	movne	r3, #64	@ 0x40
 8005a68:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005a6c:	2000      	movs	r0, #0
 8005a6e:	6031      	str	r1, [r6, #0]
 8005a70:	602b      	str	r3, [r5, #0]
 8005a72:	b016      	add	sp, #88	@ 0x58
 8005a74:	bd70      	pop	{r4, r5, r6, pc}
 8005a76:	466a      	mov	r2, sp
 8005a78:	f000 f848 	bl	8005b0c <_fstat_r>
 8005a7c:	2800      	cmp	r0, #0
 8005a7e:	dbec      	blt.n	8005a5a <__swhatbuf_r+0x12>
 8005a80:	9901      	ldr	r1, [sp, #4]
 8005a82:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005a86:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005a8a:	4259      	negs	r1, r3
 8005a8c:	4159      	adcs	r1, r3
 8005a8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005a92:	e7eb      	b.n	8005a6c <__swhatbuf_r+0x24>

08005a94 <__smakebuf_r>:
 8005a94:	898b      	ldrh	r3, [r1, #12]
 8005a96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a98:	079d      	lsls	r5, r3, #30
 8005a9a:	4606      	mov	r6, r0
 8005a9c:	460c      	mov	r4, r1
 8005a9e:	d507      	bpl.n	8005ab0 <__smakebuf_r+0x1c>
 8005aa0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005aa4:	6023      	str	r3, [r4, #0]
 8005aa6:	6123      	str	r3, [r4, #16]
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	6163      	str	r3, [r4, #20]
 8005aac:	b003      	add	sp, #12
 8005aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ab0:	ab01      	add	r3, sp, #4
 8005ab2:	466a      	mov	r2, sp
 8005ab4:	f7ff ffc8 	bl	8005a48 <__swhatbuf_r>
 8005ab8:	9f00      	ldr	r7, [sp, #0]
 8005aba:	4605      	mov	r5, r0
 8005abc:	4639      	mov	r1, r7
 8005abe:	4630      	mov	r0, r6
 8005ac0:	f7fe febe 	bl	8004840 <_malloc_r>
 8005ac4:	b948      	cbnz	r0, 8005ada <__smakebuf_r+0x46>
 8005ac6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005aca:	059a      	lsls	r2, r3, #22
 8005acc:	d4ee      	bmi.n	8005aac <__smakebuf_r+0x18>
 8005ace:	f023 0303 	bic.w	r3, r3, #3
 8005ad2:	f043 0302 	orr.w	r3, r3, #2
 8005ad6:	81a3      	strh	r3, [r4, #12]
 8005ad8:	e7e2      	b.n	8005aa0 <__smakebuf_r+0xc>
 8005ada:	89a3      	ldrh	r3, [r4, #12]
 8005adc:	6020      	str	r0, [r4, #0]
 8005ade:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ae2:	81a3      	strh	r3, [r4, #12]
 8005ae4:	9b01      	ldr	r3, [sp, #4]
 8005ae6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005aea:	b15b      	cbz	r3, 8005b04 <__smakebuf_r+0x70>
 8005aec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005af0:	4630      	mov	r0, r6
 8005af2:	f000 f81d 	bl	8005b30 <_isatty_r>
 8005af6:	b128      	cbz	r0, 8005b04 <__smakebuf_r+0x70>
 8005af8:	89a3      	ldrh	r3, [r4, #12]
 8005afa:	f023 0303 	bic.w	r3, r3, #3
 8005afe:	f043 0301 	orr.w	r3, r3, #1
 8005b02:	81a3      	strh	r3, [r4, #12]
 8005b04:	89a3      	ldrh	r3, [r4, #12]
 8005b06:	431d      	orrs	r5, r3
 8005b08:	81a5      	strh	r5, [r4, #12]
 8005b0a:	e7cf      	b.n	8005aac <__smakebuf_r+0x18>

08005b0c <_fstat_r>:
 8005b0c:	b538      	push	{r3, r4, r5, lr}
 8005b0e:	4d07      	ldr	r5, [pc, #28]	@ (8005b2c <_fstat_r+0x20>)
 8005b10:	2300      	movs	r3, #0
 8005b12:	4604      	mov	r4, r0
 8005b14:	4608      	mov	r0, r1
 8005b16:	4611      	mov	r1, r2
 8005b18:	602b      	str	r3, [r5, #0]
 8005b1a:	f7fc fa3b 	bl	8001f94 <_fstat>
 8005b1e:	1c43      	adds	r3, r0, #1
 8005b20:	d102      	bne.n	8005b28 <_fstat_r+0x1c>
 8005b22:	682b      	ldr	r3, [r5, #0]
 8005b24:	b103      	cbz	r3, 8005b28 <_fstat_r+0x1c>
 8005b26:	6023      	str	r3, [r4, #0]
 8005b28:	bd38      	pop	{r3, r4, r5, pc}
 8005b2a:	bf00      	nop
 8005b2c:	2000034c 	.word	0x2000034c

08005b30 <_isatty_r>:
 8005b30:	b538      	push	{r3, r4, r5, lr}
 8005b32:	4d06      	ldr	r5, [pc, #24]	@ (8005b4c <_isatty_r+0x1c>)
 8005b34:	2300      	movs	r3, #0
 8005b36:	4604      	mov	r4, r0
 8005b38:	4608      	mov	r0, r1
 8005b3a:	602b      	str	r3, [r5, #0]
 8005b3c:	f7fc fa3a 	bl	8001fb4 <_isatty>
 8005b40:	1c43      	adds	r3, r0, #1
 8005b42:	d102      	bne.n	8005b4a <_isatty_r+0x1a>
 8005b44:	682b      	ldr	r3, [r5, #0]
 8005b46:	b103      	cbz	r3, 8005b4a <_isatty_r+0x1a>
 8005b48:	6023      	str	r3, [r4, #0]
 8005b4a:	bd38      	pop	{r3, r4, r5, pc}
 8005b4c:	2000034c 	.word	0x2000034c

08005b50 <log10f>:
 8005b50:	b508      	push	{r3, lr}
 8005b52:	ed2d 8b02 	vpush	{d8}
 8005b56:	eeb0 8a40 	vmov.f32	s16, s0
 8005b5a:	f000 f88f 	bl	8005c7c <__ieee754_log10f>
 8005b5e:	eeb4 8a48 	vcmp.f32	s16, s16
 8005b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b66:	d60f      	bvs.n	8005b88 <log10f+0x38>
 8005b68:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8005b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b70:	d80a      	bhi.n	8005b88 <log10f+0x38>
 8005b72:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8005b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b7a:	d108      	bne.n	8005b8e <log10f+0x3e>
 8005b7c:	f7fd ff70 	bl	8003a60 <__errno>
 8005b80:	2322      	movs	r3, #34	@ 0x22
 8005b82:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8005ba4 <log10f+0x54>
 8005b86:	6003      	str	r3, [r0, #0]
 8005b88:	ecbd 8b02 	vpop	{d8}
 8005b8c:	bd08      	pop	{r3, pc}
 8005b8e:	f7fd ff67 	bl	8003a60 <__errno>
 8005b92:	ecbd 8b02 	vpop	{d8}
 8005b96:	2321      	movs	r3, #33	@ 0x21
 8005b98:	6003      	str	r3, [r0, #0]
 8005b9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005b9e:	4802      	ldr	r0, [pc, #8]	@ (8005ba8 <log10f+0x58>)
 8005ba0:	f000 b866 	b.w	8005c70 <nanf>
 8005ba4:	ff800000 	.word	0xff800000
 8005ba8:	08006946 	.word	0x08006946

08005bac <powf>:
 8005bac:	b508      	push	{r3, lr}
 8005bae:	ed2d 8b04 	vpush	{d8-d9}
 8005bb2:	eeb0 8a60 	vmov.f32	s16, s1
 8005bb6:	eeb0 9a40 	vmov.f32	s18, s0
 8005bba:	f000 f8b7 	bl	8005d2c <__ieee754_powf>
 8005bbe:	eeb4 8a48 	vcmp.f32	s16, s16
 8005bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bc6:	eef0 8a40 	vmov.f32	s17, s0
 8005bca:	d63e      	bvs.n	8005c4a <powf+0x9e>
 8005bcc:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8005bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bd4:	d112      	bne.n	8005bfc <powf+0x50>
 8005bd6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8005bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bde:	d039      	beq.n	8005c54 <powf+0xa8>
 8005be0:	eeb0 0a48 	vmov.f32	s0, s16
 8005be4:	f000 f839 	bl	8005c5a <finitef>
 8005be8:	b378      	cbz	r0, 8005c4a <powf+0x9e>
 8005bea:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8005bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bf2:	d52a      	bpl.n	8005c4a <powf+0x9e>
 8005bf4:	f7fd ff34 	bl	8003a60 <__errno>
 8005bf8:	2322      	movs	r3, #34	@ 0x22
 8005bfa:	e014      	b.n	8005c26 <powf+0x7a>
 8005bfc:	f000 f82d 	bl	8005c5a <finitef>
 8005c00:	b998      	cbnz	r0, 8005c2a <powf+0x7e>
 8005c02:	eeb0 0a49 	vmov.f32	s0, s18
 8005c06:	f000 f828 	bl	8005c5a <finitef>
 8005c0a:	b170      	cbz	r0, 8005c2a <powf+0x7e>
 8005c0c:	eeb0 0a48 	vmov.f32	s0, s16
 8005c10:	f000 f823 	bl	8005c5a <finitef>
 8005c14:	b148      	cbz	r0, 8005c2a <powf+0x7e>
 8005c16:	eef4 8a68 	vcmp.f32	s17, s17
 8005c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c1e:	d7e9      	bvc.n	8005bf4 <powf+0x48>
 8005c20:	f7fd ff1e 	bl	8003a60 <__errno>
 8005c24:	2321      	movs	r3, #33	@ 0x21
 8005c26:	6003      	str	r3, [r0, #0]
 8005c28:	e00f      	b.n	8005c4a <powf+0x9e>
 8005c2a:	eef5 8a40 	vcmp.f32	s17, #0.0
 8005c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c32:	d10a      	bne.n	8005c4a <powf+0x9e>
 8005c34:	eeb0 0a49 	vmov.f32	s0, s18
 8005c38:	f000 f80f 	bl	8005c5a <finitef>
 8005c3c:	b128      	cbz	r0, 8005c4a <powf+0x9e>
 8005c3e:	eeb0 0a48 	vmov.f32	s0, s16
 8005c42:	f000 f80a 	bl	8005c5a <finitef>
 8005c46:	2800      	cmp	r0, #0
 8005c48:	d1d4      	bne.n	8005bf4 <powf+0x48>
 8005c4a:	eeb0 0a68 	vmov.f32	s0, s17
 8005c4e:	ecbd 8b04 	vpop	{d8-d9}
 8005c52:	bd08      	pop	{r3, pc}
 8005c54:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8005c58:	e7f7      	b.n	8005c4a <powf+0x9e>

08005c5a <finitef>:
 8005c5a:	ee10 3a10 	vmov	r3, s0
 8005c5e:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8005c62:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8005c66:	bfac      	ite	ge
 8005c68:	2000      	movge	r0, #0
 8005c6a:	2001      	movlt	r0, #1
 8005c6c:	4770      	bx	lr
	...

08005c70 <nanf>:
 8005c70:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005c78 <nanf+0x8>
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop
 8005c78:	7fc00000 	.word	0x7fc00000

08005c7c <__ieee754_log10f>:
 8005c7c:	b508      	push	{r3, lr}
 8005c7e:	ee10 3a10 	vmov	r3, s0
 8005c82:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8005c86:	ed2d 8b02 	vpush	{d8}
 8005c8a:	d108      	bne.n	8005c9e <__ieee754_log10f+0x22>
 8005c8c:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8005d14 <__ieee754_log10f+0x98>
 8005c90:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8005d18 <__ieee754_log10f+0x9c>
 8005c94:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8005c98:	ecbd 8b02 	vpop	{d8}
 8005c9c:	bd08      	pop	{r3, pc}
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	da02      	bge.n	8005caa <__ieee754_log10f+0x2e>
 8005ca4:	ee30 7a40 	vsub.f32	s14, s0, s0
 8005ca8:	e7f2      	b.n	8005c90 <__ieee754_log10f+0x14>
 8005caa:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8005cae:	db02      	blt.n	8005cb6 <__ieee754_log10f+0x3a>
 8005cb0:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005cb4:	e7f0      	b.n	8005c98 <__ieee754_log10f+0x1c>
 8005cb6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005cba:	bfbf      	itttt	lt
 8005cbc:	eddf 7a17 	vldrlt	s15, [pc, #92]	@ 8005d1c <__ieee754_log10f+0xa0>
 8005cc0:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8005cc4:	f06f 0118 	mvnlt.w	r1, #24
 8005cc8:	ee17 2a90 	vmovlt	r2, s15
 8005ccc:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8005cd0:	bfa8      	it	ge
 8005cd2:	2100      	movge	r1, #0
 8005cd4:	3b7f      	subs	r3, #127	@ 0x7f
 8005cd6:	440b      	add	r3, r1
 8005cd8:	0fd9      	lsrs	r1, r3, #31
 8005cda:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8005cde:	ee07 3a90 	vmov	s15, r3
 8005ce2:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8005ce6:	f1c1 037f 	rsb	r3, r1, #127	@ 0x7f
 8005cea:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8005cee:	ee00 3a10 	vmov	s0, r3
 8005cf2:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8005cf6:	f000 fb81 	bl	80063fc <__ieee754_logf>
 8005cfa:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8005d20 <__ieee754_log10f+0xa4>
 8005cfe:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005d02:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8005d24 <__ieee754_log10f+0xa8>
 8005d06:	eea8 0a27 	vfma.f32	s0, s16, s15
 8005d0a:	eddf 7a07 	vldr	s15, [pc, #28]	@ 8005d28 <__ieee754_log10f+0xac>
 8005d0e:	eea8 0a27 	vfma.f32	s0, s16, s15
 8005d12:	e7c1      	b.n	8005c98 <__ieee754_log10f+0x1c>
 8005d14:	cc000000 	.word	0xcc000000
 8005d18:	00000000 	.word	0x00000000
 8005d1c:	4c000000 	.word	0x4c000000
 8005d20:	3ede5bd9 	.word	0x3ede5bd9
 8005d24:	355427db 	.word	0x355427db
 8005d28:	3e9a2080 	.word	0x3e9a2080

08005d2c <__ieee754_powf>:
 8005d2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d30:	ee10 4a90 	vmov	r4, s1
 8005d34:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8005d38:	ed2d 8b02 	vpush	{d8}
 8005d3c:	ee10 6a10 	vmov	r6, s0
 8005d40:	eeb0 8a40 	vmov.f32	s16, s0
 8005d44:	eef0 8a60 	vmov.f32	s17, s1
 8005d48:	d10c      	bne.n	8005d64 <__ieee754_powf+0x38>
 8005d4a:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8005d4e:	0076      	lsls	r6, r6, #1
 8005d50:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8005d54:	f240 829c 	bls.w	8006290 <__ieee754_powf+0x564>
 8005d58:	ee38 0a28 	vadd.f32	s0, s16, s17
 8005d5c:	ecbd 8b02 	vpop	{d8}
 8005d60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d64:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8005d68:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8005d6c:	d802      	bhi.n	8005d74 <__ieee754_powf+0x48>
 8005d6e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8005d72:	d908      	bls.n	8005d86 <__ieee754_powf+0x5a>
 8005d74:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8005d78:	d1ee      	bne.n	8005d58 <__ieee754_powf+0x2c>
 8005d7a:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8005d7e:	0064      	lsls	r4, r4, #1
 8005d80:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8005d84:	e7e6      	b.n	8005d54 <__ieee754_powf+0x28>
 8005d86:	2e00      	cmp	r6, #0
 8005d88:	da1e      	bge.n	8005dc8 <__ieee754_powf+0x9c>
 8005d8a:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8005d8e:	d22b      	bcs.n	8005de8 <__ieee754_powf+0xbc>
 8005d90:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8005d94:	d332      	bcc.n	8005dfc <__ieee754_powf+0xd0>
 8005d96:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8005d9a:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8005d9e:	fa49 f503 	asr.w	r5, r9, r3
 8005da2:	fa05 f303 	lsl.w	r3, r5, r3
 8005da6:	454b      	cmp	r3, r9
 8005da8:	d126      	bne.n	8005df8 <__ieee754_powf+0xcc>
 8005daa:	f005 0501 	and.w	r5, r5, #1
 8005dae:	f1c5 0502 	rsb	r5, r5, #2
 8005db2:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8005db6:	d122      	bne.n	8005dfe <__ieee754_powf+0xd2>
 8005db8:	2c00      	cmp	r4, #0
 8005dba:	f280 826f 	bge.w	800629c <__ieee754_powf+0x570>
 8005dbe:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8005dc2:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8005dc6:	e7c9      	b.n	8005d5c <__ieee754_powf+0x30>
 8005dc8:	2500      	movs	r5, #0
 8005dca:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8005dce:	d1f0      	bne.n	8005db2 <__ieee754_powf+0x86>
 8005dd0:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8005dd4:	f000 825c 	beq.w	8006290 <__ieee754_powf+0x564>
 8005dd8:	d908      	bls.n	8005dec <__ieee754_powf+0xc0>
 8005dda:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 800613c <__ieee754_powf+0x410>
 8005dde:	2c00      	cmp	r4, #0
 8005de0:	bfa8      	it	ge
 8005de2:	eeb0 0a68 	vmovge.f32	s0, s17
 8005de6:	e7b9      	b.n	8005d5c <__ieee754_powf+0x30>
 8005de8:	2502      	movs	r5, #2
 8005dea:	e7ee      	b.n	8005dca <__ieee754_powf+0x9e>
 8005dec:	2c00      	cmp	r4, #0
 8005dee:	f280 8252 	bge.w	8006296 <__ieee754_powf+0x56a>
 8005df2:	eeb1 0a68 	vneg.f32	s0, s17
 8005df6:	e7b1      	b.n	8005d5c <__ieee754_powf+0x30>
 8005df8:	2500      	movs	r5, #0
 8005dfa:	e7da      	b.n	8005db2 <__ieee754_powf+0x86>
 8005dfc:	2500      	movs	r5, #0
 8005dfe:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8005e02:	d102      	bne.n	8005e0a <__ieee754_powf+0xde>
 8005e04:	ee28 0a08 	vmul.f32	s0, s16, s16
 8005e08:	e7a8      	b.n	8005d5c <__ieee754_powf+0x30>
 8005e0a:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8005e0e:	d109      	bne.n	8005e24 <__ieee754_powf+0xf8>
 8005e10:	2e00      	cmp	r6, #0
 8005e12:	db07      	blt.n	8005e24 <__ieee754_powf+0xf8>
 8005e14:	eeb0 0a48 	vmov.f32	s0, s16
 8005e18:	ecbd 8b02 	vpop	{d8}
 8005e1c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e20:	f000 bae8 	b.w	80063f4 <__ieee754_sqrtf>
 8005e24:	eeb0 0a48 	vmov.f32	s0, s16
 8005e28:	f000 fa50 	bl	80062cc <fabsf>
 8005e2c:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8005e30:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8005e34:	4647      	mov	r7, r8
 8005e36:	d002      	beq.n	8005e3e <__ieee754_powf+0x112>
 8005e38:	f1b8 0f00 	cmp.w	r8, #0
 8005e3c:	d117      	bne.n	8005e6e <__ieee754_powf+0x142>
 8005e3e:	2c00      	cmp	r4, #0
 8005e40:	bfbc      	itt	lt
 8005e42:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8005e46:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8005e4a:	2e00      	cmp	r6, #0
 8005e4c:	da86      	bge.n	8005d5c <__ieee754_powf+0x30>
 8005e4e:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8005e52:	ea58 0805 	orrs.w	r8, r8, r5
 8005e56:	d104      	bne.n	8005e62 <__ieee754_powf+0x136>
 8005e58:	ee70 7a40 	vsub.f32	s15, s0, s0
 8005e5c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8005e60:	e77c      	b.n	8005d5c <__ieee754_powf+0x30>
 8005e62:	2d01      	cmp	r5, #1
 8005e64:	f47f af7a 	bne.w	8005d5c <__ieee754_powf+0x30>
 8005e68:	eeb1 0a40 	vneg.f32	s0, s0
 8005e6c:	e776      	b.n	8005d5c <__ieee754_powf+0x30>
 8005e6e:	0ff0      	lsrs	r0, r6, #31
 8005e70:	3801      	subs	r0, #1
 8005e72:	ea55 0300 	orrs.w	r3, r5, r0
 8005e76:	d104      	bne.n	8005e82 <__ieee754_powf+0x156>
 8005e78:	ee38 8a48 	vsub.f32	s16, s16, s16
 8005e7c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8005e80:	e76c      	b.n	8005d5c <__ieee754_powf+0x30>
 8005e82:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8005e86:	d973      	bls.n	8005f70 <__ieee754_powf+0x244>
 8005e88:	4bad      	ldr	r3, [pc, #692]	@ (8006140 <__ieee754_powf+0x414>)
 8005e8a:	4598      	cmp	r8, r3
 8005e8c:	d808      	bhi.n	8005ea0 <__ieee754_powf+0x174>
 8005e8e:	2c00      	cmp	r4, #0
 8005e90:	da0b      	bge.n	8005eaa <__ieee754_powf+0x17e>
 8005e92:	2000      	movs	r0, #0
 8005e94:	ecbd 8b02 	vpop	{d8}
 8005e98:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e9c:	f000 baa4 	b.w	80063e8 <__math_oflowf>
 8005ea0:	4ba8      	ldr	r3, [pc, #672]	@ (8006144 <__ieee754_powf+0x418>)
 8005ea2:	4598      	cmp	r8, r3
 8005ea4:	d908      	bls.n	8005eb8 <__ieee754_powf+0x18c>
 8005ea6:	2c00      	cmp	r4, #0
 8005ea8:	dcf3      	bgt.n	8005e92 <__ieee754_powf+0x166>
 8005eaa:	2000      	movs	r0, #0
 8005eac:	ecbd 8b02 	vpop	{d8}
 8005eb0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005eb4:	f000 ba92 	b.w	80063dc <__math_uflowf>
 8005eb8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8005ebc:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005ec0:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8006148 <__ieee754_powf+0x41c>
 8005ec4:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8005ec8:	eee0 6a67 	vfms.f32	s13, s0, s15
 8005ecc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8005ed0:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8005ed4:	ee20 7a00 	vmul.f32	s14, s0, s0
 8005ed8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005edc:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 800614c <__ieee754_powf+0x420>
 8005ee0:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8005ee4:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8006150 <__ieee754_powf+0x424>
 8005ee8:	eee0 7a07 	vfma.f32	s15, s0, s14
 8005eec:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 8006154 <__ieee754_powf+0x428>
 8005ef0:	eef0 6a67 	vmov.f32	s13, s15
 8005ef4:	eee0 6a07 	vfma.f32	s13, s0, s14
 8005ef8:	ee16 3a90 	vmov	r3, s13
 8005efc:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005f00:	f023 030f 	bic.w	r3, r3, #15
 8005f04:	ee06 3a90 	vmov	s13, r3
 8005f08:	eee0 6a47 	vfms.f32	s13, s0, s14
 8005f0c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005f10:	3d01      	subs	r5, #1
 8005f12:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 8005f16:	4305      	orrs	r5, r0
 8005f18:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f1c:	f024 040f 	bic.w	r4, r4, #15
 8005f20:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8005f24:	bf18      	it	ne
 8005f26:	eeb0 8a47 	vmovne.f32	s16, s14
 8005f2a:	ee07 4a10 	vmov	s14, r4
 8005f2e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8005f32:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8005f36:	ee07 3a90 	vmov	s15, r3
 8005f3a:	eee7 0a27 	vfma.f32	s1, s14, s15
 8005f3e:	ee07 4a10 	vmov	s14, r4
 8005f42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f46:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8005f4a:	ee17 1a10 	vmov	r1, s14
 8005f4e:	2900      	cmp	r1, #0
 8005f50:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005f54:	f340 80dd 	ble.w	8006112 <__ieee754_powf+0x3e6>
 8005f58:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8005f5c:	f240 80ca 	bls.w	80060f4 <__ieee754_powf+0x3c8>
 8005f60:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8005f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f68:	bf4c      	ite	mi
 8005f6a:	2001      	movmi	r0, #1
 8005f6c:	2000      	movpl	r0, #0
 8005f6e:	e791      	b.n	8005e94 <__ieee754_powf+0x168>
 8005f70:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8005f74:	bf01      	itttt	eq
 8005f76:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8006158 <__ieee754_powf+0x42c>
 8005f7a:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8005f7e:	f06f 0317 	mvneq.w	r3, #23
 8005f82:	ee17 7a90 	vmoveq	r7, s15
 8005f86:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8005f8a:	bf18      	it	ne
 8005f8c:	2300      	movne	r3, #0
 8005f8e:	3a7f      	subs	r2, #127	@ 0x7f
 8005f90:	441a      	add	r2, r3
 8005f92:	4b72      	ldr	r3, [pc, #456]	@ (800615c <__ieee754_powf+0x430>)
 8005f94:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8005f98:	429f      	cmp	r7, r3
 8005f9a:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8005f9e:	dd06      	ble.n	8005fae <__ieee754_powf+0x282>
 8005fa0:	4b6f      	ldr	r3, [pc, #444]	@ (8006160 <__ieee754_powf+0x434>)
 8005fa2:	429f      	cmp	r7, r3
 8005fa4:	f340 80a4 	ble.w	80060f0 <__ieee754_powf+0x3c4>
 8005fa8:	3201      	adds	r2, #1
 8005faa:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8005fae:	2600      	movs	r6, #0
 8005fb0:	4b6c      	ldr	r3, [pc, #432]	@ (8006164 <__ieee754_powf+0x438>)
 8005fb2:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8005fb6:	ee07 1a10 	vmov	s14, r1
 8005fba:	edd3 5a00 	vldr	s11, [r3]
 8005fbe:	4b6a      	ldr	r3, [pc, #424]	@ (8006168 <__ieee754_powf+0x43c>)
 8005fc0:	ee75 7a87 	vadd.f32	s15, s11, s14
 8005fc4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fc8:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8005fcc:	1049      	asrs	r1, r1, #1
 8005fce:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8005fd2:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8005fd6:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8005fda:	ee37 6a65 	vsub.f32	s12, s14, s11
 8005fde:	ee07 1a90 	vmov	s15, r1
 8005fe2:	ee26 5a24 	vmul.f32	s10, s12, s9
 8005fe6:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8005fea:	ee15 7a10 	vmov	r7, s10
 8005fee:	401f      	ands	r7, r3
 8005ff0:	ee06 7a90 	vmov	s13, r7
 8005ff4:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8005ff8:	ee37 7a65 	vsub.f32	s14, s14, s11
 8005ffc:	ee65 7a05 	vmul.f32	s15, s10, s10
 8006000:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8006004:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800616c <__ieee754_powf+0x440>
 8006008:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8006170 <__ieee754_powf+0x444>
 800600c:	eee7 5a87 	vfma.f32	s11, s15, s14
 8006010:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8006174 <__ieee754_powf+0x448>
 8006014:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8006018:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8006148 <__ieee754_powf+0x41c>
 800601c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8006020:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8006178 <__ieee754_powf+0x44c>
 8006024:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8006028:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800617c <__ieee754_powf+0x450>
 800602c:	ee26 6a24 	vmul.f32	s12, s12, s9
 8006030:	eee7 5a27 	vfma.f32	s11, s14, s15
 8006034:	ee35 7a26 	vadd.f32	s14, s10, s13
 8006038:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800603c:	ee27 7a06 	vmul.f32	s14, s14, s12
 8006040:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8006044:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8006048:	eef0 5a67 	vmov.f32	s11, s15
 800604c:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8006050:	ee75 5a87 	vadd.f32	s11, s11, s14
 8006054:	ee15 1a90 	vmov	r1, s11
 8006058:	4019      	ands	r1, r3
 800605a:	ee05 1a90 	vmov	s11, r1
 800605e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8006062:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8006066:	ee77 7a67 	vsub.f32	s15, s14, s15
 800606a:	ee67 7a85 	vmul.f32	s15, s15, s10
 800606e:	eee6 7a25 	vfma.f32	s15, s12, s11
 8006072:	eeb0 6a67 	vmov.f32	s12, s15
 8006076:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800607a:	ee16 1a10 	vmov	r1, s12
 800607e:	4019      	ands	r1, r3
 8006080:	ee06 1a10 	vmov	s12, r1
 8006084:	eeb0 7a46 	vmov.f32	s14, s12
 8006088:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800608c:	493c      	ldr	r1, [pc, #240]	@ (8006180 <__ieee754_powf+0x454>)
 800608e:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8006092:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006096:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8006184 <__ieee754_powf+0x458>
 800609a:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8006188 <__ieee754_powf+0x45c>
 800609e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060a2:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800618c <__ieee754_powf+0x460>
 80060a6:	eee6 7a07 	vfma.f32	s15, s12, s14
 80060aa:	ed91 7a00 	vldr	s14, [r1]
 80060ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80060b2:	ee07 2a10 	vmov	s14, r2
 80060b6:	eef0 6a67 	vmov.f32	s13, s15
 80060ba:	4a35      	ldr	r2, [pc, #212]	@ (8006190 <__ieee754_powf+0x464>)
 80060bc:	eee6 6a25 	vfma.f32	s13, s12, s11
 80060c0:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 80060c4:	ed92 5a00 	vldr	s10, [r2]
 80060c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80060cc:	ee76 6a85 	vadd.f32	s13, s13, s10
 80060d0:	ee76 6a87 	vadd.f32	s13, s13, s14
 80060d4:	ee16 2a90 	vmov	r2, s13
 80060d8:	4013      	ands	r3, r2
 80060da:	ee06 3a90 	vmov	s13, r3
 80060de:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80060e2:	ee37 7a45 	vsub.f32	s14, s14, s10
 80060e6:	eea6 7a65 	vfms.f32	s14, s12, s11
 80060ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80060ee:	e70f      	b.n	8005f10 <__ieee754_powf+0x1e4>
 80060f0:	2601      	movs	r6, #1
 80060f2:	e75d      	b.n	8005fb0 <__ieee754_powf+0x284>
 80060f4:	d152      	bne.n	800619c <__ieee754_powf+0x470>
 80060f6:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8006194 <__ieee754_powf+0x468>
 80060fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80060fe:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8006102:	eef4 6ac7 	vcmpe.f32	s13, s14
 8006106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800610a:	f73f af29 	bgt.w	8005f60 <__ieee754_powf+0x234>
 800610e:	2386      	movs	r3, #134	@ 0x86
 8006110:	e048      	b.n	80061a4 <__ieee754_powf+0x478>
 8006112:	4a21      	ldr	r2, [pc, #132]	@ (8006198 <__ieee754_powf+0x46c>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d907      	bls.n	8006128 <__ieee754_powf+0x3fc>
 8006118:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800611c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006120:	bf4c      	ite	mi
 8006122:	2001      	movmi	r0, #1
 8006124:	2000      	movpl	r0, #0
 8006126:	e6c1      	b.n	8005eac <__ieee754_powf+0x180>
 8006128:	d138      	bne.n	800619c <__ieee754_powf+0x470>
 800612a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800612e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8006132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006136:	dbea      	blt.n	800610e <__ieee754_powf+0x3e2>
 8006138:	e7ee      	b.n	8006118 <__ieee754_powf+0x3ec>
 800613a:	bf00      	nop
 800613c:	00000000 	.word	0x00000000
 8006140:	3f7ffff3 	.word	0x3f7ffff3
 8006144:	3f800007 	.word	0x3f800007
 8006148:	3eaaaaab 	.word	0x3eaaaaab
 800614c:	3fb8aa3b 	.word	0x3fb8aa3b
 8006150:	36eca570 	.word	0x36eca570
 8006154:	3fb8aa00 	.word	0x3fb8aa00
 8006158:	4b800000 	.word	0x4b800000
 800615c:	001cc471 	.word	0x001cc471
 8006160:	005db3d6 	.word	0x005db3d6
 8006164:	08006a58 	.word	0x08006a58
 8006168:	fffff000 	.word	0xfffff000
 800616c:	3e6c3255 	.word	0x3e6c3255
 8006170:	3e53f142 	.word	0x3e53f142
 8006174:	3e8ba305 	.word	0x3e8ba305
 8006178:	3edb6db7 	.word	0x3edb6db7
 800617c:	3f19999a 	.word	0x3f19999a
 8006180:	08006a48 	.word	0x08006a48
 8006184:	3f76384f 	.word	0x3f76384f
 8006188:	3f763800 	.word	0x3f763800
 800618c:	369dc3a0 	.word	0x369dc3a0
 8006190:	08006a50 	.word	0x08006a50
 8006194:	3338aa3c 	.word	0x3338aa3c
 8006198:	43160000 	.word	0x43160000
 800619c:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 80061a0:	d971      	bls.n	8006286 <__ieee754_powf+0x55a>
 80061a2:	15db      	asrs	r3, r3, #23
 80061a4:	3b7e      	subs	r3, #126	@ 0x7e
 80061a6:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80061aa:	4118      	asrs	r0, r3
 80061ac:	4408      	add	r0, r1
 80061ae:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80061b2:	4a3c      	ldr	r2, [pc, #240]	@ (80062a4 <__ieee754_powf+0x578>)
 80061b4:	3b7f      	subs	r3, #127	@ 0x7f
 80061b6:	411a      	asrs	r2, r3
 80061b8:	4002      	ands	r2, r0
 80061ba:	ee07 2a10 	vmov	s14, r2
 80061be:	f3c0 0016 	ubfx	r0, r0, #0, #23
 80061c2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80061c6:	f1c3 0317 	rsb	r3, r3, #23
 80061ca:	4118      	asrs	r0, r3
 80061cc:	2900      	cmp	r1, #0
 80061ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80061d2:	bfb8      	it	lt
 80061d4:	4240      	neglt	r0, r0
 80061d6:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80061da:	eddf 6a33 	vldr	s13, [pc, #204]	@ 80062a8 <__ieee754_powf+0x57c>
 80061de:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 80062ac <__ieee754_powf+0x580>
 80061e2:	ee17 3a10 	vmov	r3, s14
 80061e6:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80061ea:	f023 030f 	bic.w	r3, r3, #15
 80061ee:	ee07 3a10 	vmov	s14, r3
 80061f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061f6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80061fa:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80061fe:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 80062b0 <__ieee754_powf+0x584>
 8006202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006206:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800620a:	eef0 6a67 	vmov.f32	s13, s15
 800620e:	eee7 6a06 	vfma.f32	s13, s14, s12
 8006212:	eef0 5a66 	vmov.f32	s11, s13
 8006216:	eee7 5a46 	vfms.f32	s11, s14, s12
 800621a:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800621e:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8006222:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 80062b4 <__ieee754_powf+0x588>
 8006226:	eddf 5a24 	vldr	s11, [pc, #144]	@ 80062b8 <__ieee754_powf+0x58c>
 800622a:	eea7 6a25 	vfma.f32	s12, s14, s11
 800622e:	eddf 5a23 	vldr	s11, [pc, #140]	@ 80062bc <__ieee754_powf+0x590>
 8006232:	eee6 5a07 	vfma.f32	s11, s12, s14
 8006236:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 80062c0 <__ieee754_powf+0x594>
 800623a:	eea5 6a87 	vfma.f32	s12, s11, s14
 800623e:	eddf 5a21 	vldr	s11, [pc, #132]	@ 80062c4 <__ieee754_powf+0x598>
 8006242:	eee6 5a07 	vfma.f32	s11, s12, s14
 8006246:	eeb0 6a66 	vmov.f32	s12, s13
 800624a:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800624e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8006252:	ee66 5a86 	vmul.f32	s11, s13, s12
 8006256:	ee36 6a47 	vsub.f32	s12, s12, s14
 800625a:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800625e:	ee85 7a86 	vdiv.f32	s14, s11, s12
 8006262:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006266:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800626a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800626e:	ee10 3a10 	vmov	r3, s0
 8006272:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8006276:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800627a:	da06      	bge.n	800628a <__ieee754_powf+0x55e>
 800627c:	f000 f82e 	bl	80062dc <scalbnf>
 8006280:	ee20 0a08 	vmul.f32	s0, s0, s16
 8006284:	e56a      	b.n	8005d5c <__ieee754_powf+0x30>
 8006286:	2000      	movs	r0, #0
 8006288:	e7a5      	b.n	80061d6 <__ieee754_powf+0x4aa>
 800628a:	ee00 3a10 	vmov	s0, r3
 800628e:	e7f7      	b.n	8006280 <__ieee754_powf+0x554>
 8006290:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8006294:	e562      	b.n	8005d5c <__ieee754_powf+0x30>
 8006296:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 80062c8 <__ieee754_powf+0x59c>
 800629a:	e55f      	b.n	8005d5c <__ieee754_powf+0x30>
 800629c:	eeb0 0a48 	vmov.f32	s0, s16
 80062a0:	e55c      	b.n	8005d5c <__ieee754_powf+0x30>
 80062a2:	bf00      	nop
 80062a4:	ff800000 	.word	0xff800000
 80062a8:	3f317218 	.word	0x3f317218
 80062ac:	3f317200 	.word	0x3f317200
 80062b0:	35bfbe8c 	.word	0x35bfbe8c
 80062b4:	b5ddea0e 	.word	0xb5ddea0e
 80062b8:	3331bb4c 	.word	0x3331bb4c
 80062bc:	388ab355 	.word	0x388ab355
 80062c0:	bb360b61 	.word	0xbb360b61
 80062c4:	3e2aaaab 	.word	0x3e2aaaab
 80062c8:	00000000 	.word	0x00000000

080062cc <fabsf>:
 80062cc:	ee10 3a10 	vmov	r3, s0
 80062d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80062d4:	ee00 3a10 	vmov	s0, r3
 80062d8:	4770      	bx	lr
	...

080062dc <scalbnf>:
 80062dc:	ee10 3a10 	vmov	r3, s0
 80062e0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80062e4:	d02b      	beq.n	800633e <scalbnf+0x62>
 80062e6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80062ea:	d302      	bcc.n	80062f2 <scalbnf+0x16>
 80062ec:	ee30 0a00 	vadd.f32	s0, s0, s0
 80062f0:	4770      	bx	lr
 80062f2:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80062f6:	d123      	bne.n	8006340 <scalbnf+0x64>
 80062f8:	4b24      	ldr	r3, [pc, #144]	@ (800638c <scalbnf+0xb0>)
 80062fa:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8006390 <scalbnf+0xb4>
 80062fe:	4298      	cmp	r0, r3
 8006300:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006304:	db17      	blt.n	8006336 <scalbnf+0x5a>
 8006306:	ee10 3a10 	vmov	r3, s0
 800630a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800630e:	3a19      	subs	r2, #25
 8006310:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8006314:	4288      	cmp	r0, r1
 8006316:	dd15      	ble.n	8006344 <scalbnf+0x68>
 8006318:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8006394 <scalbnf+0xb8>
 800631c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8006398 <scalbnf+0xbc>
 8006320:	ee10 3a10 	vmov	r3, s0
 8006324:	eeb0 7a67 	vmov.f32	s14, s15
 8006328:	2b00      	cmp	r3, #0
 800632a:	bfb8      	it	lt
 800632c:	eef0 7a66 	vmovlt.f32	s15, s13
 8006330:	ee27 0a87 	vmul.f32	s0, s15, s14
 8006334:	4770      	bx	lr
 8006336:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800639c <scalbnf+0xc0>
 800633a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800633e:	4770      	bx	lr
 8006340:	0dd2      	lsrs	r2, r2, #23
 8006342:	e7e5      	b.n	8006310 <scalbnf+0x34>
 8006344:	4410      	add	r0, r2
 8006346:	28fe      	cmp	r0, #254	@ 0xfe
 8006348:	dce6      	bgt.n	8006318 <scalbnf+0x3c>
 800634a:	2800      	cmp	r0, #0
 800634c:	dd06      	ble.n	800635c <scalbnf+0x80>
 800634e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006352:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8006356:	ee00 3a10 	vmov	s0, r3
 800635a:	4770      	bx	lr
 800635c:	f110 0f16 	cmn.w	r0, #22
 8006360:	da09      	bge.n	8006376 <scalbnf+0x9a>
 8006362:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800639c <scalbnf+0xc0>
 8006366:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80063a0 <scalbnf+0xc4>
 800636a:	ee10 3a10 	vmov	r3, s0
 800636e:	eeb0 7a67 	vmov.f32	s14, s15
 8006372:	2b00      	cmp	r3, #0
 8006374:	e7d9      	b.n	800632a <scalbnf+0x4e>
 8006376:	3019      	adds	r0, #25
 8006378:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800637c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8006380:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80063a4 <scalbnf+0xc8>
 8006384:	ee07 3a90 	vmov	s15, r3
 8006388:	e7d7      	b.n	800633a <scalbnf+0x5e>
 800638a:	bf00      	nop
 800638c:	ffff3cb0 	.word	0xffff3cb0
 8006390:	4c000000 	.word	0x4c000000
 8006394:	7149f2ca 	.word	0x7149f2ca
 8006398:	f149f2ca 	.word	0xf149f2ca
 800639c:	0da24260 	.word	0x0da24260
 80063a0:	8da24260 	.word	0x8da24260
 80063a4:	33000000 	.word	0x33000000

080063a8 <with_errnof>:
 80063a8:	b510      	push	{r4, lr}
 80063aa:	ed2d 8b02 	vpush	{d8}
 80063ae:	eeb0 8a40 	vmov.f32	s16, s0
 80063b2:	4604      	mov	r4, r0
 80063b4:	f7fd fb54 	bl	8003a60 <__errno>
 80063b8:	eeb0 0a48 	vmov.f32	s0, s16
 80063bc:	ecbd 8b02 	vpop	{d8}
 80063c0:	6004      	str	r4, [r0, #0]
 80063c2:	bd10      	pop	{r4, pc}

080063c4 <xflowf>:
 80063c4:	b130      	cbz	r0, 80063d4 <xflowf+0x10>
 80063c6:	eef1 7a40 	vneg.f32	s15, s0
 80063ca:	ee27 0a80 	vmul.f32	s0, s15, s0
 80063ce:	2022      	movs	r0, #34	@ 0x22
 80063d0:	f7ff bfea 	b.w	80063a8 <with_errnof>
 80063d4:	eef0 7a40 	vmov.f32	s15, s0
 80063d8:	e7f7      	b.n	80063ca <xflowf+0x6>
	...

080063dc <__math_uflowf>:
 80063dc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80063e4 <__math_uflowf+0x8>
 80063e0:	f7ff bff0 	b.w	80063c4 <xflowf>
 80063e4:	10000000 	.word	0x10000000

080063e8 <__math_oflowf>:
 80063e8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80063f0 <__math_oflowf+0x8>
 80063ec:	f7ff bfea 	b.w	80063c4 <xflowf>
 80063f0:	70000000 	.word	0x70000000

080063f4 <__ieee754_sqrtf>:
 80063f4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80063f8:	4770      	bx	lr
	...

080063fc <__ieee754_logf>:
 80063fc:	ee10 3a10 	vmov	r3, s0
 8006400:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8006404:	d106      	bne.n	8006414 <__ieee754_logf+0x18>
 8006406:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 80065a0 <__ieee754_logf+0x1a4>
 800640a:	eddf 7a66 	vldr	s15, [pc, #408]	@ 80065a4 <__ieee754_logf+0x1a8>
 800640e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8006412:	4770      	bx	lr
 8006414:	2b00      	cmp	r3, #0
 8006416:	461a      	mov	r2, r3
 8006418:	da02      	bge.n	8006420 <__ieee754_logf+0x24>
 800641a:	ee30 7a40 	vsub.f32	s14, s0, s0
 800641e:	e7f4      	b.n	800640a <__ieee754_logf+0xe>
 8006420:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8006424:	db02      	blt.n	800642c <__ieee754_logf+0x30>
 8006426:	ee30 0a00 	vadd.f32	s0, s0, s0
 800642a:	4770      	bx	lr
 800642c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006430:	bfb8      	it	lt
 8006432:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 80065a8 <__ieee754_logf+0x1ac>
 8006436:	485d      	ldr	r0, [pc, #372]	@ (80065ac <__ieee754_logf+0x1b0>)
 8006438:	bfbe      	ittt	lt
 800643a:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800643e:	f06f 0118 	mvnlt.w	r1, #24
 8006442:	ee17 2a90 	vmovlt	r2, s15
 8006446:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800644a:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800644e:	4410      	add	r0, r2
 8006450:	bfa8      	it	ge
 8006452:	2100      	movge	r1, #0
 8006454:	3b7f      	subs	r3, #127	@ 0x7f
 8006456:	440b      	add	r3, r1
 8006458:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 800645c:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 8006460:	4311      	orrs	r1, r2
 8006462:	ee00 1a10 	vmov	s0, r1
 8006466:	4952      	ldr	r1, [pc, #328]	@ (80065b0 <__ieee754_logf+0x1b4>)
 8006468:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 800646c:	f102 000f 	add.w	r0, r2, #15
 8006470:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8006474:	4001      	ands	r1, r0
 8006476:	ee30 0a67 	vsub.f32	s0, s0, s15
 800647a:	bb89      	cbnz	r1, 80064e0 <__ieee754_logf+0xe4>
 800647c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006484:	d10f      	bne.n	80064a6 <__ieee754_logf+0xaa>
 8006486:	2b00      	cmp	r3, #0
 8006488:	f000 8087 	beq.w	800659a <__ieee754_logf+0x19e>
 800648c:	ee07 3a90 	vmov	s15, r3
 8006490:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 80065b4 <__ieee754_logf+0x1b8>
 8006494:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 80065b8 <__ieee754_logf+0x1bc>
 8006498:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800649c:	ee27 0a80 	vmul.f32	s0, s15, s0
 80064a0:	eea7 0a87 	vfma.f32	s0, s15, s14
 80064a4:	4770      	bx	lr
 80064a6:	eddf 6a45 	vldr	s13, [pc, #276]	@ 80065bc <__ieee754_logf+0x1c0>
 80064aa:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80064ae:	eee0 7a66 	vfms.f32	s15, s0, s13
 80064b2:	ee20 7a00 	vmul.f32	s14, s0, s0
 80064b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80064ba:	b913      	cbnz	r3, 80064c2 <__ieee754_logf+0xc6>
 80064bc:	ee30 0a47 	vsub.f32	s0, s0, s14
 80064c0:	4770      	bx	lr
 80064c2:	ee07 3a90 	vmov	s15, r3
 80064c6:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80065b4 <__ieee754_logf+0x1b8>
 80064ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064ce:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80064d2:	ee37 0a40 	vsub.f32	s0, s14, s0
 80064d6:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80065b8 <__ieee754_logf+0x1bc>
 80064da:	ee97 0a87 	vfnms.f32	s0, s15, s14
 80064de:	4770      	bx	lr
 80064e0:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80064e4:	ee70 7a27 	vadd.f32	s15, s0, s15
 80064e8:	eddf 5a35 	vldr	s11, [pc, #212]	@ 80065c0 <__ieee754_logf+0x1c4>
 80064ec:	eddf 4a35 	vldr	s9, [pc, #212]	@ 80065c4 <__ieee754_logf+0x1c8>
 80064f0:	4935      	ldr	r1, [pc, #212]	@ (80065c8 <__ieee754_logf+0x1cc>)
 80064f2:	ee80 6a27 	vdiv.f32	s12, s0, s15
 80064f6:	4411      	add	r1, r2
 80064f8:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 80064fc:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 8006500:	430a      	orrs	r2, r1
 8006502:	2a00      	cmp	r2, #0
 8006504:	ee07 3a90 	vmov	s15, r3
 8006508:	ee26 5a06 	vmul.f32	s10, s12, s12
 800650c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006510:	ee25 7a05 	vmul.f32	s14, s10, s10
 8006514:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 80065cc <__ieee754_logf+0x1d0>
 8006518:	eee7 7a25 	vfma.f32	s15, s14, s11
 800651c:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 80065d0 <__ieee754_logf+0x1d4>
 8006520:	eee7 5a87 	vfma.f32	s11, s15, s14
 8006524:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 80065d4 <__ieee754_logf+0x1d8>
 8006528:	eee7 7a24 	vfma.f32	s15, s14, s9
 800652c:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 80065d8 <__ieee754_logf+0x1dc>
 8006530:	eee7 4a87 	vfma.f32	s9, s15, s14
 8006534:	eddf 7a29 	vldr	s15, [pc, #164]	@ 80065dc <__ieee754_logf+0x1e0>
 8006538:	eee4 7a87 	vfma.f32	s15, s9, s14
 800653c:	ee67 7a85 	vmul.f32	s15, s15, s10
 8006540:	eee5 7a87 	vfma.f32	s15, s11, s14
 8006544:	dd1a      	ble.n	800657c <__ieee754_logf+0x180>
 8006546:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800654a:	ee20 7a07 	vmul.f32	s14, s0, s14
 800654e:	ee27 7a00 	vmul.f32	s14, s14, s0
 8006552:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006556:	ee67 7a86 	vmul.f32	s15, s15, s12
 800655a:	b913      	cbnz	r3, 8006562 <__ieee754_logf+0x166>
 800655c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006560:	e7ac      	b.n	80064bc <__ieee754_logf+0xc0>
 8006562:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 80065b4 <__ieee754_logf+0x1b8>
 8006566:	eee6 7a86 	vfma.f32	s15, s13, s12
 800656a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800656e:	ee37 0a40 	vsub.f32	s0, s14, s0
 8006572:	eddf 7a11 	vldr	s15, [pc, #68]	@ 80065b8 <__ieee754_logf+0x1bc>
 8006576:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800657a:	4770      	bx	lr
 800657c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8006580:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006584:	b913      	cbnz	r3, 800658c <__ieee754_logf+0x190>
 8006586:	ee30 0a67 	vsub.f32	s0, s0, s15
 800658a:	4770      	bx	lr
 800658c:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80065b4 <__ieee754_logf+0x1b8>
 8006590:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8006594:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8006598:	e7eb      	b.n	8006572 <__ieee754_logf+0x176>
 800659a:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 80065a4 <__ieee754_logf+0x1a8>
 800659e:	4770      	bx	lr
 80065a0:	cc000000 	.word	0xcc000000
 80065a4:	00000000 	.word	0x00000000
 80065a8:	4c000000 	.word	0x4c000000
 80065ac:	004afb20 	.word	0x004afb20
 80065b0:	007ffff0 	.word	0x007ffff0
 80065b4:	3717f7d1 	.word	0x3717f7d1
 80065b8:	3f317180 	.word	0x3f317180
 80065bc:	3eaaaaab 	.word	0x3eaaaaab
 80065c0:	3e1cd04f 	.word	0x3e1cd04f
 80065c4:	3e178897 	.word	0x3e178897
 80065c8:	ffcf5c30 	.word	0xffcf5c30
 80065cc:	3e638e29 	.word	0x3e638e29
 80065d0:	3ecccccd 	.word	0x3ecccccd
 80065d4:	3e3a3325 	.word	0x3e3a3325
 80065d8:	3e924925 	.word	0x3e924925
 80065dc:	3f2aaaab 	.word	0x3f2aaaab

080065e0 <_init>:
 80065e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065e2:	bf00      	nop
 80065e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065e6:	bc08      	pop	{r3}
 80065e8:	469e      	mov	lr, r3
 80065ea:	4770      	bx	lr

080065ec <_fini>:
 80065ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ee:	bf00      	nop
 80065f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065f2:	bc08      	pop	{r3}
 80065f4:	469e      	mov	lr, r3
 80065f6:	4770      	bx	lr
