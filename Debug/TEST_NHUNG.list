
TEST_NHUNG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006450  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  080065f0  080065f0  000075f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a58  08006a58  000081e0  2**0
                  CONTENTS
  4 .ARM          00000008  08006a58  08006a58  00007a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a60  08006a60  000081e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a60  08006a60  00007a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006a64  08006a64  00007a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  08006a68  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  200001e0  08006c48  000081e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  08006c48  0000835c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000081e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005b88  00000000  00000000  00008210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001818  00000000  00000000  0000dd98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005b8  00000000  00000000  0000f5b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000418  00000000  00000000  0000fb68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e7d  00000000  00000000  0000ff80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008c4b  00000000  00000000  00026dfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000872fe  00000000  00000000  0002fa48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b6d46  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000279c  00000000  00000000  000b6d8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000b9528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080065d8 	.word	0x080065d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	080065d8 	.word	0x080065d8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <I2C1_Init>:
#include "i2c_lcd.h"
#include "system_config.h"
#include "stm32f4xx.h"
#include "stm32f4xx_hal.h"

void I2C1_Init(void) {
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000eac:	4b23      	ldr	r3, [pc, #140]	@ (8000f3c <I2C1_Init+0x94>)
 8000eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb0:	4a22      	ldr	r2, [pc, #136]	@ (8000f3c <I2C1_Init+0x94>)
 8000eb2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000eb6:	6413      	str	r3, [r2, #64]	@ 0x40
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000eb8:	4b20      	ldr	r3, [pc, #128]	@ (8000f3c <I2C1_Init+0x94>)
 8000eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebc:	4a1f      	ldr	r2, [pc, #124]	@ (8000f3c <I2C1_Init+0x94>)
 8000ebe:	f043 0302 	orr.w	r3, r3, #2
 8000ec2:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOB->MODER &= ~((3U << (I2C_SCL_PIN * 2)) | (3U << (I2C_SDA_PIN * 2)));
 8000ec4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f40 <I2C1_Init+0x98>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a1d      	ldr	r2, [pc, #116]	@ (8000f40 <I2C1_Init+0x98>)
 8000eca:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000ece:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= (2U << (I2C_SCL_PIN * 2)) | (2U << (I2C_SDA_PIN * 2));
 8000ed0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f40 <I2C1_Init+0x98>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a1a      	ldr	r2, [pc, #104]	@ (8000f40 <I2C1_Init+0x98>)
 8000ed6:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 8000eda:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER |= (1U << I2C_SCL_PIN) | (1U << I2C_SDA_PIN);
 8000edc:	4b18      	ldr	r3, [pc, #96]	@ (8000f40 <I2C1_Init+0x98>)
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	4a17      	ldr	r2, [pc, #92]	@ (8000f40 <I2C1_Init+0x98>)
 8000ee2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000ee6:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR |= (3U << (I2C_SCL_PIN * 2)) | (3U << (I2C_SDA_PIN * 2));
 8000ee8:	4b15      	ldr	r3, [pc, #84]	@ (8000f40 <I2C1_Init+0x98>)
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	4a14      	ldr	r2, [pc, #80]	@ (8000f40 <I2C1_Init+0x98>)
 8000eee:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 8000ef2:	6093      	str	r3, [r2, #8]
    GPIOB->PUPDR |= (1U << (I2C_SCL_PIN * 2)) | (1U << (I2C_SDA_PIN * 2));
 8000ef4:	4b12      	ldr	r3, [pc, #72]	@ (8000f40 <I2C1_Init+0x98>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	4a11      	ldr	r2, [pc, #68]	@ (8000f40 <I2C1_Init+0x98>)
 8000efa:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 8000efe:	60d3      	str	r3, [r2, #12]
    GPIOB->AFR[1] |= (4U << ((I2C_SCL_PIN - 8) * 4)) | (4U << ((I2C_SDA_PIN - 8) * 4));
 8000f00:	4b0f      	ldr	r3, [pc, #60]	@ (8000f40 <I2C1_Init+0x98>)
 8000f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f04:	4a0e      	ldr	r2, [pc, #56]	@ (8000f40 <I2C1_Init+0x98>)
 8000f06:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8000f0a:	6253      	str	r3, [r2, #36]	@ 0x24
    I2C1->CR1 = 0;
 8000f0c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f44 <I2C1_Init+0x9c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
    I2C1->CR2 = 42;
 8000f12:	4b0c      	ldr	r3, [pc, #48]	@ (8000f44 <I2C1_Init+0x9c>)
 8000f14:	222a      	movs	r2, #42	@ 0x2a
 8000f16:	605a      	str	r2, [r3, #4]
    I2C1->CCR = 210;
 8000f18:	4b0a      	ldr	r3, [pc, #40]	@ (8000f44 <I2C1_Init+0x9c>)
 8000f1a:	22d2      	movs	r2, #210	@ 0xd2
 8000f1c:	61da      	str	r2, [r3, #28]
    I2C1->TRISE = 43;
 8000f1e:	4b09      	ldr	r3, [pc, #36]	@ (8000f44 <I2C1_Init+0x9c>)
 8000f20:	222b      	movs	r2, #43	@ 0x2b
 8000f22:	621a      	str	r2, [r3, #32]
    I2C1->CR1 |= I2C_CR1_PE;
 8000f24:	4b07      	ldr	r3, [pc, #28]	@ (8000f44 <I2C1_Init+0x9c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a06      	ldr	r2, [pc, #24]	@ (8000f44 <I2C1_Init+0x9c>)
 8000f2a:	f043 0301 	orr.w	r3, r3, #1
 8000f2e:	6013      	str	r3, [r2, #0]
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	40023800 	.word	0x40023800
 8000f40:	40020400 	.word	0x40020400
 8000f44:	40005400 	.word	0x40005400

08000f48 <I2C1_SendBytes>:


void I2C1_SendBytes(uint8_t addr, uint8_t *data, uint8_t len) {
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	6039      	str	r1, [r7, #0]
 8000f52:	71fb      	strb	r3, [r7, #7]
 8000f54:	4613      	mov	r3, r2
 8000f56:	71bb      	strb	r3, [r7, #6]
    uint32_t timeout = 1000000;
 8000f58:	4b42      	ldr	r3, [pc, #264]	@ (8001064 <I2C1_SendBytes+0x11c>)
 8000f5a:	60fb      	str	r3, [r7, #12]
    while (I2C1->SR2 & I2C_SR2_BUSY && timeout--) {
 8000f5c:	e002      	b.n	8000f64 <I2C1_SendBytes+0x1c>
        if (timeout == 0) return;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d070      	beq.n	8001046 <I2C1_SendBytes+0xfe>
    while (I2C1->SR2 & I2C_SR2_BUSY && timeout--) {
 8000f64:	4b40      	ldr	r3, [pc, #256]	@ (8001068 <I2C1_SendBytes+0x120>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	f003 0302 	and.w	r3, r3, #2
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d004      	beq.n	8000f7a <I2C1_SendBytes+0x32>
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	1e5a      	subs	r2, r3, #1
 8000f74:	60fa      	str	r2, [r7, #12]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d1f1      	bne.n	8000f5e <I2C1_SendBytes+0x16>
    }
    I2C1->CR1 |= I2C_CR1_START;
 8000f7a:	4b3b      	ldr	r3, [pc, #236]	@ (8001068 <I2C1_SendBytes+0x120>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a3a      	ldr	r2, [pc, #232]	@ (8001068 <I2C1_SendBytes+0x120>)
 8000f80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f84:	6013      	str	r3, [r2, #0]
    timeout = 1000000;
 8000f86:	4b37      	ldr	r3, [pc, #220]	@ (8001064 <I2C1_SendBytes+0x11c>)
 8000f88:	60fb      	str	r3, [r7, #12]
    while (!(I2C1->SR1 & I2C_SR1_SB) && timeout--) {
 8000f8a:	e002      	b.n	8000f92 <I2C1_SendBytes+0x4a>
        if (timeout == 0) return;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d05b      	beq.n	800104a <I2C1_SendBytes+0x102>
    while (!(I2C1->SR1 & I2C_SR1_SB) && timeout--) {
 8000f92:	4b35      	ldr	r3, [pc, #212]	@ (8001068 <I2C1_SendBytes+0x120>)
 8000f94:	695b      	ldr	r3, [r3, #20]
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d104      	bne.n	8000fa8 <I2C1_SendBytes+0x60>
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	1e5a      	subs	r2, r3, #1
 8000fa2:	60fa      	str	r2, [r7, #12]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d1f1      	bne.n	8000f8c <I2C1_SendBytes+0x44>
    }
    I2C1->DR = addr;
 8000fa8:	4a2f      	ldr	r2, [pc, #188]	@ (8001068 <I2C1_SendBytes+0x120>)
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	6113      	str	r3, [r2, #16]
    timeout = 1000000;
 8000fae:	4b2d      	ldr	r3, [pc, #180]	@ (8001064 <I2C1_SendBytes+0x11c>)
 8000fb0:	60fb      	str	r3, [r7, #12]
    while (!(I2C1->SR1 & I2C_SR1_ADDR) && timeout--) {
 8000fb2:	e002      	b.n	8000fba <I2C1_SendBytes+0x72>
        if (timeout == 0) return;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d049      	beq.n	800104e <I2C1_SendBytes+0x106>
    while (!(I2C1->SR1 & I2C_SR1_ADDR) && timeout--) {
 8000fba:	4b2b      	ldr	r3, [pc, #172]	@ (8001068 <I2C1_SendBytes+0x120>)
 8000fbc:	695b      	ldr	r3, [r3, #20]
 8000fbe:	f003 0302 	and.w	r3, r3, #2
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d104      	bne.n	8000fd0 <I2C1_SendBytes+0x88>
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	1e5a      	subs	r2, r3, #1
 8000fca:	60fa      	str	r2, [r7, #12]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d1f1      	bne.n	8000fb4 <I2C1_SendBytes+0x6c>
    }
    (void)I2C1->SR2;
 8000fd0:	4b25      	ldr	r3, [pc, #148]	@ (8001068 <I2C1_SendBytes+0x120>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
    for (uint8_t i = 0; i < len; i++) {
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	72fb      	strb	r3, [r7, #11]
 8000fd8:	e019      	b.n	800100e <I2C1_SendBytes+0xc6>
        timeout = 1000000;
 8000fda:	4b22      	ldr	r3, [pc, #136]	@ (8001064 <I2C1_SendBytes+0x11c>)
 8000fdc:	60fb      	str	r3, [r7, #12]
        while (!(I2C1->SR1 & I2C_SR1_TXE) && timeout--) {
 8000fde:	e002      	b.n	8000fe6 <I2C1_SendBytes+0x9e>
            if (timeout == 0) return;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d035      	beq.n	8001052 <I2C1_SendBytes+0x10a>
        while (!(I2C1->SR1 & I2C_SR1_TXE) && timeout--) {
 8000fe6:	4b20      	ldr	r3, [pc, #128]	@ (8001068 <I2C1_SendBytes+0x120>)
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d104      	bne.n	8000ffc <I2C1_SendBytes+0xb4>
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	1e5a      	subs	r2, r3, #1
 8000ff6:	60fa      	str	r2, [r7, #12]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d1f1      	bne.n	8000fe0 <I2C1_SendBytes+0x98>
        }
        I2C1->DR = data[i];
 8000ffc:	7afb      	ldrb	r3, [r7, #11]
 8000ffe:	683a      	ldr	r2, [r7, #0]
 8001000:	4413      	add	r3, r2
 8001002:	781a      	ldrb	r2, [r3, #0]
 8001004:	4b18      	ldr	r3, [pc, #96]	@ (8001068 <I2C1_SendBytes+0x120>)
 8001006:	611a      	str	r2, [r3, #16]
    for (uint8_t i = 0; i < len; i++) {
 8001008:	7afb      	ldrb	r3, [r7, #11]
 800100a:	3301      	adds	r3, #1
 800100c:	72fb      	strb	r3, [r7, #11]
 800100e:	7afa      	ldrb	r2, [r7, #11]
 8001010:	79bb      	ldrb	r3, [r7, #6]
 8001012:	429a      	cmp	r2, r3
 8001014:	d3e1      	bcc.n	8000fda <I2C1_SendBytes+0x92>
    }
    timeout = 1000000;
 8001016:	4b13      	ldr	r3, [pc, #76]	@ (8001064 <I2C1_SendBytes+0x11c>)
 8001018:	60fb      	str	r3, [r7, #12]
    while (!(I2C1->SR1 & I2C_SR1_BTF) && timeout--) {
 800101a:	e002      	b.n	8001022 <I2C1_SendBytes+0xda>
        if (timeout == 0) return;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d019      	beq.n	8001056 <I2C1_SendBytes+0x10e>
    while (!(I2C1->SR1 & I2C_SR1_BTF) && timeout--) {
 8001022:	4b11      	ldr	r3, [pc, #68]	@ (8001068 <I2C1_SendBytes+0x120>)
 8001024:	695b      	ldr	r3, [r3, #20]
 8001026:	f003 0304 	and.w	r3, r3, #4
 800102a:	2b00      	cmp	r3, #0
 800102c:	d104      	bne.n	8001038 <I2C1_SendBytes+0xf0>
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	1e5a      	subs	r2, r3, #1
 8001032:	60fa      	str	r2, [r7, #12]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d1f1      	bne.n	800101c <I2C1_SendBytes+0xd4>
    }
    I2C1->CR1 |= I2C_CR1_STOP;
 8001038:	4b0b      	ldr	r3, [pc, #44]	@ (8001068 <I2C1_SendBytes+0x120>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a0a      	ldr	r2, [pc, #40]	@ (8001068 <I2C1_SendBytes+0x120>)
 800103e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001042:	6013      	str	r3, [r2, #0]
 8001044:	e008      	b.n	8001058 <I2C1_SendBytes+0x110>
        if (timeout == 0) return;
 8001046:	bf00      	nop
 8001048:	e006      	b.n	8001058 <I2C1_SendBytes+0x110>
        if (timeout == 0) return;
 800104a:	bf00      	nop
 800104c:	e004      	b.n	8001058 <I2C1_SendBytes+0x110>
        if (timeout == 0) return;
 800104e:	bf00      	nop
 8001050:	e002      	b.n	8001058 <I2C1_SendBytes+0x110>
            if (timeout == 0) return;
 8001052:	bf00      	nop
 8001054:	e000      	b.n	8001058 <I2C1_SendBytes+0x110>
        if (timeout == 0) return;
 8001056:	bf00      	nop
}
 8001058:	3714      	adds	r7, #20
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	000f4240 	.word	0x000f4240
 8001068:	40005400 	.word	0x40005400

0800106c <LCD_SendCommand>:

void LCD_SendCommand(uint8_t cmd) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	71fb      	strb	r3, [r7, #7]
    uint8_t data[4];
    data[0] = (cmd & 0xF0) | 0x0C;
 8001076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107a:	f023 030f 	bic.w	r3, r3, #15
 800107e:	b25b      	sxtb	r3, r3
 8001080:	f043 030c 	orr.w	r3, r3, #12
 8001084:	b25b      	sxtb	r3, r3
 8001086:	b2db      	uxtb	r3, r3
 8001088:	733b      	strb	r3, [r7, #12]
    data[1] = (cmd & 0xF0) | 0x08;
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	f023 030f 	bic.w	r3, r3, #15
 8001092:	b25b      	sxtb	r3, r3
 8001094:	f043 0308 	orr.w	r3, r3, #8
 8001098:	b25b      	sxtb	r3, r3
 800109a:	b2db      	uxtb	r3, r3
 800109c:	737b      	strb	r3, [r7, #13]
    data[2] = ((cmd << 4) & 0xF0) | 0x0C;
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	011b      	lsls	r3, r3, #4
 80010a2:	b25b      	sxtb	r3, r3
 80010a4:	f043 030c 	orr.w	r3, r3, #12
 80010a8:	b25b      	sxtb	r3, r3
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	73bb      	strb	r3, [r7, #14]
    data[3] = ((cmd << 4) & 0xF0) | 0x08;
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	011b      	lsls	r3, r3, #4
 80010b2:	b25b      	sxtb	r3, r3
 80010b4:	f043 0308 	orr.w	r3, r3, #8
 80010b8:	b25b      	sxtb	r3, r3
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	73fb      	strb	r3, [r7, #15]
    I2C1_SendBytes(LCD_I2C_ADDR, data, 4);
 80010be:	f107 030c 	add.w	r3, r7, #12
 80010c2:	2204      	movs	r2, #4
 80010c4:	4619      	mov	r1, r3
 80010c6:	204e      	movs	r0, #78	@ 0x4e
 80010c8:	f7ff ff3e 	bl	8000f48 <I2C1_SendBytes>
    delay_ms(2);
 80010cc:	2002      	movs	r0, #2
 80010ce:	f001 f809 	bl	80020e4 <delay_ms>
}
 80010d2:	bf00      	nop
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <LCD_SendData>:

void LCD_SendData(uint8_t data) {
 80010da:	b580      	push	{r7, lr}
 80010dc:	b084      	sub	sp, #16
 80010de:	af00      	add	r7, sp, #0
 80010e0:	4603      	mov	r3, r0
 80010e2:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];
    buf[0] = (data & 0xF0) | 0x0D;
 80010e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e8:	f023 030f 	bic.w	r3, r3, #15
 80010ec:	b25b      	sxtb	r3, r3
 80010ee:	f043 030d 	orr.w	r3, r3, #13
 80010f2:	b25b      	sxtb	r3, r3
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	733b      	strb	r3, [r7, #12]
    buf[1] = (data & 0xF0) | 0x09;
 80010f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fc:	f023 030f 	bic.w	r3, r3, #15
 8001100:	b25b      	sxtb	r3, r3
 8001102:	f043 0309 	orr.w	r3, r3, #9
 8001106:	b25b      	sxtb	r3, r3
 8001108:	b2db      	uxtb	r3, r3
 800110a:	737b      	strb	r3, [r7, #13]
    buf[2] = ((data << 4) & 0xF0) | 0x0D;
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	011b      	lsls	r3, r3, #4
 8001110:	b25b      	sxtb	r3, r3
 8001112:	f043 030d 	orr.w	r3, r3, #13
 8001116:	b25b      	sxtb	r3, r3
 8001118:	b2db      	uxtb	r3, r3
 800111a:	73bb      	strb	r3, [r7, #14]
    buf[3] = ((data << 4) & 0xF0) | 0x09;
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	011b      	lsls	r3, r3, #4
 8001120:	b25b      	sxtb	r3, r3
 8001122:	f043 0309 	orr.w	r3, r3, #9
 8001126:	b25b      	sxtb	r3, r3
 8001128:	b2db      	uxtb	r3, r3
 800112a:	73fb      	strb	r3, [r7, #15]
    I2C1_SendBytes(LCD_I2C_ADDR, buf, 4);
 800112c:	f107 030c 	add.w	r3, r7, #12
 8001130:	2204      	movs	r2, #4
 8001132:	4619      	mov	r1, r3
 8001134:	204e      	movs	r0, #78	@ 0x4e
 8001136:	f7ff ff07 	bl	8000f48 <I2C1_SendBytes>
    delay_ms(2);
 800113a:	2002      	movs	r0, #2
 800113c:	f000 ffd2 	bl	80020e4 <delay_ms>
}
 8001140:	bf00      	nop
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <LCD_SendString>:

void LCD_SendString(char *str) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
    while (*str) {
 8001150:	e006      	b.n	8001160 <LCD_SendString+0x18>
        LCD_SendData(*str++);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	1c5a      	adds	r2, r3, #1
 8001156:	607a      	str	r2, [r7, #4]
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff ffbd 	bl	80010da <LCD_SendData>
    while (*str) {
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d1f4      	bne.n	8001152 <LCD_SendString+0xa>
    }
}
 8001168:	bf00      	nop
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <LCD_Init>:

void LCD_Init(void) {
 8001172:	b580      	push	{r7, lr}
 8001174:	af00      	add	r7, sp, #0
    delay_ms(50);
 8001176:	2032      	movs	r0, #50	@ 0x32
 8001178:	f000 ffb4 	bl	80020e4 <delay_ms>
    LCD_SendCommand(0x30);
 800117c:	2030      	movs	r0, #48	@ 0x30
 800117e:	f7ff ff75 	bl	800106c <LCD_SendCommand>
    delay_ms(5);
 8001182:	2005      	movs	r0, #5
 8001184:	f000 ffae 	bl	80020e4 <delay_ms>
    LCD_SendCommand(0x30);
 8001188:	2030      	movs	r0, #48	@ 0x30
 800118a:	f7ff ff6f 	bl	800106c <LCD_SendCommand>
    delay_ms(1);
 800118e:	2001      	movs	r0, #1
 8001190:	f000 ffa8 	bl	80020e4 <delay_ms>
    LCD_SendCommand(0x30);
 8001194:	2030      	movs	r0, #48	@ 0x30
 8001196:	f7ff ff69 	bl	800106c <LCD_SendCommand>
    delay_ms(1);
 800119a:	2001      	movs	r0, #1
 800119c:	f000 ffa2 	bl	80020e4 <delay_ms>
    LCD_SendCommand(0x02);
 80011a0:	2002      	movs	r0, #2
 80011a2:	f7ff ff63 	bl	800106c <LCD_SendCommand>
    delay_ms(1);
 80011a6:	2001      	movs	r0, #1
 80011a8:	f000 ff9c 	bl	80020e4 <delay_ms>
    LCD_SendCommand(0x28);
 80011ac:	2028      	movs	r0, #40	@ 0x28
 80011ae:	f7ff ff5d 	bl	800106c <LCD_SendCommand>
    delay_ms(1);
 80011b2:	2001      	movs	r0, #1
 80011b4:	f000 ff96 	bl	80020e4 <delay_ms>
    LCD_SendCommand(0x08);
 80011b8:	2008      	movs	r0, #8
 80011ba:	f7ff ff57 	bl	800106c <LCD_SendCommand>
    delay_ms(1);
 80011be:	2001      	movs	r0, #1
 80011c0:	f000 ff90 	bl	80020e4 <delay_ms>
    LCD_SendCommand(0x01);
 80011c4:	2001      	movs	r0, #1
 80011c6:	f7ff ff51 	bl	800106c <LCD_SendCommand>
    delay_ms(2);
 80011ca:	2002      	movs	r0, #2
 80011cc:	f000 ff8a 	bl	80020e4 <delay_ms>
    LCD_SendCommand(0x06);
 80011d0:	2006      	movs	r0, #6
 80011d2:	f7ff ff4b 	bl	800106c <LCD_SendCommand>
    delay_ms(1);
 80011d6:	2001      	movs	r0, #1
 80011d8:	f000 ff84 	bl	80020e4 <delay_ms>
    LCD_SendCommand(0x0C);
 80011dc:	200c      	movs	r0, #12
 80011de:	f7ff ff45 	bl	800106c <LCD_SendCommand>
    delay_ms(1);
 80011e2:	2001      	movs	r0, #1
 80011e4:	f000 ff7e 	bl	80020e4 <delay_ms>
}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}

080011ec <LCD_SetCursor>:

void LCD_SetCursor(uint8_t row, uint8_t col) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	460a      	mov	r2, r1
 80011f6:	71fb      	strb	r3, [r7, #7]
 80011f8:	4613      	mov	r3, r2
 80011fa:	71bb      	strb	r3, [r7, #6]
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d103      	bne.n	800120a <LCD_SetCursor+0x1e>
 8001202:	79bb      	ldrb	r3, [r7, #6]
 8001204:	3b80      	subs	r3, #128	@ 0x80
 8001206:	b2db      	uxtb	r3, r3
 8001208:	e002      	b.n	8001210 <LCD_SetCursor+0x24>
 800120a:	79bb      	ldrb	r3, [r7, #6]
 800120c:	3b40      	subs	r3, #64	@ 0x40
 800120e:	b2db      	uxtb	r3, r3
 8001210:	73fb      	strb	r3, [r7, #15]
    LCD_SendCommand(pos);
 8001212:	7bfb      	ldrb	r3, [r7, #15]
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff ff29 	bl	800106c <LCD_SendCommand>
    delay_ms(2);
 800121a:	2002      	movs	r0, #2
 800121c:	f000 ff62 	bl	80020e4 <delay_ms>
}
 8001220:	bf00      	nop
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <main>:
#include "servo.h"
#include "uart.h"
#include "rgb_led.h"
#include <stdio.h>

int main(void) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b092      	sub	sp, #72	@ 0x48
 800122c:	af04      	add	r7, sp, #16
    SystemClock_Config();
 800122e:	f000 ff71 	bl	8002114 <SystemClock_Config>
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8001232:	4ba7      	ldr	r3, [pc, #668]	@ (80014d0 <main+0x2a8>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001236:	4aa6      	ldr	r2, [pc, #664]	@ (80014d0 <main+0x2a8>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOA->MODER |= (1 << 10);
 800123e:	4ba5      	ldr	r3, [pc, #660]	@ (80014d4 <main+0x2ac>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4aa4      	ldr	r2, [pc, #656]	@ (80014d4 <main+0x2ac>)
 8001244:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001248:	6013      	str	r3, [r2, #0]
    GPIOA->ODR &= ~(1 << 5);
 800124a:	4ba2      	ldr	r3, [pc, #648]	@ (80014d4 <main+0x2ac>)
 800124c:	695b      	ldr	r3, [r3, #20]
 800124e:	4aa1      	ldr	r2, [pc, #644]	@ (80014d4 <main+0x2ac>)
 8001250:	f023 0320 	bic.w	r3, r3, #32
 8001254:	6153      	str	r3, [r2, #20]
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8001256:	4b9e      	ldr	r3, [pc, #632]	@ (80014d0 <main+0x2a8>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	4a9d      	ldr	r2, [pc, #628]	@ (80014d0 <main+0x2a8>)
 800125c:	f043 0304 	orr.w	r3, r3, #4
 8001260:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOC->MODER &= ~(3U << (13 * 2));
 8001262:	4b9d      	ldr	r3, [pc, #628]	@ (80014d8 <main+0x2b0>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a9c      	ldr	r2, [pc, #624]	@ (80014d8 <main+0x2b0>)
 8001268:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800126c:	6013      	str	r3, [r2, #0]
    GPIOC->PUPDR |= (1U << (13 * 2));
 800126e:	4b9a      	ldr	r3, [pc, #616]	@ (80014d8 <main+0x2b0>)
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	4a99      	ldr	r2, [pc, #612]	@ (80014d8 <main+0x2b0>)
 8001274:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001278:	60d3      	str	r3, [r2, #12]
    GPIOC->MODER &= ~(3U << (0 * 2));
 800127a:	4b97      	ldr	r3, [pc, #604]	@ (80014d8 <main+0x2b0>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a96      	ldr	r2, [pc, #600]	@ (80014d8 <main+0x2b0>)
 8001280:	f023 0303 	bic.w	r3, r3, #3
 8001284:	6013      	str	r3, [r2, #0]
    GPIOC->PUPDR |= (1U << (0 * 2));
 8001286:	4b94      	ldr	r3, [pc, #592]	@ (80014d8 <main+0x2b0>)
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	4a93      	ldr	r2, [pc, #588]	@ (80014d8 <main+0x2b0>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	60d3      	str	r3, [r2, #12]
    I2C1_Init();
 8001292:	f7ff fe09 	bl	8000ea8 <I2C1_Init>
    LCD_Init();
 8001296:	f7ff ff6c 	bl	8001172 <LCD_Init>
    ADC_Init();
 800129a:	f000 f9f1 	bl	8001680 <ADC_Init>
    Relay_GPIO_Init();
 800129e:	f000 fb5b 	bl	8001958 <Relay_GPIO_Init>
    Servo_Init();
 80012a2:	f000 fd3b 	bl	8001d1c <Servo_Init>
    UART1_Init();
 80012a6:	f000 ffbd 	bl	8002224 <UART1_Init>
    RGB_LED_Init();
 80012aa:	f000 fbcd 	bl	8001a48 <RGB_LED_Init>
    TIM2_Init();
 80012ae:	f000 fc01 	bl	8001ab4 <TIM2_Init>

    char buffer[20];
    char uart_buffer[10];
    char uart_cmd[2];
    float ppm;
    uint8_t system_active = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    uint8_t last_system_active = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    uint8_t last_sw1_state = 1;
 80012be:	2301      	movs	r3, #1
 80012c0:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    uint8_t last_sw2_state = 1;
 80012c4:	2301      	movs	r3, #1
 80012c6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    uint8_t alert_state;
    uint32_t last_update = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	62bb      	str	r3, [r7, #40]	@ 0x28

    LCD_SetCursor(0, 0);
 80012ce:	2100      	movs	r1, #0
 80012d0:	2000      	movs	r0, #0
 80012d2:	f7ff ff8b 	bl	80011ec <LCD_SetCursor>
    LCD_SendString("MQ2 Gas Monitor ");
 80012d6:	4881      	ldr	r0, [pc, #516]	@ (80014dc <main+0x2b4>)
 80012d8:	f7ff ff36 	bl	8001148 <LCD_SendString>
    LCD_SetCursor(1, 0);
 80012dc:	2100      	movs	r1, #0
 80012de:	2001      	movs	r0, #1
 80012e0:	f7ff ff84 	bl	80011ec <LCD_SetCursor>
    LCD_SendString("Sys: LOADING... ");
 80012e4:	487e      	ldr	r0, [pc, #504]	@ (80014e0 <main+0x2b8>)
 80012e6:	f7ff ff2f 	bl	8001148 <LCD_SendString>

    Servo_SetAngle(180);
 80012ea:	20b4      	movs	r0, #180	@ 0xb4
 80012ec:	f000 fd8a 	bl	8001e04 <Servo_SetAngle>
    delay_ms(2000);
 80012f0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80012f4:	f000 fef6 	bl	80020e4 <delay_ms>
    Servo_SetAngle(0);
 80012f8:	2000      	movs	r0, #0
 80012fa:	f000 fd83 	bl	8001e04 <Servo_SetAngle>
    delay_ms(2000);
 80012fe:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001302:	f000 feef 	bl	80020e4 <delay_ms>

    snprintf(uart_buffer, sizeof(uart_buffer), "S%d\n", system_active);
 8001306:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800130a:	1d38      	adds	r0, r7, #4
 800130c:	4a75      	ldr	r2, [pc, #468]	@ (80014e4 <main+0x2bc>)
 800130e:	210a      	movs	r1, #10
 8001310:	f002 fada 	bl	80038c8 <sniprintf>
    UART1_SendString(uart_buffer);
 8001314:	1d3b      	adds	r3, r7, #4
 8001316:	4618      	mov	r0, r3
 8001318:	f000 ffd2 	bl	80022c0 <UART1_SendString>

    while (1) {
        uint8_t current_sw1_state = (GPIOC->IDR & (1 << 13)) ? 1 : 0;
 800131c:	4b6e      	ldr	r3, [pc, #440]	@ (80014d8 <main+0x2b0>)
 800131e:	691b      	ldr	r3, [r3, #16]
 8001320:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001324:	2b00      	cmp	r3, #0
 8001326:	bf14      	ite	ne
 8001328:	2301      	movne	r3, #1
 800132a:	2300      	moveq	r3, #0
 800132c:	b2db      	uxtb	r3, r3
 800132e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (last_sw1_state == 1 && current_sw1_state == 0) {
 8001332:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8001336:	2b01      	cmp	r3, #1
 8001338:	d10f      	bne.n	800135a <main+0x132>
 800133a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800133e:	2b00      	cmp	r3, #0
 8001340:	d10b      	bne.n	800135a <main+0x132>
            system_active = !system_active;
 8001342:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001346:	2b00      	cmp	r3, #0
 8001348:	bf0c      	ite	eq
 800134a:	2301      	moveq	r3, #1
 800134c:	2300      	movne	r3, #0
 800134e:	b2db      	uxtb	r3, r3
 8001350:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            delay_ms(100);
 8001354:	2064      	movs	r0, #100	@ 0x64
 8001356:	f000 fec5 	bl	80020e4 <delay_ms>
        }
        last_sw1_state = current_sw1_state;
 800135a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800135e:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

        uint8_t current_sw2_state = (GPIOC->IDR & (1 << 0)) ? 1 : 0;
 8001362:	4b5d      	ldr	r3, [pc, #372]	@ (80014d8 <main+0x2b0>)
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	2b00      	cmp	r3, #0
 800136c:	bf14      	ite	ne
 800136e:	2301      	movne	r3, #1
 8001370:	2300      	moveq	r3, #0
 8001372:	b2db      	uxtb	r3, r3
 8001374:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        if (last_sw2_state == 1 && current_sw2_state == 0) {
 8001378:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800137c:	2b01      	cmp	r3, #1
 800137e:	d13e      	bne.n	80013fe <main+0x1d6>
 8001380:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001384:	2b00      	cmp	r3, #0
 8001386:	d13a      	bne.n	80013fe <main+0x1d6>
            system_active = 0;
 8001388:	2300      	movs	r3, #0
 800138a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            last_system_active = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
            RELAY1_GPIO_PORT->ODR &= ~(1U << RELAY1_PIN);
 8001394:	4b54      	ldr	r3, [pc, #336]	@ (80014e8 <main+0x2c0>)
 8001396:	695b      	ldr	r3, [r3, #20]
 8001398:	4a53      	ldr	r2, [pc, #332]	@ (80014e8 <main+0x2c0>)
 800139a:	f023 0302 	bic.w	r3, r3, #2
 800139e:	6153      	str	r3, [r2, #20]
            RELAY2_GPIO_PORT->ODR &= ~(1U << RELAY2_PIN);
 80013a0:	4b51      	ldr	r3, [pc, #324]	@ (80014e8 <main+0x2c0>)
 80013a2:	695b      	ldr	r3, [r3, #20]
 80013a4:	4a50      	ldr	r2, [pc, #320]	@ (80014e8 <main+0x2c0>)
 80013a6:	f023 0304 	bic.w	r3, r3, #4
 80013aa:	6153      	str	r3, [r2, #20]
            Servo_SetAngle(0);
 80013ac:	2000      	movs	r0, #0
 80013ae:	f000 fd29 	bl	8001e04 <Servo_SetAngle>
            GPIOA->ODR &= ~(1 << 5);
 80013b2:	4b48      	ldr	r3, [pc, #288]	@ (80014d4 <main+0x2ac>)
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	4a47      	ldr	r2, [pc, #284]	@ (80014d4 <main+0x2ac>)
 80013b8:	f023 0320 	bic.w	r3, r3, #32
 80013bc:	6153      	str	r3, [r2, #20]
            LCD_SetCursor(0, 0);
 80013be:	2100      	movs	r1, #0
 80013c0:	2000      	movs	r0, #0
 80013c2:	f7ff ff13 	bl	80011ec <LCD_SetCursor>
            LCD_SendString("MQ2 Gas Monitor ");
 80013c6:	4845      	ldr	r0, [pc, #276]	@ (80014dc <main+0x2b4>)
 80013c8:	f7ff febe 	bl	8001148 <LCD_SendString>
            LCD_SetCursor(1, 0);
 80013cc:	2100      	movs	r1, #0
 80013ce:	2001      	movs	r0, #1
 80013d0:	f7ff ff0c 	bl	80011ec <LCD_SetCursor>
            LCD_SendString("Sys: LOADING... ");
 80013d4:	4842      	ldr	r0, [pc, #264]	@ (80014e0 <main+0x2b8>)
 80013d6:	f7ff feb7 	bl	8001148 <LCD_SendString>
            delay_ms(2000);
 80013da:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80013de:	f000 fe81 	bl	80020e4 <delay_ms>
            snprintf(uart_buffer, sizeof(uart_buffer), "S%d\n", system_active);
 80013e2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80013e6:	1d38      	adds	r0, r7, #4
 80013e8:	4a3e      	ldr	r2, [pc, #248]	@ (80014e4 <main+0x2bc>)
 80013ea:	210a      	movs	r1, #10
 80013ec:	f002 fa6c 	bl	80038c8 <sniprintf>
            UART1_SendString(uart_buffer);
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	4618      	mov	r0, r3
 80013f4:	f000 ff64 	bl	80022c0 <UART1_SendString>
            delay_ms(100);
 80013f8:	2064      	movs	r0, #100	@ 0x64
 80013fa:	f000 fe73 	bl	80020e4 <delay_ms>
        }
        last_sw2_state = current_sw2_state;
 80013fe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001402:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30

        if (USART1->SR & USART_SR_RXNE) {
 8001406:	4b39      	ldr	r3, [pc, #228]	@ (80014ec <main+0x2c4>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0320 	and.w	r3, r3, #32
 800140e:	2b00      	cmp	r3, #0
 8001410:	d011      	beq.n	8001436 <main+0x20e>
            UART1_ReceiveString(uart_cmd, sizeof(uart_cmd));
 8001412:	463b      	mov	r3, r7
 8001414:	2102      	movs	r1, #2
 8001416:	4618      	mov	r0, r3
 8001418:	f000 ff72 	bl	8002300 <UART1_ReceiveString>
            if (uart_cmd[0] == '1') {
 800141c:	783b      	ldrb	r3, [r7, #0]
 800141e:	2b31      	cmp	r3, #49	@ 0x31
 8001420:	d103      	bne.n	800142a <main+0x202>
                system_active = 1;
 8001422:	2301      	movs	r3, #1
 8001424:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8001428:	e005      	b.n	8001436 <main+0x20e>
            } else if (uart_cmd[0] == '0') {
 800142a:	783b      	ldrb	r3, [r7, #0]
 800142c:	2b30      	cmp	r3, #48	@ 0x30
 800142e:	d102      	bne.n	8001436 <main+0x20e>
                system_active = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            }
        }

        if (system_active != last_system_active) {
 8001436:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800143a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800143e:	429a      	cmp	r2, r3
 8001440:	d00e      	beq.n	8001460 <main+0x238>
            snprintf(uart_buffer, sizeof(uart_buffer), "S%d\n", system_active);
 8001442:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001446:	1d38      	adds	r0, r7, #4
 8001448:	4a26      	ldr	r2, [pc, #152]	@ (80014e4 <main+0x2bc>)
 800144a:	210a      	movs	r1, #10
 800144c:	f002 fa3c 	bl	80038c8 <sniprintf>
            UART1_SendString(uart_buffer);
 8001450:	1d3b      	adds	r3, r7, #4
 8001452:	4618      	mov	r0, r3
 8001454:	f000 ff34 	bl	80022c0 <UART1_SendString>
            last_system_active = system_active;
 8001458:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800145c:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
        }

        if (system_active) {
 8001460:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001464:	2b00      	cmp	r3, #0
 8001466:	f000 80c0 	beq.w	80015ea <main+0x3c2>
            ppm = MQ2_ReadPPM();
 800146a:	f000 f94d 	bl	8001708 <MQ2_ReadPPM>
 800146e:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
            alert_state = GetGasAlertState(ppm);
 8001472:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8001476:	f000 fa33 	bl	80018e0 <GetGasAlertState>
 800147a:	4603      	mov	r3, r0
 800147c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            if (alert_state >= 2) {
 8001480:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001484:	2b01      	cmp	r3, #1
 8001486:	d903      	bls.n	8001490 <main+0x268>
                Servo_SetAngle(180);
 8001488:	20b4      	movs	r0, #180	@ 0xb4
 800148a:	f000 fcbb 	bl	8001e04 <Servo_SetAngle>
 800148e:	e002      	b.n	8001496 <main+0x26e>
            } else {
                Servo_SetAngle(0);
 8001490:	2000      	movs	r0, #0
 8001492:	f000 fcb7 	bl	8001e04 <Servo_SetAngle>
            }

            if (alert_state >= 2) {
 8001496:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800149a:	2b01      	cmp	r3, #1
 800149c:	d906      	bls.n	80014ac <main+0x284>
                RELAY1_GPIO_PORT->ODR |= (1U << RELAY1_PIN);
 800149e:	4b12      	ldr	r3, [pc, #72]	@ (80014e8 <main+0x2c0>)
 80014a0:	695b      	ldr	r3, [r3, #20]
 80014a2:	4a11      	ldr	r2, [pc, #68]	@ (80014e8 <main+0x2c0>)
 80014a4:	f043 0302 	orr.w	r3, r3, #2
 80014a8:	6153      	str	r3, [r2, #20]
 80014aa:	e005      	b.n	80014b8 <main+0x290>
            } else {
                RELAY1_GPIO_PORT->ODR &= ~(1U << RELAY1_PIN);
 80014ac:	4b0e      	ldr	r3, [pc, #56]	@ (80014e8 <main+0x2c0>)
 80014ae:	695b      	ldr	r3, [r3, #20]
 80014b0:	4a0d      	ldr	r2, [pc, #52]	@ (80014e8 <main+0x2c0>)
 80014b2:	f023 0302 	bic.w	r3, r3, #2
 80014b6:	6153      	str	r3, [r2, #20]
            }

            if (alert_state == 3) {
 80014b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014bc:	2b03      	cmp	r3, #3
 80014be:	d117      	bne.n	80014f0 <main+0x2c8>
                RELAY2_GPIO_PORT->ODR |= (1U << RELAY2_PIN);
 80014c0:	4b09      	ldr	r3, [pc, #36]	@ (80014e8 <main+0x2c0>)
 80014c2:	695b      	ldr	r3, [r3, #20]
 80014c4:	4a08      	ldr	r2, [pc, #32]	@ (80014e8 <main+0x2c0>)
 80014c6:	f043 0304 	orr.w	r3, r3, #4
 80014ca:	6153      	str	r3, [r2, #20]
 80014cc:	e016      	b.n	80014fc <main+0x2d4>
 80014ce:	bf00      	nop
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40020000 	.word	0x40020000
 80014d8:	40020800 	.word	0x40020800
 80014dc:	080065f0 	.word	0x080065f0
 80014e0:	08006604 	.word	0x08006604
 80014e4:	08006618 	.word	0x08006618
 80014e8:	40020400 	.word	0x40020400
 80014ec:	40011000 	.word	0x40011000
            } else {
                RELAY2_GPIO_PORT->ODR &= ~(1U << RELAY2_PIN);
 80014f0:	4b55      	ldr	r3, [pc, #340]	@ (8001648 <main+0x420>)
 80014f2:	695b      	ldr	r3, [r3, #20]
 80014f4:	4a54      	ldr	r2, [pc, #336]	@ (8001648 <main+0x420>)
 80014f6:	f023 0304 	bic.w	r3, r3, #4
 80014fa:	6153      	str	r3, [r2, #20]
            }

            if (tick - last_update >= 1000) {
 80014fc:	4b53      	ldr	r3, [pc, #332]	@ (800164c <main+0x424>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001508:	f0c0 8092 	bcc.w	8001630 <main+0x408>
                GPIOA->ODR |= (1 << 5);
 800150c:	4b50      	ldr	r3, [pc, #320]	@ (8001650 <main+0x428>)
 800150e:	695b      	ldr	r3, [r3, #20]
 8001510:	4a4f      	ldr	r2, [pc, #316]	@ (8001650 <main+0x428>)
 8001512:	f043 0320 	orr.w	r3, r3, #32
 8001516:	6153      	str	r3, [r2, #20]
                snprintf(uart_buffer, sizeof(uart_buffer), "%.1f %d\n", ppm, alert_state);
 8001518:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800151a:	f7ff f81d 	bl	8000558 <__aeabi_f2d>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8001526:	1d38      	adds	r0, r7, #4
 8001528:	9102      	str	r1, [sp, #8]
 800152a:	e9cd 2300 	strd	r2, r3, [sp]
 800152e:	4a49      	ldr	r2, [pc, #292]	@ (8001654 <main+0x42c>)
 8001530:	210a      	movs	r1, #10
 8001532:	f002 f9c9 	bl	80038c8 <sniprintf>
                UART1_SendString(uart_buffer);
 8001536:	1d3b      	adds	r3, r7, #4
 8001538:	4618      	mov	r0, r3
 800153a:	f000 fec1 	bl	80022c0 <UART1_SendString>

                LCD_SetCursor(0, 0);
 800153e:	2100      	movs	r1, #0
 8001540:	2000      	movs	r0, #0
 8001542:	f7ff fe53 	bl	80011ec <LCD_SetCursor>
                LCD_SendString("                ");
 8001546:	4844      	ldr	r0, [pc, #272]	@ (8001658 <main+0x430>)
 8001548:	f7ff fdfe 	bl	8001148 <LCD_SendString>
                LCD_SetCursor(0, 0);
 800154c:	2100      	movs	r1, #0
 800154e:	2000      	movs	r0, #0
 8001550:	f7ff fe4c 	bl	80011ec <LCD_SetCursor>
                snprintf(buffer, sizeof(buffer), "Gas:%.1f ppm", ppm);
 8001554:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001556:	f7fe ffff 	bl	8000558 <__aeabi_f2d>
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	f107 0010 	add.w	r0, r7, #16
 8001562:	e9cd 2300 	strd	r2, r3, [sp]
 8001566:	4a3d      	ldr	r2, [pc, #244]	@ (800165c <main+0x434>)
 8001568:	2114      	movs	r1, #20
 800156a:	f002 f9ad 	bl	80038c8 <sniprintf>
                LCD_SendString(buffer);
 800156e:	f107 0310 	add.w	r3, r7, #16
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff fde8 	bl	8001148 <LCD_SendString>

                LCD_SetCursor(1, 0);
 8001578:	2100      	movs	r1, #0
 800157a:	2001      	movs	r0, #1
 800157c:	f7ff fe36 	bl	80011ec <LCD_SetCursor>
                switch (alert_state) {
 8001580:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001584:	2b03      	cmp	r3, #3
 8001586:	d81b      	bhi.n	80015c0 <main+0x398>
 8001588:	a201      	add	r2, pc, #4	@ (adr r2, 8001590 <main+0x368>)
 800158a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800158e:	bf00      	nop
 8001590:	080015a1 	.word	0x080015a1
 8001594:	080015a9 	.word	0x080015a9
 8001598:	080015b1 	.word	0x080015b1
 800159c:	080015b9 	.word	0x080015b9
                    case -1: LCD_SendString("Error    "); break;
                    case 0: LCD_SendString("No Gas   "); break;
 80015a0:	482f      	ldr	r0, [pc, #188]	@ (8001660 <main+0x438>)
 80015a2:	f7ff fdd1 	bl	8001148 <LCD_SendString>
 80015a6:	e00f      	b.n	80015c8 <main+0x3a0>
                    case 1: LCD_SendString("Low Gas  "); break;
 80015a8:	482e      	ldr	r0, [pc, #184]	@ (8001664 <main+0x43c>)
 80015aa:	f7ff fdcd 	bl	8001148 <LCD_SendString>
 80015ae:	e00b      	b.n	80015c8 <main+0x3a0>
                    case 2: LCD_SendString("High Gas "); break;
 80015b0:	482d      	ldr	r0, [pc, #180]	@ (8001668 <main+0x440>)
 80015b2:	f7ff fdc9 	bl	8001148 <LCD_SendString>
 80015b6:	e007      	b.n	80015c8 <main+0x3a0>
                    case 3: LCD_SendString("Danger!  "); break;
 80015b8:	482c      	ldr	r0, [pc, #176]	@ (800166c <main+0x444>)
 80015ba:	f7ff fdc5 	bl	8001148 <LCD_SendString>
 80015be:	e003      	b.n	80015c8 <main+0x3a0>
                    default: LCD_SendString("Error    "); break;
 80015c0:	482b      	ldr	r0, [pc, #172]	@ (8001670 <main+0x448>)
 80015c2:	f7ff fdc1 	bl	8001148 <LCD_SendString>
 80015c6:	bf00      	nop
                }
                LCD_SetCursor(1, 9);
 80015c8:	2109      	movs	r1, #9
 80015ca:	2001      	movs	r0, #1
 80015cc:	f7ff fe0e 	bl	80011ec <LCD_SetCursor>
                LCD_SendString("Sys:ON ");
 80015d0:	4828      	ldr	r0, [pc, #160]	@ (8001674 <main+0x44c>)
 80015d2:	f7ff fdb9 	bl	8001148 <LCD_SendString>

                GPIOA->ODR &= ~(1 << 5);
 80015d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001650 <main+0x428>)
 80015d8:	695b      	ldr	r3, [r3, #20]
 80015da:	4a1d      	ldr	r2, [pc, #116]	@ (8001650 <main+0x428>)
 80015dc:	f023 0320 	bic.w	r3, r3, #32
 80015e0:	6153      	str	r3, [r2, #20]
                last_update = tick;
 80015e2:	4b1a      	ldr	r3, [pc, #104]	@ (800164c <main+0x424>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80015e8:	e022      	b.n	8001630 <main+0x408>
            }
        } else {
            LCD_SetCursor(0, 0);
 80015ea:	2100      	movs	r1, #0
 80015ec:	2000      	movs	r0, #0
 80015ee:	f7ff fdfd 	bl	80011ec <LCD_SetCursor>
            LCD_SendString("Gas:---- ppm    ");
 80015f2:	4821      	ldr	r0, [pc, #132]	@ (8001678 <main+0x450>)
 80015f4:	f7ff fda8 	bl	8001148 <LCD_SendString>
            LCD_SetCursor(1, 0);
 80015f8:	2100      	movs	r1, #0
 80015fa:	2001      	movs	r0, #1
 80015fc:	f7ff fdf6 	bl	80011ec <LCD_SetCursor>
            LCD_SendString("Stopped  Sys:OFF");
 8001600:	481e      	ldr	r0, [pc, #120]	@ (800167c <main+0x454>)
 8001602:	f7ff fda1 	bl	8001148 <LCD_SendString>
            GPIOA->ODR &= ~(1 << 5);
 8001606:	4b12      	ldr	r3, [pc, #72]	@ (8001650 <main+0x428>)
 8001608:	695b      	ldr	r3, [r3, #20]
 800160a:	4a11      	ldr	r2, [pc, #68]	@ (8001650 <main+0x428>)
 800160c:	f023 0320 	bic.w	r3, r3, #32
 8001610:	6153      	str	r3, [r2, #20]
            RELAY1_GPIO_PORT->ODR &= ~(1U << RELAY1_PIN);
 8001612:	4b0d      	ldr	r3, [pc, #52]	@ (8001648 <main+0x420>)
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	4a0c      	ldr	r2, [pc, #48]	@ (8001648 <main+0x420>)
 8001618:	f023 0302 	bic.w	r3, r3, #2
 800161c:	6153      	str	r3, [r2, #20]
            RELAY2_GPIO_PORT->ODR &= ~(1U << RELAY2_PIN);
 800161e:	4b0a      	ldr	r3, [pc, #40]	@ (8001648 <main+0x420>)
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	4a09      	ldr	r2, [pc, #36]	@ (8001648 <main+0x420>)
 8001624:	f023 0304 	bic.w	r3, r3, #4
 8001628:	6153      	str	r3, [r2, #20]
            Servo_SetAngle(0);
 800162a:	2000      	movs	r0, #0
 800162c:	f000 fbea 	bl	8001e04 <Servo_SetAngle>
        }
        RGB_LED_SetState(alert_state, system_active, ppm);
 8001630:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8001634:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001638:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 800163c:	4611      	mov	r1, r2
 800163e:	4618      	mov	r0, r3
 8001640:	f000 fa66 	bl	8001b10 <RGB_LED_SetState>
    while (1) {
 8001644:	e66a      	b.n	800131c <main+0xf4>
 8001646:	bf00      	nop
 8001648:	40020400 	.word	0x40020400
 800164c:	20000208 	.word	0x20000208
 8001650:	40020000 	.word	0x40020000
 8001654:	08006620 	.word	0x08006620
 8001658:	0800662c 	.word	0x0800662c
 800165c:	08006640 	.word	0x08006640
 8001660:	08006650 	.word	0x08006650
 8001664:	0800665c 	.word	0x0800665c
 8001668:	08006668 	.word	0x08006668
 800166c:	08006674 	.word	0x08006674
 8001670:	08006680 	.word	0x08006680
 8001674:	0800668c 	.word	0x0800668c
 8001678:	08006694 	.word	0x08006694
 800167c:	080066a8 	.word	0x080066a8

08001680 <ADC_Init>:
#include "system_config.h"
#include <math.h>

float LPGCurve[3] = {2.3f, 0.21f, -0.47f};

void ADC_Init(void) {
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8001684:	4b1d      	ldr	r3, [pc, #116]	@ (80016fc <ADC_Init+0x7c>)
 8001686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001688:	4a1c      	ldr	r2, [pc, #112]	@ (80016fc <ADC_Init+0x7c>)
 800168a:	f043 0301 	orr.w	r3, r3, #1
 800168e:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8001690:	4b1a      	ldr	r3, [pc, #104]	@ (80016fc <ADC_Init+0x7c>)
 8001692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001694:	4a19      	ldr	r2, [pc, #100]	@ (80016fc <ADC_Init+0x7c>)
 8001696:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800169a:	6453      	str	r3, [r2, #68]	@ 0x44
    GPIOA->MODER |= (3U << (0 * 2));
 800169c:	4b18      	ldr	r3, [pc, #96]	@ (8001700 <ADC_Init+0x80>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a17      	ldr	r2, [pc, #92]	@ (8001700 <ADC_Init+0x80>)
 80016a2:	f043 0303 	orr.w	r3, r3, #3
 80016a6:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~(3U << (0 * 2));
 80016a8:	4b15      	ldr	r3, [pc, #84]	@ (8001700 <ADC_Init+0x80>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	4a14      	ldr	r2, [pc, #80]	@ (8001700 <ADC_Init+0x80>)
 80016ae:	f023 0303 	bic.w	r3, r3, #3
 80016b2:	60d3      	str	r3, [r2, #12]
    ADC1->CR1 = 0;
 80016b4:	4b13      	ldr	r3, [pc, #76]	@ (8001704 <ADC_Init+0x84>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	605a      	str	r2, [r3, #4]
    ADC1->CR1 |= (1U << 8);
 80016ba:	4b12      	ldr	r3, [pc, #72]	@ (8001704 <ADC_Init+0x84>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	4a11      	ldr	r2, [pc, #68]	@ (8001704 <ADC_Init+0x84>)
 80016c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016c4:	6053      	str	r3, [r2, #4]
    ADC1->CR2 = 0;
 80016c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001704 <ADC_Init+0x84>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	609a      	str	r2, [r3, #8]
    ADC1->SMPR2 |= (5U << ADC_SMPR2_SMP0_Pos);
 80016cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001704 <ADC_Init+0x84>)
 80016ce:	691b      	ldr	r3, [r3, #16]
 80016d0:	4a0c      	ldr	r2, [pc, #48]	@ (8001704 <ADC_Init+0x84>)
 80016d2:	f043 0305 	orr.w	r3, r3, #5
 80016d6:	6113      	str	r3, [r2, #16]
    ADC1->SQR1 = 0;
 80016d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001704 <ADC_Init+0x84>)
 80016da:	2200      	movs	r2, #0
 80016dc:	62da      	str	r2, [r3, #44]	@ 0x2c
    ADC1->SQR3 = 0;
 80016de:	4b09      	ldr	r3, [pc, #36]	@ (8001704 <ADC_Init+0x84>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	635a      	str	r2, [r3, #52]	@ 0x34
    ADC1->CR2 |= ADC_CR2_ADON;
 80016e4:	4b07      	ldr	r3, [pc, #28]	@ (8001704 <ADC_Init+0x84>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	4a06      	ldr	r2, [pc, #24]	@ (8001704 <ADC_Init+0x84>)
 80016ea:	f043 0301 	orr.w	r3, r3, #1
 80016ee:	6093      	str	r3, [r2, #8]
    delay_ms(10);
 80016f0:	200a      	movs	r0, #10
 80016f2:	f000 fcf7 	bl	80020e4 <delay_ms>
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40023800 	.word	0x40023800
 8001700:	40020000 	.word	0x40020000
 8001704:	40012000 	.word	0x40012000

08001708 <MQ2_ReadPPM>:

float MQ2_ReadPPM(void) {
 8001708:	b580      	push	{r7, lr}
 800170a:	b08a      	sub	sp, #40	@ 0x28
 800170c:	af00      	add	r7, sp, #0
    const int enhanced_read_sample_times = 10;
 800170e:	230a      	movs	r3, #10
 8001710:	617b      	str	r3, [r7, #20]
    float rs = 0.0f;
 8001712:	f04f 0300 	mov.w	r3, #0
 8001716:	627b      	str	r3, [r7, #36]	@ 0x24
    float Vout;
    uint16_t adc_value;

    delay_ms(100);
 8001718:	2064      	movs	r0, #100	@ 0x64
 800171a:	f000 fce3 	bl	80020e4 <delay_ms>

    for (int i = 0; i < enhanced_read_sample_times; i++) {
 800171e:	2300      	movs	r3, #0
 8001720:	623b      	str	r3, [r7, #32]
 8001722:	e066      	b.n	80017f2 <MQ2_ReadPPM+0xea>
        ADC1->CR2 |= ADC_CR2_SWSTART;
 8001724:	4b65      	ldr	r3, [pc, #404]	@ (80018bc <MQ2_ReadPPM+0x1b4>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	4a64      	ldr	r2, [pc, #400]	@ (80018bc <MQ2_ReadPPM+0x1b4>)
 800172a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800172e:	6093      	str	r3, [r2, #8]
        uint32_t timeout = 1000000;
 8001730:	4b63      	ldr	r3, [pc, #396]	@ (80018c0 <MQ2_ReadPPM+0x1b8>)
 8001732:	61fb      	str	r3, [r7, #28]
        while (!(ADC1->SR & ADC_SR_EOC) && timeout--) {
 8001734:	e004      	b.n	8001740 <MQ2_ReadPPM+0x38>
            if (timeout == 0) return -1.0f;
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d101      	bne.n	8001740 <MQ2_ReadPPM+0x38>
 800173c:	4b61      	ldr	r3, [pc, #388]	@ (80018c4 <MQ2_ReadPPM+0x1bc>)
 800173e:	e0b5      	b.n	80018ac <MQ2_ReadPPM+0x1a4>
        while (!(ADC1->SR & ADC_SR_EOC) && timeout--) {
 8001740:	4b5e      	ldr	r3, [pc, #376]	@ (80018bc <MQ2_ReadPPM+0x1b4>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d104      	bne.n	8001756 <MQ2_ReadPPM+0x4e>
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	1e5a      	subs	r2, r3, #1
 8001750:	61fa      	str	r2, [r7, #28]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1ef      	bne.n	8001736 <MQ2_ReadPPM+0x2e>
        }

        adc_value = ADC1->DR;
 8001756:	4b59      	ldr	r3, [pc, #356]	@ (80018bc <MQ2_ReadPPM+0x1b4>)
 8001758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800175a:	81fb      	strh	r3, [r7, #14]
        Vout = ((float)adc_value / ADC_MAX) * VCC;
 800175c:	89fb      	ldrh	r3, [r7, #14]
 800175e:	ee07 3a90 	vmov	s15, r3
 8001762:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001766:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80018c8 <MQ2_ReadPPM+0x1c0>
 800176a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800176e:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001772:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001776:	edc7 7a02 	vstr	s15, [r7, #8]

        if (Vout < 0.1f) return -2.0f;
 800177a:	edd7 7a02 	vldr	s15, [r7, #8]
 800177e:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 80018cc <MQ2_ReadPPM+0x1c4>
 8001782:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800178a:	d502      	bpl.n	8001792 <MQ2_ReadPPM+0x8a>
 800178c:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8001790:	e08c      	b.n	80018ac <MQ2_ReadPPM+0x1a4>

        float rs_sample = RL_VALUE * (VCC - Vout) / Vout;
 8001792:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001796:	edd7 7a02 	vldr	s15, [r7, #8]
 800179a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800179e:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80017a2:	ee67 6a87 	vmul.f32	s13, s15, s14
 80017a6:	ed97 7a02 	vldr	s14, [r7, #8]
 80017aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017ae:	edc7 7a01 	vstr	s15, [r7, #4]
        if (rs_sample <= 0.0f || rs_sample > 1000.0f) {
 80017b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80017b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017be:	d914      	bls.n	80017ea <MQ2_ReadPPM+0xe2>
 80017c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80017c4:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 80018d0 <MQ2_ReadPPM+0x1c8>
 80017c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d0:	dc0b      	bgt.n	80017ea <MQ2_ReadPPM+0xe2>
            continue;
        }
        rs += rs_sample;
 80017d2:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80017d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80017da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017de:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        delay_ms(50);
 80017e2:	2032      	movs	r0, #50	@ 0x32
 80017e4:	f000 fc7e 	bl	80020e4 <delay_ms>
 80017e8:	e000      	b.n	80017ec <MQ2_ReadPPM+0xe4>
            continue;
 80017ea:	bf00      	nop
    for (int i = 0; i < enhanced_read_sample_times; i++) {
 80017ec:	6a3b      	ldr	r3, [r7, #32]
 80017ee:	3301      	adds	r3, #1
 80017f0:	623b      	str	r3, [r7, #32]
 80017f2:	6a3a      	ldr	r2, [r7, #32]
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	db94      	blt.n	8001724 <MQ2_ReadPPM+0x1c>
    }

    rs /= (float)enhanced_read_sample_times;
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	ee07 3a90 	vmov	s15, r3
 8001800:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001804:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001808:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800180c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    if (rs <= 0.0f) return 0.0f;
 8001810:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001814:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800181c:	d802      	bhi.n	8001824 <MQ2_ReadPPM+0x11c>
 800181e:	f04f 0300 	mov.w	r3, #0
 8001822:	e043      	b.n	80018ac <MQ2_ReadPPM+0x1a4>

    float rs_ro_ratio = rs / FIXED_RO;
 8001824:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001828:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 800182c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001830:	edc7 7a04 	vstr	s15, [r7, #16]
    float ppm = powf(10.0f, ((log10f(rs_ro_ratio) - LPGCurve[1]) / LPGCurve[2]) + LPGCurve[0]);
 8001834:	ed97 0a04 	vldr	s0, [r7, #16]
 8001838:	f004 f986 	bl	8005b48 <log10f>
 800183c:	eeb0 7a40 	vmov.f32	s14, s0
 8001840:	4b24      	ldr	r3, [pc, #144]	@ (80018d4 <MQ2_ReadPPM+0x1cc>)
 8001842:	edd3 7a01 	vldr	s15, [r3, #4]
 8001846:	ee77 6a67 	vsub.f32	s13, s14, s15
 800184a:	4b22      	ldr	r3, [pc, #136]	@ (80018d4 <MQ2_ReadPPM+0x1cc>)
 800184c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001850:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001854:	4b1f      	ldr	r3, [pc, #124]	@ (80018d4 <MQ2_ReadPPM+0x1cc>)
 8001856:	edd3 7a00 	vldr	s15, [r3]
 800185a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800185e:	eef0 0a67 	vmov.f32	s1, s15
 8001862:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8001866:	f004 f99d 	bl	8005ba4 <powf>
 800186a:	ed87 0a06 	vstr	s0, [r7, #24]

    if (ppm < 0.0f) ppm = 0.0f;
 800186e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001872:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800187a:	d502      	bpl.n	8001882 <MQ2_ReadPPM+0x17a>
 800187c:	f04f 0300 	mov.w	r3, #0
 8001880:	61bb      	str	r3, [r7, #24]
    if (isnan(ppm) || ppm > 10000.0f) ppm = 10000.0f;
 8001882:	ed97 7a06 	vldr	s14, [r7, #24]
 8001886:	edd7 7a06 	vldr	s15, [r7, #24]
 800188a:	eeb4 7a67 	vcmp.f32	s14, s15
 800188e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001892:	d608      	bvs.n	80018a6 <MQ2_ReadPPM+0x19e>
 8001894:	edd7 7a06 	vldr	s15, [r7, #24]
 8001898:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80018d8 <MQ2_ReadPPM+0x1d0>
 800189c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a4:	dd01      	ble.n	80018aa <MQ2_ReadPPM+0x1a2>
 80018a6:	4b0d      	ldr	r3, [pc, #52]	@ (80018dc <MQ2_ReadPPM+0x1d4>)
 80018a8:	61bb      	str	r3, [r7, #24]

    return ppm;
 80018aa:	69bb      	ldr	r3, [r7, #24]
}
 80018ac:	ee07 3a90 	vmov	s15, r3
 80018b0:	eeb0 0a67 	vmov.f32	s0, s15
 80018b4:	3728      	adds	r7, #40	@ 0x28
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40012000 	.word	0x40012000
 80018c0:	000f4240 	.word	0x000f4240
 80018c4:	bf800000 	.word	0xbf800000
 80018c8:	457ff000 	.word	0x457ff000
 80018cc:	3dcccccd 	.word	0x3dcccccd
 80018d0:	447a0000 	.word	0x447a0000
 80018d4:	20000000 	.word	0x20000000
 80018d8:	461c4000 	.word	0x461c4000
 80018dc:	461c4000 	.word	0x461c4000

080018e0 <GetGasAlertState>:

uint8_t GetGasAlertState(float ppm) {
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	ed87 0a01 	vstr	s0, [r7, #4]
    if (ppm < 0.0f) return -1;
 80018ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80018ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f6:	d501      	bpl.n	80018fc <GetGasAlertState+0x1c>
 80018f8:	23ff      	movs	r3, #255	@ 0xff
 80018fa:	e021      	b.n	8001940 <GetGasAlertState+0x60>
    else {
        if (ppm < 200.0f) return 0;
 80018fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001900:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 800194c <GetGasAlertState+0x6c>
 8001904:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800190c:	d501      	bpl.n	8001912 <GetGasAlertState+0x32>
 800190e:	2300      	movs	r3, #0
 8001910:	e016      	b.n	8001940 <GetGasAlertState+0x60>
        else if (ppm < 800.0f) return 1;
 8001912:	edd7 7a01 	vldr	s15, [r7, #4]
 8001916:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001950 <GetGasAlertState+0x70>
 800191a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800191e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001922:	d501      	bpl.n	8001928 <GetGasAlertState+0x48>
 8001924:	2301      	movs	r3, #1
 8001926:	e00b      	b.n	8001940 <GetGasAlertState+0x60>
        else if (ppm < 2000.0f) return 2;
 8001928:	edd7 7a01 	vldr	s15, [r7, #4]
 800192c:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001954 <GetGasAlertState+0x74>
 8001930:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001938:	d501      	bpl.n	800193e <GetGasAlertState+0x5e>
 800193a:	2302      	movs	r3, #2
 800193c:	e000      	b.n	8001940 <GetGasAlertState+0x60>
        else return 3;
 800193e:	2303      	movs	r3, #3
    }
}
 8001940:	4618      	mov	r0, r3
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	43480000 	.word	0x43480000
 8001950:	44480000 	.word	0x44480000
 8001954:	44fa0000 	.word	0x44fa0000

08001958 <Relay_GPIO_Init>:
#include "relay.h"

void Relay_GPIO_Init(void) {
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RELAY1_RCC_AHB1ENR | RELAY2_RCC_AHB1ENR;
 800195c:	4b29      	ldr	r3, [pc, #164]	@ (8001a04 <Relay_GPIO_Init+0xac>)
 800195e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001960:	4a28      	ldr	r2, [pc, #160]	@ (8001a04 <Relay_GPIO_Init+0xac>)
 8001962:	f043 0302 	orr.w	r3, r3, #2
 8001966:	6313      	str	r3, [r2, #48]	@ 0x30
    RELAY1_GPIO_PORT->MODER &= ~(3U << (RELAY1_PIN * 2));
 8001968:	4b27      	ldr	r3, [pc, #156]	@ (8001a08 <Relay_GPIO_Init+0xb0>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a26      	ldr	r2, [pc, #152]	@ (8001a08 <Relay_GPIO_Init+0xb0>)
 800196e:	f023 030c 	bic.w	r3, r3, #12
 8001972:	6013      	str	r3, [r2, #0]
    RELAY1_GPIO_PORT->MODER |= (1U << (RELAY1_PIN * 2));
 8001974:	4b24      	ldr	r3, [pc, #144]	@ (8001a08 <Relay_GPIO_Init+0xb0>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a23      	ldr	r2, [pc, #140]	@ (8001a08 <Relay_GPIO_Init+0xb0>)
 800197a:	f043 0304 	orr.w	r3, r3, #4
 800197e:	6013      	str	r3, [r2, #0]
    RELAY2_GPIO_PORT->MODER &= ~(3U << (RELAY2_PIN * 2));
 8001980:	4b21      	ldr	r3, [pc, #132]	@ (8001a08 <Relay_GPIO_Init+0xb0>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a20      	ldr	r2, [pc, #128]	@ (8001a08 <Relay_GPIO_Init+0xb0>)
 8001986:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800198a:	6013      	str	r3, [r2, #0]
    RELAY2_GPIO_PORT->MODER |= (1U << (RELAY2_PIN * 2));
 800198c:	4b1e      	ldr	r3, [pc, #120]	@ (8001a08 <Relay_GPIO_Init+0xb0>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a1d      	ldr	r2, [pc, #116]	@ (8001a08 <Relay_GPIO_Init+0xb0>)
 8001992:	f043 0310 	orr.w	r3, r3, #16
 8001996:	6013      	str	r3, [r2, #0]
    RELAY1_GPIO_PORT->OTYPER &= ~(1U << RELAY1_PIN);
 8001998:	4b1b      	ldr	r3, [pc, #108]	@ (8001a08 <Relay_GPIO_Init+0xb0>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	4a1a      	ldr	r2, [pc, #104]	@ (8001a08 <Relay_GPIO_Init+0xb0>)
 800199e:	f023 0302 	bic.w	r3, r3, #2
 80019a2:	6053      	str	r3, [r2, #4]
    RELAY2_GPIO_PORT->OTYPER &= ~(1U << RELAY2_PIN);
 80019a4:	4b18      	ldr	r3, [pc, #96]	@ (8001a08 <Relay_GPIO_Init+0xb0>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	4a17      	ldr	r2, [pc, #92]	@ (8001a08 <Relay_GPIO_Init+0xb0>)
 80019aa:	f023 0304 	bic.w	r3, r3, #4
 80019ae:	6053      	str	r3, [r2, #4]
    RELAY1_GPIO_PORT->PUPDR &= ~(3U << (RELAY1_PIN * 2));
 80019b0:	4b15      	ldr	r3, [pc, #84]	@ (8001a08 <Relay_GPIO_Init+0xb0>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	4a14      	ldr	r2, [pc, #80]	@ (8001a08 <Relay_GPIO_Init+0xb0>)
 80019b6:	f023 030c 	bic.w	r3, r3, #12
 80019ba:	60d3      	str	r3, [r2, #12]
    RELAY2_GPIO_PORT->PUPDR &= ~(3U << (RELAY2_PIN * 2));
 80019bc:	4b12      	ldr	r3, [pc, #72]	@ (8001a08 <Relay_GPIO_Init+0xb0>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	4a11      	ldr	r2, [pc, #68]	@ (8001a08 <Relay_GPIO_Init+0xb0>)
 80019c2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80019c6:	60d3      	str	r3, [r2, #12]
    RELAY1_GPIO_PORT->OSPEEDR &= ~(3U << (RELAY1_PIN * 2));
 80019c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001a08 <Relay_GPIO_Init+0xb0>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	4a0e      	ldr	r2, [pc, #56]	@ (8001a08 <Relay_GPIO_Init+0xb0>)
 80019ce:	f023 030c 	bic.w	r3, r3, #12
 80019d2:	6093      	str	r3, [r2, #8]
    RELAY2_GPIO_PORT->OSPEEDR &= ~(3U << (RELAY2_PIN * 2));
 80019d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a08 <Relay_GPIO_Init+0xb0>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001a08 <Relay_GPIO_Init+0xb0>)
 80019da:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80019de:	6093      	str	r3, [r2, #8]
    RELAY1_GPIO_PORT->ODR &= ~(1U << RELAY1_PIN);
 80019e0:	4b09      	ldr	r3, [pc, #36]	@ (8001a08 <Relay_GPIO_Init+0xb0>)
 80019e2:	695b      	ldr	r3, [r3, #20]
 80019e4:	4a08      	ldr	r2, [pc, #32]	@ (8001a08 <Relay_GPIO_Init+0xb0>)
 80019e6:	f023 0302 	bic.w	r3, r3, #2
 80019ea:	6153      	str	r3, [r2, #20]
    RELAY2_GPIO_PORT->ODR &= ~(1U << RELAY2_PIN);
 80019ec:	4b06      	ldr	r3, [pc, #24]	@ (8001a08 <Relay_GPIO_Init+0xb0>)
 80019ee:	695b      	ldr	r3, [r3, #20]
 80019f0:	4a05      	ldr	r2, [pc, #20]	@ (8001a08 <Relay_GPIO_Init+0xb0>)
 80019f2:	f023 0304 	bic.w	r3, r3, #4
 80019f6:	6153      	str	r3, [r2, #20]
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	40023800 	.word	0x40023800
 8001a08:	40020400 	.word	0x40020400

08001a0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4603      	mov	r3, r0
 8001a14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	db0b      	blt.n	8001a36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a1e:	79fb      	ldrb	r3, [r7, #7]
 8001a20:	f003 021f 	and.w	r2, r3, #31
 8001a24:	4907      	ldr	r1, [pc, #28]	@ (8001a44 <__NVIC_EnableIRQ+0x38>)
 8001a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2a:	095b      	lsrs	r3, r3, #5
 8001a2c:	2001      	movs	r0, #1
 8001a2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	e000e100 	.word	0xe000e100

08001a48 <RGB_LED_Init>:
#include "rgb_led.h"

volatile uint8_t current_alert_state = 0;
volatile float current_ppm = 0.0f;

void RGB_LED_Init(void) {
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RGB_RCC_AHB1ENR;
 8001a4c:	4b17      	ldr	r3, [pc, #92]	@ (8001aac <RGB_LED_Init+0x64>)
 8001a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a50:	4a16      	ldr	r2, [pc, #88]	@ (8001aac <RGB_LED_Init+0x64>)
 8001a52:	f043 0302 	orr.w	r3, r3, #2
 8001a56:	6313      	str	r3, [r2, #48]	@ 0x30
    RGB_GPIO_PORT->MODER &= ~((3U << (RGB_RED_PIN * 2)) | (3U << (RGB_GREEN_PIN * 2)) | (3U << (RGB_BLUE_PIN * 2)));
 8001a58:	4b15      	ldr	r3, [pc, #84]	@ (8001ab0 <RGB_LED_Init+0x68>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a14      	ldr	r2, [pc, #80]	@ (8001ab0 <RGB_LED_Init+0x68>)
 8001a5e:	f423 637c 	bic.w	r3, r3, #4032	@ 0xfc0
 8001a62:	6013      	str	r3, [r2, #0]
    RGB_GPIO_PORT->MODER |= (1U << (RGB_RED_PIN * 2)) | (1U << (RGB_GREEN_PIN * 2)) | (1U << (RGB_BLUE_PIN * 2));
 8001a64:	4b12      	ldr	r3, [pc, #72]	@ (8001ab0 <RGB_LED_Init+0x68>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a11      	ldr	r2, [pc, #68]	@ (8001ab0 <RGB_LED_Init+0x68>)
 8001a6a:	f443 63a8 	orr.w	r3, r3, #1344	@ 0x540
 8001a6e:	6013      	str	r3, [r2, #0]
    RGB_GPIO_PORT->OTYPER &= ~((1U << RGB_RED_PIN) | (1U << RGB_GREEN_PIN) | (1U << RGB_BLUE_PIN));
 8001a70:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab0 <RGB_LED_Init+0x68>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	4a0e      	ldr	r2, [pc, #56]	@ (8001ab0 <RGB_LED_Init+0x68>)
 8001a76:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8001a7a:	6053      	str	r3, [r2, #4]
    RGB_GPIO_PORT->OSPEEDR |= (3U << (RGB_RED_PIN * 2)) | (3U << (RGB_GREEN_PIN * 2)) | (3U << (RGB_BLUE_PIN * 2));
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab0 <RGB_LED_Init+0x68>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	4a0b      	ldr	r2, [pc, #44]	@ (8001ab0 <RGB_LED_Init+0x68>)
 8001a82:	f443 637c 	orr.w	r3, r3, #4032	@ 0xfc0
 8001a86:	6093      	str	r3, [r2, #8]
    RGB_GPIO_PORT->PUPDR &= ~((3U << (RGB_RED_PIN * 2)) | (3U << (RGB_GREEN_PIN * 2)) | (3U << (RGB_BLUE_PIN * 2)));
 8001a88:	4b09      	ldr	r3, [pc, #36]	@ (8001ab0 <RGB_LED_Init+0x68>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	4a08      	ldr	r2, [pc, #32]	@ (8001ab0 <RGB_LED_Init+0x68>)
 8001a8e:	f423 637c 	bic.w	r3, r3, #4032	@ 0xfc0
 8001a92:	60d3      	str	r3, [r2, #12]
    RGB_GPIO_PORT->ODR &= ~((1U << RGB_RED_PIN) | (1U << RGB_GREEN_PIN) | (1U << RGB_BLUE_PIN));
 8001a94:	4b06      	ldr	r3, [pc, #24]	@ (8001ab0 <RGB_LED_Init+0x68>)
 8001a96:	695b      	ldr	r3, [r3, #20]
 8001a98:	4a05      	ldr	r2, [pc, #20]	@ (8001ab0 <RGB_LED_Init+0x68>)
 8001a9a:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8001a9e:	6153      	str	r3, [r2, #20]
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	40020400 	.word	0x40020400

08001ab4 <TIM2_Init>:

void TIM2_Init(void) {
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001ab8:	4b12      	ldr	r3, [pc, #72]	@ (8001b04 <TIM2_Init+0x50>)
 8001aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abc:	4a11      	ldr	r2, [pc, #68]	@ (8001b04 <TIM2_Init+0x50>)
 8001abe:	f043 0301 	orr.w	r3, r3, #1
 8001ac2:	6413      	str	r3, [r2, #64]	@ 0x40
    TIM2->CR1 = 0;
 8001ac4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
    TIM2->PSC = (SystemCoreClock / 1000000) - 1;
 8001acc:	4b0e      	ldr	r3, [pc, #56]	@ (8001b08 <TIM2_Init+0x54>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a0e      	ldr	r2, [pc, #56]	@ (8001b0c <TIM2_Init+0x58>)
 8001ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad6:	0c9b      	lsrs	r3, r3, #18
 8001ad8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001adc:	3b01      	subs	r3, #1
 8001ade:	6293      	str	r3, [r2, #40]	@ 0x28
    TIM2->ARR = 10000;
 8001ae0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001ae4:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001ae8:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM2->DIER |= TIM_DIER_UIE;
 8001aea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	60d3      	str	r3, [r2, #12]
    NVIC_EnableIRQ(TIM2_IRQn);
 8001afa:	201c      	movs	r0, #28
 8001afc:	f7ff ff86 	bl	8001a0c <__NVIC_EnableIRQ>
}
 8001b00:	bf00      	nop
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40023800 	.word	0x40023800
 8001b08:	2000000c 	.word	0x2000000c
 8001b0c:	431bde83 	.word	0x431bde83

08001b10 <RGB_LED_SetState>:

void RGB_LED_SetState(uint8_t alert_state, uint8_t system_active, float ppm) {
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	460a      	mov	r2, r1
 8001b1a:	ed87 0a00 	vstr	s0, [r7]
 8001b1e:	71fb      	strb	r3, [r7, #7]
 8001b20:	4613      	mov	r3, r2
 8001b22:	71bb      	strb	r3, [r7, #6]
    RGB_GPIO_PORT->ODR &= ~((1U << RGB_RED_PIN) | (1U << RGB_GREEN_PIN) | (1U << RGB_BLUE_PIN));
 8001b24:	4b60      	ldr	r3, [pc, #384]	@ (8001ca8 <RGB_LED_SetState+0x198>)
 8001b26:	695b      	ldr	r3, [r3, #20]
 8001b28:	4a5f      	ldr	r2, [pc, #380]	@ (8001ca8 <RGB_LED_SetState+0x198>)
 8001b2a:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8001b2e:	6153      	str	r3, [r2, #20]

    if (!system_active) {
 8001b30:	79bb      	ldrb	r3, [r7, #6]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d10e      	bne.n	8001b54 <RGB_LED_SetState+0x44>
        RGB_GPIO_PORT->ODR |= (1U << RGB_GREEN_PIN);
 8001b36:	4b5c      	ldr	r3, [pc, #368]	@ (8001ca8 <RGB_LED_SetState+0x198>)
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	4a5b      	ldr	r2, [pc, #364]	@ (8001ca8 <RGB_LED_SetState+0x198>)
 8001b3c:	f043 0310 	orr.w	r3, r3, #16
 8001b40:	6153      	str	r3, [r2, #20]
        TIM2->CR1 &= ~TIM_CR1_CEN;
 8001b42:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b4c:	f023 0301 	bic.w	r3, r3, #1
 8001b50:	6013      	str	r3, [r2, #0]
            TIM2->CNT = 0;
            TIM2->CR1 |= TIM_CR1_CEN;
            RGB_GPIO_PORT->ODR |= (1U << RGB_RED_PIN);
        }
    }
}
 8001b52:	e0a2      	b.n	8001c9a <RGB_LED_SetState+0x18a>
        current_alert_state = alert_state;
 8001b54:	4a55      	ldr	r2, [pc, #340]	@ (8001cac <RGB_LED_SetState+0x19c>)
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	7013      	strb	r3, [r2, #0]
        current_ppm = ppm;
 8001b5a:	4a55      	ldr	r2, [pc, #340]	@ (8001cb0 <RGB_LED_SetState+0x1a0>)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	6013      	str	r3, [r2, #0]
        } else if (alert_state == 0) {
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d10e      	bne.n	8001b84 <RGB_LED_SetState+0x74>
            RGB_GPIO_PORT->ODR |= (1U << RGB_BLUE_PIN);
 8001b66:	4b50      	ldr	r3, [pc, #320]	@ (8001ca8 <RGB_LED_SetState+0x198>)
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	4a4f      	ldr	r2, [pc, #316]	@ (8001ca8 <RGB_LED_SetState+0x198>)
 8001b6c:	f043 0320 	orr.w	r3, r3, #32
 8001b70:	6153      	str	r3, [r2, #20]
            TIM2->CR1 &= ~TIM_CR1_CEN;
 8001b72:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b7c:	f023 0301 	bic.w	r3, r3, #1
 8001b80:	6013      	str	r3, [r2, #0]
}
 8001b82:	e08a      	b.n	8001c9a <RGB_LED_SetState+0x18a>
        } else if (alert_state == 1) {
 8001b84:	79fb      	ldrb	r3, [r7, #7]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d10e      	bne.n	8001ba8 <RGB_LED_SetState+0x98>
            RGB_GPIO_PORT->ODR |= (1U << RGB_RED_PIN) | (1U << RGB_GREEN_PIN);
 8001b8a:	4b47      	ldr	r3, [pc, #284]	@ (8001ca8 <RGB_LED_SetState+0x198>)
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	4a46      	ldr	r2, [pc, #280]	@ (8001ca8 <RGB_LED_SetState+0x198>)
 8001b90:	f043 0318 	orr.w	r3, r3, #24
 8001b94:	6153      	str	r3, [r2, #20]
            TIM2->CR1 &= ~TIM_CR1_CEN;
 8001b96:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ba0:	f023 0301 	bic.w	r3, r3, #1
 8001ba4:	6013      	str	r3, [r2, #0]
}
 8001ba6:	e078      	b.n	8001c9a <RGB_LED_SetState+0x18a>
        } else if (alert_state == 2) {
 8001ba8:	79fb      	ldrb	r3, [r7, #7]
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d11e      	bne.n	8001bec <RGB_LED_SetState+0xdc>
            TIM2->CR1 &= ~TIM_CR1_CEN;
 8001bae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bb8:	f023 0301 	bic.w	r3, r3, #1
 8001bbc:	6013      	str	r3, [r2, #0]
            TIM2->ARR = 500000;
 8001bbe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001bc2:	4a3c      	ldr	r2, [pc, #240]	@ (8001cb4 <RGB_LED_SetState+0x1a4>)
 8001bc4:	62da      	str	r2, [r3, #44]	@ 0x2c
            TIM2->CNT = 0;
 8001bc6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001bca:	2200      	movs	r2, #0
 8001bcc:	625a      	str	r2, [r3, #36]	@ 0x24
            TIM2->CR1 |= TIM_CR1_CEN;
 8001bce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	6013      	str	r3, [r2, #0]
            RGB_GPIO_PORT->ODR |= (1U << RGB_RED_PIN);
 8001bde:	4b32      	ldr	r3, [pc, #200]	@ (8001ca8 <RGB_LED_SetState+0x198>)
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	4a31      	ldr	r2, [pc, #196]	@ (8001ca8 <RGB_LED_SetState+0x198>)
 8001be4:	f043 0308 	orr.w	r3, r3, #8
 8001be8:	6153      	str	r3, [r2, #20]
}
 8001bea:	e056      	b.n	8001c9a <RGB_LED_SetState+0x18a>
        } else if (alert_state == 3) {
 8001bec:	79fb      	ldrb	r3, [r7, #7]
 8001bee:	2b03      	cmp	r3, #3
 8001bf0:	d153      	bne.n	8001c9a <RGB_LED_SetState+0x18a>
            float frequency = 2.0f + (ppm - 2000.0f) * (8.0f / 8000.0f);
 8001bf2:	edd7 7a00 	vldr	s15, [r7]
 8001bf6:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001cb8 <RGB_LED_SetState+0x1a8>
 8001bfa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001bfe:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001cbc <RGB_LED_SetState+0x1ac>
 8001c02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c06:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001c0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c0e:	edc7 7a03 	vstr	s15, [r7, #12]
            frequency = (frequency < 2.0f) ? 2.0f : (frequency > 10.0f) ? 10.0f : frequency;
 8001c12:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c16:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001c1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c22:	d502      	bpl.n	8001c2a <RGB_LED_SetState+0x11a>
 8001c24:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c28:	e00b      	b.n	8001c42 <RGB_LED_SetState+0x132>
 8001c2a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c2e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001c32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c3a:	dd01      	ble.n	8001c40 <RGB_LED_SetState+0x130>
 8001c3c:	4b20      	ldr	r3, [pc, #128]	@ (8001cc0 <RGB_LED_SetState+0x1b0>)
 8001c3e:	e000      	b.n	8001c42 <RGB_LED_SetState+0x132>
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	60fb      	str	r3, [r7, #12]
            uint32_t period_us = (uint32_t)(1000000.0f / (2.0f * frequency));
 8001c44:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c48:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001c4c:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8001cc4 <RGB_LED_SetState+0x1b4>
 8001c50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c58:	ee17 3a90 	vmov	r3, s15
 8001c5c:	60bb      	str	r3, [r7, #8]
            TIM2->CR1 &= ~TIM_CR1_CEN;
 8001c5e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c68:	f023 0301 	bic.w	r3, r3, #1
 8001c6c:	6013      	str	r3, [r2, #0]
            TIM2->ARR = period_us;
 8001c6e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	62d3      	str	r3, [r2, #44]	@ 0x2c
            TIM2->CNT = 0;
 8001c76:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	625a      	str	r2, [r3, #36]	@ 0x24
            TIM2->CR1 |= TIM_CR1_CEN;
 8001c7e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	6013      	str	r3, [r2, #0]
            RGB_GPIO_PORT->ODR |= (1U << RGB_RED_PIN);
 8001c8e:	4b06      	ldr	r3, [pc, #24]	@ (8001ca8 <RGB_LED_SetState+0x198>)
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	4a05      	ldr	r2, [pc, #20]	@ (8001ca8 <RGB_LED_SetState+0x198>)
 8001c94:	f043 0308 	orr.w	r3, r3, #8
 8001c98:	6153      	str	r3, [r2, #20]
}
 8001c9a:	bf00      	nop
 8001c9c:	3714      	adds	r7, #20
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	40020400 	.word	0x40020400
 8001cac:	200001fc 	.word	0x200001fc
 8001cb0:	20000200 	.word	0x20000200
 8001cb4:	0007a120 	.word	0x0007a120
 8001cb8:	44fa0000 	.word	0x44fa0000
 8001cbc:	3a83126f 	.word	0x3a83126f
 8001cc0:	41200000 	.word	0x41200000
 8001cc4:	49742400 	.word	0x49742400

08001cc8 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF) {
 8001ccc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d017      	beq.n	8001d0a <TIM2_IRQHandler+0x42>
        TIM2->SR &= ~TIM_SR_UIF;
 8001cda:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ce4:	f023 0301 	bic.w	r3, r3, #1
 8001ce8:	6113      	str	r3, [r2, #16]
        if (current_alert_state == 2 || current_alert_state == 3) {
 8001cea:	4b0a      	ldr	r3, [pc, #40]	@ (8001d14 <TIM2_IRQHandler+0x4c>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d004      	beq.n	8001cfe <TIM2_IRQHandler+0x36>
 8001cf4:	4b07      	ldr	r3, [pc, #28]	@ (8001d14 <TIM2_IRQHandler+0x4c>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b03      	cmp	r3, #3
 8001cfc:	d105      	bne.n	8001d0a <TIM2_IRQHandler+0x42>
            RGB_GPIO_PORT->ODR ^= (1U << RGB_RED_PIN);
 8001cfe:	4b06      	ldr	r3, [pc, #24]	@ (8001d18 <TIM2_IRQHandler+0x50>)
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	4a05      	ldr	r2, [pc, #20]	@ (8001d18 <TIM2_IRQHandler+0x50>)
 8001d04:	f083 0308 	eor.w	r3, r3, #8
 8001d08:	6153      	str	r3, [r2, #20]
        }
    }
}
 8001d0a:	bf00      	nop
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	200001fc 	.word	0x200001fc
 8001d18:	40020400 	.word	0x40020400

08001d1c <Servo_Init>:
#include "servo.h"
#include "stm32f4xx_hal.h"

void Servo_Init(void) {
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8001d20:	4b33      	ldr	r3, [pc, #204]	@ (8001df0 <Servo_Init+0xd4>)
 8001d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d24:	4a32      	ldr	r2, [pc, #200]	@ (8001df0 <Servo_Init+0xd4>)
 8001d26:	f043 0302 	orr.w	r3, r3, #2
 8001d2a:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8001d2c:	4b30      	ldr	r3, [pc, #192]	@ (8001df0 <Servo_Init+0xd4>)
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d30:	4a2f      	ldr	r2, [pc, #188]	@ (8001df0 <Servo_Init+0xd4>)
 8001d32:	f043 0302 	orr.w	r3, r3, #2
 8001d36:	6413      	str	r3, [r2, #64]	@ 0x40
    GPIOB->MODER &= ~(3U << (0 * 2));
 8001d38:	4b2e      	ldr	r3, [pc, #184]	@ (8001df4 <Servo_Init+0xd8>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a2d      	ldr	r2, [pc, #180]	@ (8001df4 <Servo_Init+0xd8>)
 8001d3e:	f023 0303 	bic.w	r3, r3, #3
 8001d42:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= (2U << (0 * 2));
 8001d44:	4b2b      	ldr	r3, [pc, #172]	@ (8001df4 <Servo_Init+0xd8>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a2a      	ldr	r2, [pc, #168]	@ (8001df4 <Servo_Init+0xd8>)
 8001d4a:	f043 0302 	orr.w	r3, r3, #2
 8001d4e:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER &= ~(1U << 0);
 8001d50:	4b28      	ldr	r3, [pc, #160]	@ (8001df4 <Servo_Init+0xd8>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	4a27      	ldr	r2, [pc, #156]	@ (8001df4 <Servo_Init+0xd8>)
 8001d56:	f023 0301 	bic.w	r3, r3, #1
 8001d5a:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR |= (3U << (0 * 2));
 8001d5c:	4b25      	ldr	r3, [pc, #148]	@ (8001df4 <Servo_Init+0xd8>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	4a24      	ldr	r2, [pc, #144]	@ (8001df4 <Servo_Init+0xd8>)
 8001d62:	f043 0303 	orr.w	r3, r3, #3
 8001d66:	6093      	str	r3, [r2, #8]
    GPIOB->AFR[0] |= (2U << (0 * 4));
 8001d68:	4b22      	ldr	r3, [pc, #136]	@ (8001df4 <Servo_Init+0xd8>)
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	4a21      	ldr	r2, [pc, #132]	@ (8001df4 <Servo_Init+0xd8>)
 8001d6e:	f043 0302 	orr.w	r3, r3, #2
 8001d72:	6213      	str	r3, [r2, #32]
    TIM3->CR1 = 0;
 8001d74:	4b20      	ldr	r3, [pc, #128]	@ (8001df8 <Servo_Init+0xdc>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
    TIM3->PSC = (SystemCoreClock / 1000000) - 1;
 8001d7a:	4b20      	ldr	r3, [pc, #128]	@ (8001dfc <Servo_Init+0xe0>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a20      	ldr	r2, [pc, #128]	@ (8001e00 <Servo_Init+0xe4>)
 8001d80:	fba2 2303 	umull	r2, r3, r2, r3
 8001d84:	0c9b      	lsrs	r3, r3, #18
 8001d86:	4a1c      	ldr	r2, [pc, #112]	@ (8001df8 <Servo_Init+0xdc>)
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	6293      	str	r3, [r2, #40]	@ 0x28
    TIM3->ARR = 20000 - 1;
 8001d8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001df8 <Servo_Init+0xdc>)
 8001d8e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001d92:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM3->CCMR2 &= ~(TIM_CCMR2_OC3M);
 8001d94:	4b18      	ldr	r3, [pc, #96]	@ (8001df8 <Servo_Init+0xdc>)
 8001d96:	69db      	ldr	r3, [r3, #28]
 8001d98:	4a17      	ldr	r2, [pc, #92]	@ (8001df8 <Servo_Init+0xdc>)
 8001d9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d9e:	61d3      	str	r3, [r2, #28]
    TIM3->CCMR2 |= (6U << TIM_CCMR2_OC3M_Pos);
 8001da0:	4b15      	ldr	r3, [pc, #84]	@ (8001df8 <Servo_Init+0xdc>)
 8001da2:	69db      	ldr	r3, [r3, #28]
 8001da4:	4a14      	ldr	r2, [pc, #80]	@ (8001df8 <Servo_Init+0xdc>)
 8001da6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001daa:	61d3      	str	r3, [r2, #28]
    TIM3->CCMR2 |= TIM_CCMR2_OC3PE;
 8001dac:	4b12      	ldr	r3, [pc, #72]	@ (8001df8 <Servo_Init+0xdc>)
 8001dae:	69db      	ldr	r3, [r3, #28]
 8001db0:	4a11      	ldr	r2, [pc, #68]	@ (8001df8 <Servo_Init+0xdc>)
 8001db2:	f043 0308 	orr.w	r3, r3, #8
 8001db6:	61d3      	str	r3, [r2, #28]
    TIM3->CCER |= TIM_CCER_CC3E;
 8001db8:	4b0f      	ldr	r3, [pc, #60]	@ (8001df8 <Servo_Init+0xdc>)
 8001dba:	6a1b      	ldr	r3, [r3, #32]
 8001dbc:	4a0e      	ldr	r2, [pc, #56]	@ (8001df8 <Servo_Init+0xdc>)
 8001dbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dc2:	6213      	str	r3, [r2, #32]
    TIM3->CCR3 = 1000;
 8001dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8001df8 <Servo_Init+0xdc>)
 8001dc6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001dca:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM3->EGR |= TIM_EGR_UG;
 8001dcc:	4b0a      	ldr	r3, [pc, #40]	@ (8001df8 <Servo_Init+0xdc>)
 8001dce:	695b      	ldr	r3, [r3, #20]
 8001dd0:	4a09      	ldr	r2, [pc, #36]	@ (8001df8 <Servo_Init+0xdc>)
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	6153      	str	r3, [r2, #20]
    TIM3->CR1 |= TIM_CR1_CEN;
 8001dd8:	4b07      	ldr	r3, [pc, #28]	@ (8001df8 <Servo_Init+0xdc>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a06      	ldr	r2, [pc, #24]	@ (8001df8 <Servo_Init+0xdc>)
 8001dde:	f043 0301 	orr.w	r3, r3, #1
 8001de2:	6013      	str	r3, [r2, #0]
}
 8001de4:	bf00      	nop
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	40023800 	.word	0x40023800
 8001df4:	40020400 	.word	0x40020400
 8001df8:	40000400 	.word	0x40000400
 8001dfc:	2000000c 	.word	0x2000000c
 8001e00:	431bde83 	.word	0x431bde83

08001e04 <Servo_SetAngle>:

void Servo_SetAngle(uint16_t angle) {
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	80fb      	strh	r3, [r7, #6]
    if (angle > 180) angle = 180;
 8001e0e:	88fb      	ldrh	r3, [r7, #6]
 8001e10:	2bb4      	cmp	r3, #180	@ 0xb4
 8001e12:	d901      	bls.n	8001e18 <Servo_SetAngle+0x14>
 8001e14:	23b4      	movs	r3, #180	@ 0xb4
 8001e16:	80fb      	strh	r3, [r7, #6]
    uint32_t pulse = SERVO_MIN_PULSE + ((SERVO_MAX_PULSE - SERVO_MIN_PULSE) * angle) / 180;
 8001e18:	88fb      	ldrh	r3, [r7, #6]
 8001e1a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001e1e:	fb02 f303 	mul.w	r3, r2, r3
 8001e22:	4a09      	ldr	r2, [pc, #36]	@ (8001e48 <Servo_SetAngle+0x44>)
 8001e24:	fb82 1203 	smull	r1, r2, r2, r3
 8001e28:	441a      	add	r2, r3
 8001e2a:	11d2      	asrs	r2, r2, #7
 8001e2c:	17db      	asrs	r3, r3, #31
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001e34:	60fb      	str	r3, [r7, #12]
    TIM3->CCR3 = pulse;
 8001e36:	4a05      	ldr	r2, [pc, #20]	@ (8001e4c <Servo_SetAngle+0x48>)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001e3c:	bf00      	nop
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	b60b60b7 	.word	0xb60b60b7
 8001e4c:	40000400 	.word	0x40000400

08001e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e54:	bf00      	nop
 8001e56:	e7fd      	b.n	8001e54 <NMI_Handler+0x4>

08001e58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e5c:	bf00      	nop
 8001e5e:	e7fd      	b.n	8001e5c <HardFault_Handler+0x4>

08001e60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e64:	bf00      	nop
 8001e66:	e7fd      	b.n	8001e64 <MemManage_Handler+0x4>

08001e68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e6c:	bf00      	nop
 8001e6e:	e7fd      	b.n	8001e6c <BusFault_Handler+0x4>

08001e70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e74:	bf00      	nop
 8001e76:	e7fd      	b.n	8001e74 <UsageFault_Handler+0x4>

08001e78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e7c:	bf00      	nop
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e86:	b480      	push	{r7}
 8001e88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e98:	bf00      	nop
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
	...

08001ea4 <SysTick_Handler>:
  * @brief This function handles System tick timer.
  */

extern volatile uint32_t tick;
void SysTick_Handler(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ea8:	f000 faba 	bl	8002420 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  tick++;
 8001eac:	4b03      	ldr	r3, [pc, #12]	@ (8001ebc <SysTick_Handler+0x18>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	4a02      	ldr	r2, [pc, #8]	@ (8001ebc <SysTick_Handler+0x18>)
 8001eb4:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	20000208 	.word	0x20000208

08001ec0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  return 1;
 8001ec4:	2301      	movs	r3, #1
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <_kill>:

int _kill(int pid, int sig)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001eda:	f001 fdbf 	bl	8003a5c <__errno>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2216      	movs	r2, #22
 8001ee2:	601a      	str	r2, [r3, #0]
  return -1;
 8001ee4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <_exit>:

void _exit (int status)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f7ff ffe7 	bl	8001ed0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f02:	bf00      	nop
 8001f04:	e7fd      	b.n	8001f02 <_exit+0x12>

08001f06 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b086      	sub	sp, #24
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	60f8      	str	r0, [r7, #12]
 8001f0e:	60b9      	str	r1, [r7, #8]
 8001f10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f12:	2300      	movs	r3, #0
 8001f14:	617b      	str	r3, [r7, #20]
 8001f16:	e00a      	b.n	8001f2e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f18:	f3af 8000 	nop.w
 8001f1c:	4601      	mov	r1, r0
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	1c5a      	adds	r2, r3, #1
 8001f22:	60ba      	str	r2, [r7, #8]
 8001f24:	b2ca      	uxtb	r2, r1
 8001f26:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	617b      	str	r3, [r7, #20]
 8001f2e:	697a      	ldr	r2, [r7, #20]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	dbf0      	blt.n	8001f18 <_read+0x12>
  }

  return len;
 8001f36:	687b      	ldr	r3, [r7, #4]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3718      	adds	r7, #24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	617b      	str	r3, [r7, #20]
 8001f50:	e009      	b.n	8001f66 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	1c5a      	adds	r2, r3, #1
 8001f56:	60ba      	str	r2, [r7, #8]
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	3301      	adds	r3, #1
 8001f64:	617b      	str	r3, [r7, #20]
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	dbf1      	blt.n	8001f52 <_write+0x12>
  }
  return len;
 8001f6e:	687b      	ldr	r3, [r7, #4]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3718      	adds	r7, #24
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <_close>:

int _close(int file)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fa0:	605a      	str	r2, [r3, #4]
  return 0;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <_isatty>:

int _isatty(int file)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fb8:	2301      	movs	r3, #1
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b085      	sub	sp, #20
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	60f8      	str	r0, [r7, #12]
 8001fce:	60b9      	str	r1, [r7, #8]
 8001fd0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3714      	adds	r7, #20
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fe8:	4a14      	ldr	r2, [pc, #80]	@ (800203c <_sbrk+0x5c>)
 8001fea:	4b15      	ldr	r3, [pc, #84]	@ (8002040 <_sbrk+0x60>)
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ff4:	4b13      	ldr	r3, [pc, #76]	@ (8002044 <_sbrk+0x64>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d102      	bne.n	8002002 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ffc:	4b11      	ldr	r3, [pc, #68]	@ (8002044 <_sbrk+0x64>)
 8001ffe:	4a12      	ldr	r2, [pc, #72]	@ (8002048 <_sbrk+0x68>)
 8002000:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002002:	4b10      	ldr	r3, [pc, #64]	@ (8002044 <_sbrk+0x64>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4413      	add	r3, r2
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	429a      	cmp	r2, r3
 800200e:	d207      	bcs.n	8002020 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002010:	f001 fd24 	bl	8003a5c <__errno>
 8002014:	4603      	mov	r3, r0
 8002016:	220c      	movs	r2, #12
 8002018:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800201a:	f04f 33ff 	mov.w	r3, #4294967295
 800201e:	e009      	b.n	8002034 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002020:	4b08      	ldr	r3, [pc, #32]	@ (8002044 <_sbrk+0x64>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002026:	4b07      	ldr	r3, [pc, #28]	@ (8002044 <_sbrk+0x64>)
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4413      	add	r3, r2
 800202e:	4a05      	ldr	r2, [pc, #20]	@ (8002044 <_sbrk+0x64>)
 8002030:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002032:	68fb      	ldr	r3, [r7, #12]
}
 8002034:	4618      	mov	r0, r3
 8002036:	3718      	adds	r7, #24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	20020000 	.word	0x20020000
 8002040:	00000400 	.word	0x00000400
 8002044:	20000204 	.word	0x20000204
 8002048:	20000360 	.word	0x20000360

0800204c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	6039      	str	r1, [r7, #0]
 8002056:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205c:	2b00      	cmp	r3, #0
 800205e:	db0a      	blt.n	8002076 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	b2da      	uxtb	r2, r3
 8002064:	490c      	ldr	r1, [pc, #48]	@ (8002098 <__NVIC_SetPriority+0x4c>)
 8002066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206a:	0112      	lsls	r2, r2, #4
 800206c:	b2d2      	uxtb	r2, r2
 800206e:	440b      	add	r3, r1
 8002070:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002074:	e00a      	b.n	800208c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	b2da      	uxtb	r2, r3
 800207a:	4908      	ldr	r1, [pc, #32]	@ (800209c <__NVIC_SetPriority+0x50>)
 800207c:	79fb      	ldrb	r3, [r7, #7]
 800207e:	f003 030f 	and.w	r3, r3, #15
 8002082:	3b04      	subs	r3, #4
 8002084:	0112      	lsls	r2, r2, #4
 8002086:	b2d2      	uxtb	r2, r2
 8002088:	440b      	add	r3, r1
 800208a:	761a      	strb	r2, [r3, #24]
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	e000e100 	.word	0xe000e100
 800209c:	e000ed00 	.word	0xe000ed00

080020a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020b0:	d301      	bcc.n	80020b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020b2:	2301      	movs	r3, #1
 80020b4:	e00f      	b.n	80020d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020b6:	4a0a      	ldr	r2, [pc, #40]	@ (80020e0 <SysTick_Config+0x40>)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3b01      	subs	r3, #1
 80020bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020be:	210f      	movs	r1, #15
 80020c0:	f04f 30ff 	mov.w	r0, #4294967295
 80020c4:	f7ff ffc2 	bl	800204c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020c8:	4b05      	ldr	r3, [pc, #20]	@ (80020e0 <SysTick_Config+0x40>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ce:	4b04      	ldr	r3, [pc, #16]	@ (80020e0 <SysTick_Config+0x40>)
 80020d0:	2207      	movs	r2, #7
 80020d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	e000e010 	.word	0xe000e010

080020e4 <delay_ms>:
#include "system_config.h"

volatile uint32_t tick = 0;

void delay_ms(uint32_t ms) {
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
    uint32_t start = tick;
 80020ec:	4b08      	ldr	r3, [pc, #32]	@ (8002110 <delay_ms+0x2c>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	60fb      	str	r3, [r7, #12]
    while (tick - start < ms);
 80020f2:	bf00      	nop
 80020f4:	4b06      	ldr	r3, [pc, #24]	@ (8002110 <delay_ms+0x2c>)
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d8f8      	bhi.n	80020f4 <delay_ms+0x10>
}
 8002102:	bf00      	nop
 8002104:	bf00      	nop
 8002106:	3714      	adds	r7, #20
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	20000208 	.word	0x20000208

08002114 <SystemClock_Config>:

void SystemClock_Config(void) {
 8002114:	b580      	push	{r7, lr}
 8002116:	b094      	sub	sp, #80	@ 0x50
 8002118:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800211a:	f107 0320 	add.w	r3, r7, #32
 800211e:	2230      	movs	r2, #48	@ 0x30
 8002120:	2100      	movs	r1, #0
 8002122:	4618      	mov	r0, r3
 8002124:	f001 fc47 	bl	80039b6 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002128:	f107 030c 	add.w	r3, r7, #12
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	605a      	str	r2, [r3, #4]
 8002132:	609a      	str	r2, [r3, #8]
 8002134:	60da      	str	r2, [r3, #12]
 8002136:	611a      	str	r2, [r3, #16]

    __HAL_RCC_PWR_CLK_ENABLE();
 8002138:	2300      	movs	r3, #0
 800213a:	60bb      	str	r3, [r7, #8]
 800213c:	4b2c      	ldr	r3, [pc, #176]	@ (80021f0 <SystemClock_Config+0xdc>)
 800213e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002140:	4a2b      	ldr	r2, [pc, #172]	@ (80021f0 <SystemClock_Config+0xdc>)
 8002142:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002146:	6413      	str	r3, [r2, #64]	@ 0x40
 8002148:	4b29      	ldr	r3, [pc, #164]	@ (80021f0 <SystemClock_Config+0xdc>)
 800214a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002150:	60bb      	str	r3, [r7, #8]
 8002152:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002154:	2300      	movs	r3, #0
 8002156:	607b      	str	r3, [r7, #4]
 8002158:	4b26      	ldr	r3, [pc, #152]	@ (80021f4 <SystemClock_Config+0xe0>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a25      	ldr	r2, [pc, #148]	@ (80021f4 <SystemClock_Config+0xe0>)
 800215e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002162:	6013      	str	r3, [r2, #0]
 8002164:	4b23      	ldr	r3, [pc, #140]	@ (80021f4 <SystemClock_Config+0xe0>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800216c:	607b      	str	r3, [r7, #4]
 800216e:	687b      	ldr	r3, [r7, #4]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002170:	2301      	movs	r3, #1
 8002172:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002174:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002178:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800217a:	2302      	movs	r3, #2
 800217c:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800217e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002182:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 4;
 8002184:	2304      	movs	r3, #4
 8002186:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 84;
 8002188:	2354      	movs	r3, #84	@ 0x54
 800218a:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800218c:	2302      	movs	r3, #2
 800218e:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8002190:	2304      	movs	r3, #4
 8002192:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002194:	f107 0320 	add.w	r3, r7, #32
 8002198:	4618      	mov	r0, r3
 800219a:	f000 fa17 	bl	80025cc <HAL_RCC_OscConfig>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <SystemClock_Config+0x94>
        while (1);
 80021a4:	bf00      	nop
 80021a6:	e7fd      	b.n	80021a4 <SystemClock_Config+0x90>
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80021a8:	230f      	movs	r3, #15
 80021aa:	60fb      	str	r3, [r7, #12]
                                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021ac:	2302      	movs	r3, #2
 80021ae:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021b8:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021ba:	2300      	movs	r3, #0
 80021bc:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80021be:	f107 030c 	add.w	r3, r7, #12
 80021c2:	2102      	movs	r1, #2
 80021c4:	4618      	mov	r0, r3
 80021c6:	f000 fc79 	bl	8002abc <HAL_RCC_ClockConfig>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <SystemClock_Config+0xc0>
        while (1);
 80021d0:	bf00      	nop
 80021d2:	e7fd      	b.n	80021d0 <SystemClock_Config+0xbc>
    }
    SysTick_Config(SystemCoreClock / 1000);
 80021d4:	4b08      	ldr	r3, [pc, #32]	@ (80021f8 <SystemClock_Config+0xe4>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a08      	ldr	r2, [pc, #32]	@ (80021fc <SystemClock_Config+0xe8>)
 80021da:	fba2 2303 	umull	r2, r3, r2, r3
 80021de:	099b      	lsrs	r3, r3, #6
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff ff5d 	bl	80020a0 <SysTick_Config>
}
 80021e6:	bf00      	nop
 80021e8:	3750      	adds	r7, #80	@ 0x50
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40023800 	.word	0x40023800
 80021f4:	40007000 	.word	0x40007000
 80021f8:	2000000c 	.word	0x2000000c
 80021fc:	10624dd3 	.word	0x10624dd3

08002200 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002204:	4b06      	ldr	r3, [pc, #24]	@ (8002220 <SystemInit+0x20>)
 8002206:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800220a:	4a05      	ldr	r2, [pc, #20]	@ (8002220 <SystemInit+0x20>)
 800220c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002210:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002214:	bf00      	nop
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	e000ed00 	.word	0xe000ed00

08002224 <UART1_Init>:
#include "uart.h"

void UART1_Init(void) {
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8002228:	4b20      	ldr	r3, [pc, #128]	@ (80022ac <UART1_Init+0x88>)
 800222a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222c:	4a1f      	ldr	r2, [pc, #124]	@ (80022ac <UART1_Init+0x88>)
 800222e:	f043 0301 	orr.w	r3, r3, #1
 8002232:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8002234:	4b1d      	ldr	r3, [pc, #116]	@ (80022ac <UART1_Init+0x88>)
 8002236:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002238:	4a1c      	ldr	r2, [pc, #112]	@ (80022ac <UART1_Init+0x88>)
 800223a:	f043 0310 	orr.w	r3, r3, #16
 800223e:	6453      	str	r3, [r2, #68]	@ 0x44
    GPIOA->MODER &= ~((3U << (UART1_TX_PIN * 2)) | (3U << (UART1_RX_PIN * 2)));
 8002240:	4b1b      	ldr	r3, [pc, #108]	@ (80022b0 <UART1_Init+0x8c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a1a      	ldr	r2, [pc, #104]	@ (80022b0 <UART1_Init+0x8c>)
 8002246:	f423 1370 	bic.w	r3, r3, #3932160	@ 0x3c0000
 800224a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (2U << (UART1_TX_PIN * 2)) | (2U << (UART1_RX_PIN * 2));
 800224c:	4b18      	ldr	r3, [pc, #96]	@ (80022b0 <UART1_Init+0x8c>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a17      	ldr	r2, [pc, #92]	@ (80022b0 <UART1_Init+0x8c>)
 8002252:	f443 1320 	orr.w	r3, r3, #2621440	@ 0x280000
 8002256:	6013      	str	r3, [r2, #0]
    GPIOA->OTYPER &= ~((1U << UART1_TX_PIN) | (1U << UART1_RX_PIN));
 8002258:	4b15      	ldr	r3, [pc, #84]	@ (80022b0 <UART1_Init+0x8c>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	4a14      	ldr	r2, [pc, #80]	@ (80022b0 <UART1_Init+0x8c>)
 800225e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002262:	6053      	str	r3, [r2, #4]
    GPIOA->OSPEEDR |= (3U << (UART1_TX_PIN * 2)) | (3U << (UART1_RX_PIN * 2));
 8002264:	4b12      	ldr	r3, [pc, #72]	@ (80022b0 <UART1_Init+0x8c>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	4a11      	ldr	r2, [pc, #68]	@ (80022b0 <UART1_Init+0x8c>)
 800226a:	f443 1370 	orr.w	r3, r3, #3932160	@ 0x3c0000
 800226e:	6093      	str	r3, [r2, #8]
    GPIOA->AFR[1] |= (7U << ((UART1_TX_PIN - 8) * 4)) | (7U << ((UART1_RX_PIN - 8) * 4));
 8002270:	4b0f      	ldr	r3, [pc, #60]	@ (80022b0 <UART1_Init+0x8c>)
 8002272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002274:	4a0e      	ldr	r2, [pc, #56]	@ (80022b0 <UART1_Init+0x8c>)
 8002276:	f443 63ee 	orr.w	r3, r3, #1904	@ 0x770
 800227a:	6253      	str	r3, [r2, #36]	@ 0x24
    USART1->CR1 = 0;
 800227c:	4b0d      	ldr	r3, [pc, #52]	@ (80022b4 <UART1_Init+0x90>)
 800227e:	2200      	movs	r2, #0
 8002280:	60da      	str	r2, [r3, #12]
    USART1->BRR = SystemCoreClock / UART1_BAUDRATE;
 8002282:	4b0d      	ldr	r3, [pc, #52]	@ (80022b8 <UART1_Init+0x94>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a0b      	ldr	r2, [pc, #44]	@ (80022b4 <UART1_Init+0x90>)
 8002288:	490c      	ldr	r1, [pc, #48]	@ (80022bc <UART1_Init+0x98>)
 800228a:	fba1 1303 	umull	r1, r3, r1, r3
 800228e:	0a9b      	lsrs	r3, r3, #10
 8002290:	6093      	str	r3, [r2, #8]
    USART1->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8002292:	4b08      	ldr	r3, [pc, #32]	@ (80022b4 <UART1_Init+0x90>)
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	4a07      	ldr	r2, [pc, #28]	@ (80022b4 <UART1_Init+0x90>)
 8002298:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800229c:	f043 030c 	orr.w	r3, r3, #12
 80022a0:	60d3      	str	r3, [r2, #12]
}
 80022a2:	bf00      	nop
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	40023800 	.word	0x40023800
 80022b0:	40020000 	.word	0x40020000
 80022b4:	40011000 	.word	0x40011000
 80022b8:	2000000c 	.word	0x2000000c
 80022bc:	1b4e81b5 	.word	0x1b4e81b5

080022c0 <UART1_SendString>:

void UART1_SendString(char *str) {
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
    while (*str) {
 80022c8:	e00c      	b.n	80022e4 <UART1_SendString+0x24>
        while (!(USART1->SR & USART_SR_TXE));
 80022ca:	bf00      	nop
 80022cc:	4b0b      	ldr	r3, [pc, #44]	@ (80022fc <UART1_SendString+0x3c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d0f9      	beq.n	80022cc <UART1_SendString+0xc>
        USART1->DR = *str++;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	1c5a      	adds	r2, r3, #1
 80022dc:	607a      	str	r2, [r7, #4]
 80022de:	781a      	ldrb	r2, [r3, #0]
 80022e0:	4b06      	ldr	r3, [pc, #24]	@ (80022fc <UART1_SendString+0x3c>)
 80022e2:	605a      	str	r2, [r3, #4]
    while (*str) {
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d1ee      	bne.n	80022ca <UART1_SendString+0xa>
    }
}
 80022ec:	bf00      	nop
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	40011000 	.word	0x40011000

08002300 <UART1_ReceiveString>:

void UART1_ReceiveString(char *buffer, uint8_t max_len) {
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	460b      	mov	r3, r1
 800230a:	70fb      	strb	r3, [r7, #3]
    uint8_t i = 0;
 800230c:	2300      	movs	r3, #0
 800230e:	73fb      	strb	r3, [r7, #15]
    while (i < max_len - 1) {
 8002310:	e01a      	b.n	8002348 <UART1_ReceiveString+0x48>
        while (!(USART1->SR & USART_SR_RXNE));
 8002312:	bf00      	nop
 8002314:	4b14      	ldr	r3, [pc, #80]	@ (8002368 <UART1_ReceiveString+0x68>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0320 	and.w	r3, r3, #32
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0f9      	beq.n	8002314 <UART1_ReceiveString+0x14>
        char c = USART1->DR;
 8002320:	4b11      	ldr	r3, [pc, #68]	@ (8002368 <UART1_ReceiveString+0x68>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	73bb      	strb	r3, [r7, #14]
        if (c == '\n') {
 8002326:	7bbb      	ldrb	r3, [r7, #14]
 8002328:	2b0a      	cmp	r3, #10
 800232a:	d105      	bne.n	8002338 <UART1_ReceiveString+0x38>
            buffer[i] = '\0';
 800232c:	7bfb      	ldrb	r3, [r7, #15]
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	4413      	add	r3, r2
 8002332:	2200      	movs	r2, #0
 8002334:	701a      	strb	r2, [r3, #0]
            break;
 8002336:	e00c      	b.n	8002352 <UART1_ReceiveString+0x52>
        }
        buffer[i++] = c;
 8002338:	7bfb      	ldrb	r3, [r7, #15]
 800233a:	1c5a      	adds	r2, r3, #1
 800233c:	73fa      	strb	r2, [r7, #15]
 800233e:	461a      	mov	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4413      	add	r3, r2
 8002344:	7bba      	ldrb	r2, [r7, #14]
 8002346:	701a      	strb	r2, [r3, #0]
    while (i < max_len - 1) {
 8002348:	7bfa      	ldrb	r2, [r7, #15]
 800234a:	78fb      	ldrb	r3, [r7, #3]
 800234c:	3b01      	subs	r3, #1
 800234e:	429a      	cmp	r2, r3
 8002350:	dbdf      	blt.n	8002312 <UART1_ReceiveString+0x12>
    }
    buffer[i] = '\0';
 8002352:	7bfb      	ldrb	r3, [r7, #15]
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	4413      	add	r3, r2
 8002358:	2200      	movs	r2, #0
 800235a:	701a      	strb	r2, [r3, #0]
}
 800235c:	bf00      	nop
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	40011000 	.word	0x40011000

0800236c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800236c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80023a4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002370:	f7ff ff46 	bl	8002200 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002374:	480c      	ldr	r0, [pc, #48]	@ (80023a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002376:	490d      	ldr	r1, [pc, #52]	@ (80023ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002378:	4a0d      	ldr	r2, [pc, #52]	@ (80023b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800237a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800237c:	e002      	b.n	8002384 <LoopCopyDataInit>

0800237e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800237e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002380:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002382:	3304      	adds	r3, #4

08002384 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002384:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002386:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002388:	d3f9      	bcc.n	800237e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800238a:	4a0a      	ldr	r2, [pc, #40]	@ (80023b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800238c:	4c0a      	ldr	r4, [pc, #40]	@ (80023b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800238e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002390:	e001      	b.n	8002396 <LoopFillZerobss>

08002392 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002392:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002394:	3204      	adds	r2, #4

08002396 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002396:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002398:	d3fb      	bcc.n	8002392 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800239a:	f001 fb65 	bl	8003a68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800239e:	f7fe ff43 	bl	8001228 <main>
  bx  lr    
 80023a2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80023a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023ac:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80023b0:	08006a68 	.word	0x08006a68
  ldr r2, =_sbss
 80023b4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80023b8:	2000035c 	.word	0x2000035c

080023bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023bc:	e7fe      	b.n	80023bc <ADC_IRQHandler>
	...

080023c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023c8:	4b12      	ldr	r3, [pc, #72]	@ (8002414 <HAL_InitTick+0x54>)
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	4b12      	ldr	r3, [pc, #72]	@ (8002418 <HAL_InitTick+0x58>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	4619      	mov	r1, r3
 80023d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80023da:	fbb2 f3f3 	udiv	r3, r2, r3
 80023de:	4618      	mov	r0, r3
 80023e0:	f000 f8e8 	bl	80025b4 <HAL_SYSTICK_Config>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e00e      	b.n	800240c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b0f      	cmp	r3, #15
 80023f2:	d80a      	bhi.n	800240a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023f4:	2200      	movs	r2, #0
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	f04f 30ff 	mov.w	r0, #4294967295
 80023fc:	f000 f8be 	bl	800257c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002400:	4a06      	ldr	r2, [pc, #24]	@ (800241c <HAL_InitTick+0x5c>)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002406:	2300      	movs	r3, #0
 8002408:	e000      	b.n	800240c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
}
 800240c:	4618      	mov	r0, r3
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	2000000c 	.word	0x2000000c
 8002418:	20000014 	.word	0x20000014
 800241c:	20000010 	.word	0x20000010

08002420 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002424:	4b06      	ldr	r3, [pc, #24]	@ (8002440 <HAL_IncTick+0x20>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	461a      	mov	r2, r3
 800242a:	4b06      	ldr	r3, [pc, #24]	@ (8002444 <HAL_IncTick+0x24>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4413      	add	r3, r2
 8002430:	4a04      	ldr	r2, [pc, #16]	@ (8002444 <HAL_IncTick+0x24>)
 8002432:	6013      	str	r3, [r2, #0]
}
 8002434:	bf00      	nop
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	20000014 	.word	0x20000014
 8002444:	2000020c 	.word	0x2000020c

08002448 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  return uwTick;
 800244c:	4b03      	ldr	r3, [pc, #12]	@ (800245c <HAL_GetTick+0x14>)
 800244e:	681b      	ldr	r3, [r3, #0]
}
 8002450:	4618      	mov	r0, r3
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	2000020c 	.word	0x2000020c

08002460 <__NVIC_GetPriorityGrouping>:
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002464:	4b04      	ldr	r3, [pc, #16]	@ (8002478 <__NVIC_GetPriorityGrouping+0x18>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	0a1b      	lsrs	r3, r3, #8
 800246a:	f003 0307 	and.w	r3, r3, #7
}
 800246e:	4618      	mov	r0, r3
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	e000ed00 	.word	0xe000ed00

0800247c <__NVIC_SetPriority>:
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	6039      	str	r1, [r7, #0]
 8002486:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248c:	2b00      	cmp	r3, #0
 800248e:	db0a      	blt.n	80024a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	b2da      	uxtb	r2, r3
 8002494:	490c      	ldr	r1, [pc, #48]	@ (80024c8 <__NVIC_SetPriority+0x4c>)
 8002496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249a:	0112      	lsls	r2, r2, #4
 800249c:	b2d2      	uxtb	r2, r2
 800249e:	440b      	add	r3, r1
 80024a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80024a4:	e00a      	b.n	80024bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	b2da      	uxtb	r2, r3
 80024aa:	4908      	ldr	r1, [pc, #32]	@ (80024cc <__NVIC_SetPriority+0x50>)
 80024ac:	79fb      	ldrb	r3, [r7, #7]
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	3b04      	subs	r3, #4
 80024b4:	0112      	lsls	r2, r2, #4
 80024b6:	b2d2      	uxtb	r2, r2
 80024b8:	440b      	add	r3, r1
 80024ba:	761a      	strb	r2, [r3, #24]
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	e000e100 	.word	0xe000e100
 80024cc:	e000ed00 	.word	0xe000ed00

080024d0 <NVIC_EncodePriority>:
{
 80024d0:	b480      	push	{r7}
 80024d2:	b089      	sub	sp, #36	@ 0x24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f003 0307 	and.w	r3, r3, #7
 80024e2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	f1c3 0307 	rsb	r3, r3, #7
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	bf28      	it	cs
 80024ee:	2304      	movcs	r3, #4
 80024f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	3304      	adds	r3, #4
 80024f6:	2b06      	cmp	r3, #6
 80024f8:	d902      	bls.n	8002500 <NVIC_EncodePriority+0x30>
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	3b03      	subs	r3, #3
 80024fe:	e000      	b.n	8002502 <NVIC_EncodePriority+0x32>
 8002500:	2300      	movs	r3, #0
 8002502:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002504:	f04f 32ff 	mov.w	r2, #4294967295
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	43da      	mvns	r2, r3
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	401a      	ands	r2, r3
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002518:	f04f 31ff 	mov.w	r1, #4294967295
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	fa01 f303 	lsl.w	r3, r1, r3
 8002522:	43d9      	mvns	r1, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002528:	4313      	orrs	r3, r2
}
 800252a:	4618      	mov	r0, r3
 800252c:	3724      	adds	r7, #36	@ 0x24
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
	...

08002538 <SysTick_Config>:
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3b01      	subs	r3, #1
 8002544:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002548:	d301      	bcc.n	800254e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800254a:	2301      	movs	r3, #1
 800254c:	e00f      	b.n	800256e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800254e:	4a0a      	ldr	r2, [pc, #40]	@ (8002578 <SysTick_Config+0x40>)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3b01      	subs	r3, #1
 8002554:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002556:	210f      	movs	r1, #15
 8002558:	f04f 30ff 	mov.w	r0, #4294967295
 800255c:	f7ff ff8e 	bl	800247c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002560:	4b05      	ldr	r3, [pc, #20]	@ (8002578 <SysTick_Config+0x40>)
 8002562:	2200      	movs	r2, #0
 8002564:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002566:	4b04      	ldr	r3, [pc, #16]	@ (8002578 <SysTick_Config+0x40>)
 8002568:	2207      	movs	r2, #7
 800256a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	e000e010 	.word	0xe000e010

0800257c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
 8002588:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800258a:	2300      	movs	r3, #0
 800258c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800258e:	f7ff ff67 	bl	8002460 <__NVIC_GetPriorityGrouping>
 8002592:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	68b9      	ldr	r1, [r7, #8]
 8002598:	6978      	ldr	r0, [r7, #20]
 800259a:	f7ff ff99 	bl	80024d0 <NVIC_EncodePriority>
 800259e:	4602      	mov	r2, r0
 80025a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025a4:	4611      	mov	r1, r2
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff ff68 	bl	800247c <__NVIC_SetPriority>
}
 80025ac:	bf00      	nop
 80025ae:	3718      	adds	r7, #24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f7ff ffbb 	bl	8002538 <SysTick_Config>
 80025c2:	4603      	mov	r3, r0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3708      	adds	r7, #8
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e267      	b.n	8002aae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d075      	beq.n	80026d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80025ea:	4b88      	ldr	r3, [pc, #544]	@ (800280c <HAL_RCC_OscConfig+0x240>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 030c 	and.w	r3, r3, #12
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	d00c      	beq.n	8002610 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025f6:	4b85      	ldr	r3, [pc, #532]	@ (800280c <HAL_RCC_OscConfig+0x240>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80025fe:	2b08      	cmp	r3, #8
 8002600:	d112      	bne.n	8002628 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002602:	4b82      	ldr	r3, [pc, #520]	@ (800280c <HAL_RCC_OscConfig+0x240>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800260a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800260e:	d10b      	bne.n	8002628 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002610:	4b7e      	ldr	r3, [pc, #504]	@ (800280c <HAL_RCC_OscConfig+0x240>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d05b      	beq.n	80026d4 <HAL_RCC_OscConfig+0x108>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d157      	bne.n	80026d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e242      	b.n	8002aae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002630:	d106      	bne.n	8002640 <HAL_RCC_OscConfig+0x74>
 8002632:	4b76      	ldr	r3, [pc, #472]	@ (800280c <HAL_RCC_OscConfig+0x240>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a75      	ldr	r2, [pc, #468]	@ (800280c <HAL_RCC_OscConfig+0x240>)
 8002638:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800263c:	6013      	str	r3, [r2, #0]
 800263e:	e01d      	b.n	800267c <HAL_RCC_OscConfig+0xb0>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002648:	d10c      	bne.n	8002664 <HAL_RCC_OscConfig+0x98>
 800264a:	4b70      	ldr	r3, [pc, #448]	@ (800280c <HAL_RCC_OscConfig+0x240>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a6f      	ldr	r2, [pc, #444]	@ (800280c <HAL_RCC_OscConfig+0x240>)
 8002650:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002654:	6013      	str	r3, [r2, #0]
 8002656:	4b6d      	ldr	r3, [pc, #436]	@ (800280c <HAL_RCC_OscConfig+0x240>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a6c      	ldr	r2, [pc, #432]	@ (800280c <HAL_RCC_OscConfig+0x240>)
 800265c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002660:	6013      	str	r3, [r2, #0]
 8002662:	e00b      	b.n	800267c <HAL_RCC_OscConfig+0xb0>
 8002664:	4b69      	ldr	r3, [pc, #420]	@ (800280c <HAL_RCC_OscConfig+0x240>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a68      	ldr	r2, [pc, #416]	@ (800280c <HAL_RCC_OscConfig+0x240>)
 800266a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800266e:	6013      	str	r3, [r2, #0]
 8002670:	4b66      	ldr	r3, [pc, #408]	@ (800280c <HAL_RCC_OscConfig+0x240>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a65      	ldr	r2, [pc, #404]	@ (800280c <HAL_RCC_OscConfig+0x240>)
 8002676:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800267a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d013      	beq.n	80026ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002684:	f7ff fee0 	bl	8002448 <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800268c:	f7ff fedc 	bl	8002448 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b64      	cmp	r3, #100	@ 0x64
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e207      	b.n	8002aae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800269e:	4b5b      	ldr	r3, [pc, #364]	@ (800280c <HAL_RCC_OscConfig+0x240>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0f0      	beq.n	800268c <HAL_RCC_OscConfig+0xc0>
 80026aa:	e014      	b.n	80026d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ac:	f7ff fecc 	bl	8002448 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026b4:	f7ff fec8 	bl	8002448 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b64      	cmp	r3, #100	@ 0x64
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e1f3      	b.n	8002aae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026c6:	4b51      	ldr	r3, [pc, #324]	@ (800280c <HAL_RCC_OscConfig+0x240>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1f0      	bne.n	80026b4 <HAL_RCC_OscConfig+0xe8>
 80026d2:	e000      	b.n	80026d6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d063      	beq.n	80027aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80026e2:	4b4a      	ldr	r3, [pc, #296]	@ (800280c <HAL_RCC_OscConfig+0x240>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 030c 	and.w	r3, r3, #12
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00b      	beq.n	8002706 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026ee:	4b47      	ldr	r3, [pc, #284]	@ (800280c <HAL_RCC_OscConfig+0x240>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80026f6:	2b08      	cmp	r3, #8
 80026f8:	d11c      	bne.n	8002734 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026fa:	4b44      	ldr	r3, [pc, #272]	@ (800280c <HAL_RCC_OscConfig+0x240>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d116      	bne.n	8002734 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002706:	4b41      	ldr	r3, [pc, #260]	@ (800280c <HAL_RCC_OscConfig+0x240>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d005      	beq.n	800271e <HAL_RCC_OscConfig+0x152>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d001      	beq.n	800271e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e1c7      	b.n	8002aae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800271e:	4b3b      	ldr	r3, [pc, #236]	@ (800280c <HAL_RCC_OscConfig+0x240>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	4937      	ldr	r1, [pc, #220]	@ (800280c <HAL_RCC_OscConfig+0x240>)
 800272e:	4313      	orrs	r3, r2
 8002730:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002732:	e03a      	b.n	80027aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d020      	beq.n	800277e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800273c:	4b34      	ldr	r3, [pc, #208]	@ (8002810 <HAL_RCC_OscConfig+0x244>)
 800273e:	2201      	movs	r2, #1
 8002740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002742:	f7ff fe81 	bl	8002448 <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002748:	e008      	b.n	800275c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800274a:	f7ff fe7d 	bl	8002448 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e1a8      	b.n	8002aae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800275c:	4b2b      	ldr	r3, [pc, #172]	@ (800280c <HAL_RCC_OscConfig+0x240>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d0f0      	beq.n	800274a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002768:	4b28      	ldr	r3, [pc, #160]	@ (800280c <HAL_RCC_OscConfig+0x240>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	4925      	ldr	r1, [pc, #148]	@ (800280c <HAL_RCC_OscConfig+0x240>)
 8002778:	4313      	orrs	r3, r2
 800277a:	600b      	str	r3, [r1, #0]
 800277c:	e015      	b.n	80027aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800277e:	4b24      	ldr	r3, [pc, #144]	@ (8002810 <HAL_RCC_OscConfig+0x244>)
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002784:	f7ff fe60 	bl	8002448 <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800278c:	f7ff fe5c 	bl	8002448 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e187      	b.n	8002aae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800279e:	4b1b      	ldr	r3, [pc, #108]	@ (800280c <HAL_RCC_OscConfig+0x240>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1f0      	bne.n	800278c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0308 	and.w	r3, r3, #8
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d036      	beq.n	8002824 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d016      	beq.n	80027ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027be:	4b15      	ldr	r3, [pc, #84]	@ (8002814 <HAL_RCC_OscConfig+0x248>)
 80027c0:	2201      	movs	r2, #1
 80027c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c4:	f7ff fe40 	bl	8002448 <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027cc:	f7ff fe3c 	bl	8002448 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e167      	b.n	8002aae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027de:	4b0b      	ldr	r3, [pc, #44]	@ (800280c <HAL_RCC_OscConfig+0x240>)
 80027e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d0f0      	beq.n	80027cc <HAL_RCC_OscConfig+0x200>
 80027ea:	e01b      	b.n	8002824 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027ec:	4b09      	ldr	r3, [pc, #36]	@ (8002814 <HAL_RCC_OscConfig+0x248>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f2:	f7ff fe29 	bl	8002448 <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027f8:	e00e      	b.n	8002818 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027fa:	f7ff fe25 	bl	8002448 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d907      	bls.n	8002818 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e150      	b.n	8002aae <HAL_RCC_OscConfig+0x4e2>
 800280c:	40023800 	.word	0x40023800
 8002810:	42470000 	.word	0x42470000
 8002814:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002818:	4b88      	ldr	r3, [pc, #544]	@ (8002a3c <HAL_RCC_OscConfig+0x470>)
 800281a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1ea      	bne.n	80027fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 8097 	beq.w	8002960 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002832:	2300      	movs	r3, #0
 8002834:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002836:	4b81      	ldr	r3, [pc, #516]	@ (8002a3c <HAL_RCC_OscConfig+0x470>)
 8002838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d10f      	bne.n	8002862 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002842:	2300      	movs	r3, #0
 8002844:	60bb      	str	r3, [r7, #8]
 8002846:	4b7d      	ldr	r3, [pc, #500]	@ (8002a3c <HAL_RCC_OscConfig+0x470>)
 8002848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284a:	4a7c      	ldr	r2, [pc, #496]	@ (8002a3c <HAL_RCC_OscConfig+0x470>)
 800284c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002850:	6413      	str	r3, [r2, #64]	@ 0x40
 8002852:	4b7a      	ldr	r3, [pc, #488]	@ (8002a3c <HAL_RCC_OscConfig+0x470>)
 8002854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800285a:	60bb      	str	r3, [r7, #8]
 800285c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800285e:	2301      	movs	r3, #1
 8002860:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002862:	4b77      	ldr	r3, [pc, #476]	@ (8002a40 <HAL_RCC_OscConfig+0x474>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800286a:	2b00      	cmp	r3, #0
 800286c:	d118      	bne.n	80028a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800286e:	4b74      	ldr	r3, [pc, #464]	@ (8002a40 <HAL_RCC_OscConfig+0x474>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a73      	ldr	r2, [pc, #460]	@ (8002a40 <HAL_RCC_OscConfig+0x474>)
 8002874:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002878:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800287a:	f7ff fde5 	bl	8002448 <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002880:	e008      	b.n	8002894 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002882:	f7ff fde1 	bl	8002448 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e10c      	b.n	8002aae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002894:	4b6a      	ldr	r3, [pc, #424]	@ (8002a40 <HAL_RCC_OscConfig+0x474>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800289c:	2b00      	cmp	r3, #0
 800289e:	d0f0      	beq.n	8002882 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d106      	bne.n	80028b6 <HAL_RCC_OscConfig+0x2ea>
 80028a8:	4b64      	ldr	r3, [pc, #400]	@ (8002a3c <HAL_RCC_OscConfig+0x470>)
 80028aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ac:	4a63      	ldr	r2, [pc, #396]	@ (8002a3c <HAL_RCC_OscConfig+0x470>)
 80028ae:	f043 0301 	orr.w	r3, r3, #1
 80028b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80028b4:	e01c      	b.n	80028f0 <HAL_RCC_OscConfig+0x324>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	2b05      	cmp	r3, #5
 80028bc:	d10c      	bne.n	80028d8 <HAL_RCC_OscConfig+0x30c>
 80028be:	4b5f      	ldr	r3, [pc, #380]	@ (8002a3c <HAL_RCC_OscConfig+0x470>)
 80028c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028c2:	4a5e      	ldr	r2, [pc, #376]	@ (8002a3c <HAL_RCC_OscConfig+0x470>)
 80028c4:	f043 0304 	orr.w	r3, r3, #4
 80028c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80028ca:	4b5c      	ldr	r3, [pc, #368]	@ (8002a3c <HAL_RCC_OscConfig+0x470>)
 80028cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ce:	4a5b      	ldr	r2, [pc, #364]	@ (8002a3c <HAL_RCC_OscConfig+0x470>)
 80028d0:	f043 0301 	orr.w	r3, r3, #1
 80028d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80028d6:	e00b      	b.n	80028f0 <HAL_RCC_OscConfig+0x324>
 80028d8:	4b58      	ldr	r3, [pc, #352]	@ (8002a3c <HAL_RCC_OscConfig+0x470>)
 80028da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028dc:	4a57      	ldr	r2, [pc, #348]	@ (8002a3c <HAL_RCC_OscConfig+0x470>)
 80028de:	f023 0301 	bic.w	r3, r3, #1
 80028e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80028e4:	4b55      	ldr	r3, [pc, #340]	@ (8002a3c <HAL_RCC_OscConfig+0x470>)
 80028e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028e8:	4a54      	ldr	r2, [pc, #336]	@ (8002a3c <HAL_RCC_OscConfig+0x470>)
 80028ea:	f023 0304 	bic.w	r3, r3, #4
 80028ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d015      	beq.n	8002924 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f8:	f7ff fda6 	bl	8002448 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028fe:	e00a      	b.n	8002916 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002900:	f7ff fda2 	bl	8002448 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800290e:	4293      	cmp	r3, r2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e0cb      	b.n	8002aae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002916:	4b49      	ldr	r3, [pc, #292]	@ (8002a3c <HAL_RCC_OscConfig+0x470>)
 8002918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d0ee      	beq.n	8002900 <HAL_RCC_OscConfig+0x334>
 8002922:	e014      	b.n	800294e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002924:	f7ff fd90 	bl	8002448 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800292a:	e00a      	b.n	8002942 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800292c:	f7ff fd8c 	bl	8002448 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	f241 3288 	movw	r2, #5000	@ 0x1388
 800293a:	4293      	cmp	r3, r2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e0b5      	b.n	8002aae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002942:	4b3e      	ldr	r3, [pc, #248]	@ (8002a3c <HAL_RCC_OscConfig+0x470>)
 8002944:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1ee      	bne.n	800292c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800294e:	7dfb      	ldrb	r3, [r7, #23]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d105      	bne.n	8002960 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002954:	4b39      	ldr	r3, [pc, #228]	@ (8002a3c <HAL_RCC_OscConfig+0x470>)
 8002956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002958:	4a38      	ldr	r2, [pc, #224]	@ (8002a3c <HAL_RCC_OscConfig+0x470>)
 800295a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800295e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	2b00      	cmp	r3, #0
 8002966:	f000 80a1 	beq.w	8002aac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800296a:	4b34      	ldr	r3, [pc, #208]	@ (8002a3c <HAL_RCC_OscConfig+0x470>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 030c 	and.w	r3, r3, #12
 8002972:	2b08      	cmp	r3, #8
 8002974:	d05c      	beq.n	8002a30 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	2b02      	cmp	r3, #2
 800297c:	d141      	bne.n	8002a02 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800297e:	4b31      	ldr	r3, [pc, #196]	@ (8002a44 <HAL_RCC_OscConfig+0x478>)
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002984:	f7ff fd60 	bl	8002448 <HAL_GetTick>
 8002988:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800298a:	e008      	b.n	800299e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800298c:	f7ff fd5c 	bl	8002448 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b02      	cmp	r3, #2
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e087      	b.n	8002aae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800299e:	4b27      	ldr	r3, [pc, #156]	@ (8002a3c <HAL_RCC_OscConfig+0x470>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1f0      	bne.n	800298c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	69da      	ldr	r2, [r3, #28]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	431a      	orrs	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b8:	019b      	lsls	r3, r3, #6
 80029ba:	431a      	orrs	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c0:	085b      	lsrs	r3, r3, #1
 80029c2:	3b01      	subs	r3, #1
 80029c4:	041b      	lsls	r3, r3, #16
 80029c6:	431a      	orrs	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029cc:	061b      	lsls	r3, r3, #24
 80029ce:	491b      	ldr	r1, [pc, #108]	@ (8002a3c <HAL_RCC_OscConfig+0x470>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002a44 <HAL_RCC_OscConfig+0x478>)
 80029d6:	2201      	movs	r2, #1
 80029d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029da:	f7ff fd35 	bl	8002448 <HAL_GetTick>
 80029de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029e0:	e008      	b.n	80029f4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e2:	f7ff fd31 	bl	8002448 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d901      	bls.n	80029f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e05c      	b.n	8002aae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029f4:	4b11      	ldr	r3, [pc, #68]	@ (8002a3c <HAL_RCC_OscConfig+0x470>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d0f0      	beq.n	80029e2 <HAL_RCC_OscConfig+0x416>
 8002a00:	e054      	b.n	8002aac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a02:	4b10      	ldr	r3, [pc, #64]	@ (8002a44 <HAL_RCC_OscConfig+0x478>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a08:	f7ff fd1e 	bl	8002448 <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a10:	f7ff fd1a 	bl	8002448 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e045      	b.n	8002aae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a22:	4b06      	ldr	r3, [pc, #24]	@ (8002a3c <HAL_RCC_OscConfig+0x470>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1f0      	bne.n	8002a10 <HAL_RCC_OscConfig+0x444>
 8002a2e:	e03d      	b.n	8002aac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d107      	bne.n	8002a48 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e038      	b.n	8002aae <HAL_RCC_OscConfig+0x4e2>
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	40007000 	.word	0x40007000
 8002a44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a48:	4b1b      	ldr	r3, [pc, #108]	@ (8002ab8 <HAL_RCC_OscConfig+0x4ec>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d028      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d121      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d11a      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a78:	4013      	ands	r3, r2
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d111      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a8e:	085b      	lsrs	r3, r3, #1
 8002a90:	3b01      	subs	r3, #1
 8002a92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d107      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d001      	beq.n	8002aac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e000      	b.n	8002aae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3718      	adds	r7, #24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40023800 	.word	0x40023800

08002abc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d101      	bne.n	8002ad0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e0cc      	b.n	8002c6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ad0:	4b68      	ldr	r3, [pc, #416]	@ (8002c74 <HAL_RCC_ClockConfig+0x1b8>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0307 	and.w	r3, r3, #7
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d90c      	bls.n	8002af8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ade:	4b65      	ldr	r3, [pc, #404]	@ (8002c74 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ae6:	4b63      	ldr	r3, [pc, #396]	@ (8002c74 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0307 	and.w	r3, r3, #7
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d001      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e0b8      	b.n	8002c6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d020      	beq.n	8002b46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d005      	beq.n	8002b1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b10:	4b59      	ldr	r3, [pc, #356]	@ (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	4a58      	ldr	r2, [pc, #352]	@ (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b16:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b1a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0308 	and.w	r3, r3, #8
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d005      	beq.n	8002b34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b28:	4b53      	ldr	r3, [pc, #332]	@ (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	4a52      	ldr	r2, [pc, #328]	@ (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b34:	4b50      	ldr	r3, [pc, #320]	@ (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	494d      	ldr	r1, [pc, #308]	@ (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d044      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d107      	bne.n	8002b6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b5a:	4b47      	ldr	r3, [pc, #284]	@ (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d119      	bne.n	8002b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e07f      	b.n	8002c6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d003      	beq.n	8002b7a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b76:	2b03      	cmp	r3, #3
 8002b78:	d107      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b7a:	4b3f      	ldr	r3, [pc, #252]	@ (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d109      	bne.n	8002b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e06f      	b.n	8002c6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b8a:	4b3b      	ldr	r3, [pc, #236]	@ (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e067      	b.n	8002c6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b9a:	4b37      	ldr	r3, [pc, #220]	@ (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f023 0203 	bic.w	r2, r3, #3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	4934      	ldr	r1, [pc, #208]	@ (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bac:	f7ff fc4c 	bl	8002448 <HAL_GetTick>
 8002bb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bb2:	e00a      	b.n	8002bca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bb4:	f7ff fc48 	bl	8002448 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e04f      	b.n	8002c6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bca:	4b2b      	ldr	r3, [pc, #172]	@ (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 020c 	and.w	r2, r3, #12
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d1eb      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bdc:	4b25      	ldr	r3, [pc, #148]	@ (8002c74 <HAL_RCC_ClockConfig+0x1b8>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0307 	and.w	r3, r3, #7
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d20c      	bcs.n	8002c04 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bea:	4b22      	ldr	r3, [pc, #136]	@ (8002c74 <HAL_RCC_ClockConfig+0x1b8>)
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	b2d2      	uxtb	r2, r2
 8002bf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bf2:	4b20      	ldr	r3, [pc, #128]	@ (8002c74 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	683a      	ldr	r2, [r7, #0]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d001      	beq.n	8002c04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e032      	b.n	8002c6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d008      	beq.n	8002c22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c10:	4b19      	ldr	r3, [pc, #100]	@ (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	4916      	ldr	r1, [pc, #88]	@ (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0308 	and.w	r3, r3, #8
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d009      	beq.n	8002c42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c2e:	4b12      	ldr	r3, [pc, #72]	@ (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	490e      	ldr	r1, [pc, #56]	@ (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c42:	f000 f821 	bl	8002c88 <HAL_RCC_GetSysClockFreq>
 8002c46:	4602      	mov	r2, r0
 8002c48:	4b0b      	ldr	r3, [pc, #44]	@ (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	091b      	lsrs	r3, r3, #4
 8002c4e:	f003 030f 	and.w	r3, r3, #15
 8002c52:	490a      	ldr	r1, [pc, #40]	@ (8002c7c <HAL_RCC_ClockConfig+0x1c0>)
 8002c54:	5ccb      	ldrb	r3, [r1, r3]
 8002c56:	fa22 f303 	lsr.w	r3, r2, r3
 8002c5a:	4a09      	ldr	r2, [pc, #36]	@ (8002c80 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002c5e:	4b09      	ldr	r3, [pc, #36]	@ (8002c84 <HAL_RCC_ClockConfig+0x1c8>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7ff fbac 	bl	80023c0 <HAL_InitTick>

  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40023c00 	.word	0x40023c00
 8002c78:	40023800 	.word	0x40023800
 8002c7c:	080066bc 	.word	0x080066bc
 8002c80:	2000000c 	.word	0x2000000c
 8002c84:	20000010 	.word	0x20000010

08002c88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c8c:	b094      	sub	sp, #80	@ 0x50
 8002c8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c90:	2300      	movs	r3, #0
 8002c92:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002c94:	2300      	movs	r3, #0
 8002c96:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ca0:	4b79      	ldr	r3, [pc, #484]	@ (8002e88 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f003 030c 	and.w	r3, r3, #12
 8002ca8:	2b08      	cmp	r3, #8
 8002caa:	d00d      	beq.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x40>
 8002cac:	2b08      	cmp	r3, #8
 8002cae:	f200 80e1 	bhi.w	8002e74 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d002      	beq.n	8002cbc <HAL_RCC_GetSysClockFreq+0x34>
 8002cb6:	2b04      	cmp	r3, #4
 8002cb8:	d003      	beq.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002cba:	e0db      	b.n	8002e74 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cbc:	4b73      	ldr	r3, [pc, #460]	@ (8002e8c <HAL_RCC_GetSysClockFreq+0x204>)
 8002cbe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cc0:	e0db      	b.n	8002e7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cc2:	4b73      	ldr	r3, [pc, #460]	@ (8002e90 <HAL_RCC_GetSysClockFreq+0x208>)
 8002cc4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cc6:	e0d8      	b.n	8002e7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cc8:	4b6f      	ldr	r3, [pc, #444]	@ (8002e88 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002cd0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cd2:	4b6d      	ldr	r3, [pc, #436]	@ (8002e88 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d063      	beq.n	8002da6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cde:	4b6a      	ldr	r3, [pc, #424]	@ (8002e88 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	099b      	lsrs	r3, r3, #6
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ce8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cf0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	637b      	str	r3, [r7, #52]	@ 0x34
 8002cf6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002cfa:	4622      	mov	r2, r4
 8002cfc:	462b      	mov	r3, r5
 8002cfe:	f04f 0000 	mov.w	r0, #0
 8002d02:	f04f 0100 	mov.w	r1, #0
 8002d06:	0159      	lsls	r1, r3, #5
 8002d08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d0c:	0150      	lsls	r0, r2, #5
 8002d0e:	4602      	mov	r2, r0
 8002d10:	460b      	mov	r3, r1
 8002d12:	4621      	mov	r1, r4
 8002d14:	1a51      	subs	r1, r2, r1
 8002d16:	6139      	str	r1, [r7, #16]
 8002d18:	4629      	mov	r1, r5
 8002d1a:	eb63 0301 	sbc.w	r3, r3, r1
 8002d1e:	617b      	str	r3, [r7, #20]
 8002d20:	f04f 0200 	mov.w	r2, #0
 8002d24:	f04f 0300 	mov.w	r3, #0
 8002d28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d2c:	4659      	mov	r1, fp
 8002d2e:	018b      	lsls	r3, r1, #6
 8002d30:	4651      	mov	r1, sl
 8002d32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d36:	4651      	mov	r1, sl
 8002d38:	018a      	lsls	r2, r1, #6
 8002d3a:	4651      	mov	r1, sl
 8002d3c:	ebb2 0801 	subs.w	r8, r2, r1
 8002d40:	4659      	mov	r1, fp
 8002d42:	eb63 0901 	sbc.w	r9, r3, r1
 8002d46:	f04f 0200 	mov.w	r2, #0
 8002d4a:	f04f 0300 	mov.w	r3, #0
 8002d4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d5a:	4690      	mov	r8, r2
 8002d5c:	4699      	mov	r9, r3
 8002d5e:	4623      	mov	r3, r4
 8002d60:	eb18 0303 	adds.w	r3, r8, r3
 8002d64:	60bb      	str	r3, [r7, #8]
 8002d66:	462b      	mov	r3, r5
 8002d68:	eb49 0303 	adc.w	r3, r9, r3
 8002d6c:	60fb      	str	r3, [r7, #12]
 8002d6e:	f04f 0200 	mov.w	r2, #0
 8002d72:	f04f 0300 	mov.w	r3, #0
 8002d76:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d7a:	4629      	mov	r1, r5
 8002d7c:	024b      	lsls	r3, r1, #9
 8002d7e:	4621      	mov	r1, r4
 8002d80:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d84:	4621      	mov	r1, r4
 8002d86:	024a      	lsls	r2, r1, #9
 8002d88:	4610      	mov	r0, r2
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d8e:	2200      	movs	r2, #0
 8002d90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d98:	f7fd ff0e 	bl	8000bb8 <__aeabi_uldivmod>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	460b      	mov	r3, r1
 8002da0:	4613      	mov	r3, r2
 8002da2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002da4:	e058      	b.n	8002e58 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002da6:	4b38      	ldr	r3, [pc, #224]	@ (8002e88 <HAL_RCC_GetSysClockFreq+0x200>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	099b      	lsrs	r3, r3, #6
 8002dac:	2200      	movs	r2, #0
 8002dae:	4618      	mov	r0, r3
 8002db0:	4611      	mov	r1, r2
 8002db2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002db6:	623b      	str	r3, [r7, #32]
 8002db8:	2300      	movs	r3, #0
 8002dba:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dbc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002dc0:	4642      	mov	r2, r8
 8002dc2:	464b      	mov	r3, r9
 8002dc4:	f04f 0000 	mov.w	r0, #0
 8002dc8:	f04f 0100 	mov.w	r1, #0
 8002dcc:	0159      	lsls	r1, r3, #5
 8002dce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dd2:	0150      	lsls	r0, r2, #5
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	4641      	mov	r1, r8
 8002dda:	ebb2 0a01 	subs.w	sl, r2, r1
 8002dde:	4649      	mov	r1, r9
 8002de0:	eb63 0b01 	sbc.w	fp, r3, r1
 8002de4:	f04f 0200 	mov.w	r2, #0
 8002de8:	f04f 0300 	mov.w	r3, #0
 8002dec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002df0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002df4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002df8:	ebb2 040a 	subs.w	r4, r2, sl
 8002dfc:	eb63 050b 	sbc.w	r5, r3, fp
 8002e00:	f04f 0200 	mov.w	r2, #0
 8002e04:	f04f 0300 	mov.w	r3, #0
 8002e08:	00eb      	lsls	r3, r5, #3
 8002e0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e0e:	00e2      	lsls	r2, r4, #3
 8002e10:	4614      	mov	r4, r2
 8002e12:	461d      	mov	r5, r3
 8002e14:	4643      	mov	r3, r8
 8002e16:	18e3      	adds	r3, r4, r3
 8002e18:	603b      	str	r3, [r7, #0]
 8002e1a:	464b      	mov	r3, r9
 8002e1c:	eb45 0303 	adc.w	r3, r5, r3
 8002e20:	607b      	str	r3, [r7, #4]
 8002e22:	f04f 0200 	mov.w	r2, #0
 8002e26:	f04f 0300 	mov.w	r3, #0
 8002e2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e2e:	4629      	mov	r1, r5
 8002e30:	028b      	lsls	r3, r1, #10
 8002e32:	4621      	mov	r1, r4
 8002e34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e38:	4621      	mov	r1, r4
 8002e3a:	028a      	lsls	r2, r1, #10
 8002e3c:	4610      	mov	r0, r2
 8002e3e:	4619      	mov	r1, r3
 8002e40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e42:	2200      	movs	r2, #0
 8002e44:	61bb      	str	r3, [r7, #24]
 8002e46:	61fa      	str	r2, [r7, #28]
 8002e48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e4c:	f7fd feb4 	bl	8000bb8 <__aeabi_uldivmod>
 8002e50:	4602      	mov	r2, r0
 8002e52:	460b      	mov	r3, r1
 8002e54:	4613      	mov	r3, r2
 8002e56:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002e58:	4b0b      	ldr	r3, [pc, #44]	@ (8002e88 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	0c1b      	lsrs	r3, r3, #16
 8002e5e:	f003 0303 	and.w	r3, r3, #3
 8002e62:	3301      	adds	r3, #1
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002e68:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e70:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e72:	e002      	b.n	8002e7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e74:	4b05      	ldr	r3, [pc, #20]	@ (8002e8c <HAL_RCC_GetSysClockFreq+0x204>)
 8002e76:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3750      	adds	r7, #80	@ 0x50
 8002e80:	46bd      	mov	sp, r7
 8002e82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e86:	bf00      	nop
 8002e88:	40023800 	.word	0x40023800
 8002e8c:	00f42400 	.word	0x00f42400
 8002e90:	007a1200 	.word	0x007a1200

08002e94 <__cvt>:
 8002e94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002e98:	ec57 6b10 	vmov	r6, r7, d0
 8002e9c:	2f00      	cmp	r7, #0
 8002e9e:	460c      	mov	r4, r1
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	463b      	mov	r3, r7
 8002ea4:	bfbb      	ittet	lt
 8002ea6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8002eaa:	461f      	movlt	r7, r3
 8002eac:	2300      	movge	r3, #0
 8002eae:	232d      	movlt	r3, #45	@ 0x2d
 8002eb0:	700b      	strb	r3, [r1, #0]
 8002eb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002eb4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8002eb8:	4691      	mov	r9, r2
 8002eba:	f023 0820 	bic.w	r8, r3, #32
 8002ebe:	bfbc      	itt	lt
 8002ec0:	4632      	movlt	r2, r6
 8002ec2:	4616      	movlt	r6, r2
 8002ec4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002ec8:	d005      	beq.n	8002ed6 <__cvt+0x42>
 8002eca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8002ece:	d100      	bne.n	8002ed2 <__cvt+0x3e>
 8002ed0:	3401      	adds	r4, #1
 8002ed2:	2102      	movs	r1, #2
 8002ed4:	e000      	b.n	8002ed8 <__cvt+0x44>
 8002ed6:	2103      	movs	r1, #3
 8002ed8:	ab03      	add	r3, sp, #12
 8002eda:	9301      	str	r3, [sp, #4]
 8002edc:	ab02      	add	r3, sp, #8
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	ec47 6b10 	vmov	d0, r6, r7
 8002ee4:	4653      	mov	r3, sl
 8002ee6:	4622      	mov	r2, r4
 8002ee8:	f000 fe6e 	bl	8003bc8 <_dtoa_r>
 8002eec:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8002ef0:	4605      	mov	r5, r0
 8002ef2:	d119      	bne.n	8002f28 <__cvt+0x94>
 8002ef4:	f019 0f01 	tst.w	r9, #1
 8002ef8:	d00e      	beq.n	8002f18 <__cvt+0x84>
 8002efa:	eb00 0904 	add.w	r9, r0, r4
 8002efe:	2200      	movs	r2, #0
 8002f00:	2300      	movs	r3, #0
 8002f02:	4630      	mov	r0, r6
 8002f04:	4639      	mov	r1, r7
 8002f06:	f7fd fde7 	bl	8000ad8 <__aeabi_dcmpeq>
 8002f0a:	b108      	cbz	r0, 8002f10 <__cvt+0x7c>
 8002f0c:	f8cd 900c 	str.w	r9, [sp, #12]
 8002f10:	2230      	movs	r2, #48	@ 0x30
 8002f12:	9b03      	ldr	r3, [sp, #12]
 8002f14:	454b      	cmp	r3, r9
 8002f16:	d31e      	bcc.n	8002f56 <__cvt+0xc2>
 8002f18:	9b03      	ldr	r3, [sp, #12]
 8002f1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8002f1c:	1b5b      	subs	r3, r3, r5
 8002f1e:	4628      	mov	r0, r5
 8002f20:	6013      	str	r3, [r2, #0]
 8002f22:	b004      	add	sp, #16
 8002f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f28:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002f2c:	eb00 0904 	add.w	r9, r0, r4
 8002f30:	d1e5      	bne.n	8002efe <__cvt+0x6a>
 8002f32:	7803      	ldrb	r3, [r0, #0]
 8002f34:	2b30      	cmp	r3, #48	@ 0x30
 8002f36:	d10a      	bne.n	8002f4e <__cvt+0xba>
 8002f38:	2200      	movs	r2, #0
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	4630      	mov	r0, r6
 8002f3e:	4639      	mov	r1, r7
 8002f40:	f7fd fdca 	bl	8000ad8 <__aeabi_dcmpeq>
 8002f44:	b918      	cbnz	r0, 8002f4e <__cvt+0xba>
 8002f46:	f1c4 0401 	rsb	r4, r4, #1
 8002f4a:	f8ca 4000 	str.w	r4, [sl]
 8002f4e:	f8da 3000 	ldr.w	r3, [sl]
 8002f52:	4499      	add	r9, r3
 8002f54:	e7d3      	b.n	8002efe <__cvt+0x6a>
 8002f56:	1c59      	adds	r1, r3, #1
 8002f58:	9103      	str	r1, [sp, #12]
 8002f5a:	701a      	strb	r2, [r3, #0]
 8002f5c:	e7d9      	b.n	8002f12 <__cvt+0x7e>

08002f5e <__exponent>:
 8002f5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f60:	2900      	cmp	r1, #0
 8002f62:	bfba      	itte	lt
 8002f64:	4249      	neglt	r1, r1
 8002f66:	232d      	movlt	r3, #45	@ 0x2d
 8002f68:	232b      	movge	r3, #43	@ 0x2b
 8002f6a:	2909      	cmp	r1, #9
 8002f6c:	7002      	strb	r2, [r0, #0]
 8002f6e:	7043      	strb	r3, [r0, #1]
 8002f70:	dd29      	ble.n	8002fc6 <__exponent+0x68>
 8002f72:	f10d 0307 	add.w	r3, sp, #7
 8002f76:	461d      	mov	r5, r3
 8002f78:	270a      	movs	r7, #10
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	fbb1 f6f7 	udiv	r6, r1, r7
 8002f80:	fb07 1416 	mls	r4, r7, r6, r1
 8002f84:	3430      	adds	r4, #48	@ 0x30
 8002f86:	f802 4c01 	strb.w	r4, [r2, #-1]
 8002f8a:	460c      	mov	r4, r1
 8002f8c:	2c63      	cmp	r4, #99	@ 0x63
 8002f8e:	f103 33ff 	add.w	r3, r3, #4294967295
 8002f92:	4631      	mov	r1, r6
 8002f94:	dcf1      	bgt.n	8002f7a <__exponent+0x1c>
 8002f96:	3130      	adds	r1, #48	@ 0x30
 8002f98:	1e94      	subs	r4, r2, #2
 8002f9a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002f9e:	1c41      	adds	r1, r0, #1
 8002fa0:	4623      	mov	r3, r4
 8002fa2:	42ab      	cmp	r3, r5
 8002fa4:	d30a      	bcc.n	8002fbc <__exponent+0x5e>
 8002fa6:	f10d 0309 	add.w	r3, sp, #9
 8002faa:	1a9b      	subs	r3, r3, r2
 8002fac:	42ac      	cmp	r4, r5
 8002fae:	bf88      	it	hi
 8002fb0:	2300      	movhi	r3, #0
 8002fb2:	3302      	adds	r3, #2
 8002fb4:	4403      	add	r3, r0
 8002fb6:	1a18      	subs	r0, r3, r0
 8002fb8:	b003      	add	sp, #12
 8002fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fbc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8002fc0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8002fc4:	e7ed      	b.n	8002fa2 <__exponent+0x44>
 8002fc6:	2330      	movs	r3, #48	@ 0x30
 8002fc8:	3130      	adds	r1, #48	@ 0x30
 8002fca:	7083      	strb	r3, [r0, #2]
 8002fcc:	70c1      	strb	r1, [r0, #3]
 8002fce:	1d03      	adds	r3, r0, #4
 8002fd0:	e7f1      	b.n	8002fb6 <__exponent+0x58>
	...

08002fd4 <_printf_float>:
 8002fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fd8:	b08d      	sub	sp, #52	@ 0x34
 8002fda:	460c      	mov	r4, r1
 8002fdc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8002fe0:	4616      	mov	r6, r2
 8002fe2:	461f      	mov	r7, r3
 8002fe4:	4605      	mov	r5, r0
 8002fe6:	f000 fcef 	bl	80039c8 <_localeconv_r>
 8002fea:	6803      	ldr	r3, [r0, #0]
 8002fec:	9304      	str	r3, [sp, #16]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7fd f946 	bl	8000280 <strlen>
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	930a      	str	r3, [sp, #40]	@ 0x28
 8002ff8:	f8d8 3000 	ldr.w	r3, [r8]
 8002ffc:	9005      	str	r0, [sp, #20]
 8002ffe:	3307      	adds	r3, #7
 8003000:	f023 0307 	bic.w	r3, r3, #7
 8003004:	f103 0208 	add.w	r2, r3, #8
 8003008:	f894 a018 	ldrb.w	sl, [r4, #24]
 800300c:	f8d4 b000 	ldr.w	fp, [r4]
 8003010:	f8c8 2000 	str.w	r2, [r8]
 8003014:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003018:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800301c:	9307      	str	r3, [sp, #28]
 800301e:	f8cd 8018 	str.w	r8, [sp, #24]
 8003022:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003026:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800302a:	4b9c      	ldr	r3, [pc, #624]	@ (800329c <_printf_float+0x2c8>)
 800302c:	f04f 32ff 	mov.w	r2, #4294967295
 8003030:	f7fd fd84 	bl	8000b3c <__aeabi_dcmpun>
 8003034:	bb70      	cbnz	r0, 8003094 <_printf_float+0xc0>
 8003036:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800303a:	4b98      	ldr	r3, [pc, #608]	@ (800329c <_printf_float+0x2c8>)
 800303c:	f04f 32ff 	mov.w	r2, #4294967295
 8003040:	f7fd fd5e 	bl	8000b00 <__aeabi_dcmple>
 8003044:	bb30      	cbnz	r0, 8003094 <_printf_float+0xc0>
 8003046:	2200      	movs	r2, #0
 8003048:	2300      	movs	r3, #0
 800304a:	4640      	mov	r0, r8
 800304c:	4649      	mov	r1, r9
 800304e:	f7fd fd4d 	bl	8000aec <__aeabi_dcmplt>
 8003052:	b110      	cbz	r0, 800305a <_printf_float+0x86>
 8003054:	232d      	movs	r3, #45	@ 0x2d
 8003056:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800305a:	4a91      	ldr	r2, [pc, #580]	@ (80032a0 <_printf_float+0x2cc>)
 800305c:	4b91      	ldr	r3, [pc, #580]	@ (80032a4 <_printf_float+0x2d0>)
 800305e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003062:	bf94      	ite	ls
 8003064:	4690      	movls	r8, r2
 8003066:	4698      	movhi	r8, r3
 8003068:	2303      	movs	r3, #3
 800306a:	6123      	str	r3, [r4, #16]
 800306c:	f02b 0304 	bic.w	r3, fp, #4
 8003070:	6023      	str	r3, [r4, #0]
 8003072:	f04f 0900 	mov.w	r9, #0
 8003076:	9700      	str	r7, [sp, #0]
 8003078:	4633      	mov	r3, r6
 800307a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800307c:	4621      	mov	r1, r4
 800307e:	4628      	mov	r0, r5
 8003080:	f000 f9d2 	bl	8003428 <_printf_common>
 8003084:	3001      	adds	r0, #1
 8003086:	f040 808d 	bne.w	80031a4 <_printf_float+0x1d0>
 800308a:	f04f 30ff 	mov.w	r0, #4294967295
 800308e:	b00d      	add	sp, #52	@ 0x34
 8003090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003094:	4642      	mov	r2, r8
 8003096:	464b      	mov	r3, r9
 8003098:	4640      	mov	r0, r8
 800309a:	4649      	mov	r1, r9
 800309c:	f7fd fd4e 	bl	8000b3c <__aeabi_dcmpun>
 80030a0:	b140      	cbz	r0, 80030b4 <_printf_float+0xe0>
 80030a2:	464b      	mov	r3, r9
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	bfbc      	itt	lt
 80030a8:	232d      	movlt	r3, #45	@ 0x2d
 80030aa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80030ae:	4a7e      	ldr	r2, [pc, #504]	@ (80032a8 <_printf_float+0x2d4>)
 80030b0:	4b7e      	ldr	r3, [pc, #504]	@ (80032ac <_printf_float+0x2d8>)
 80030b2:	e7d4      	b.n	800305e <_printf_float+0x8a>
 80030b4:	6863      	ldr	r3, [r4, #4]
 80030b6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80030ba:	9206      	str	r2, [sp, #24]
 80030bc:	1c5a      	adds	r2, r3, #1
 80030be:	d13b      	bne.n	8003138 <_printf_float+0x164>
 80030c0:	2306      	movs	r3, #6
 80030c2:	6063      	str	r3, [r4, #4]
 80030c4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80030c8:	2300      	movs	r3, #0
 80030ca:	6022      	str	r2, [r4, #0]
 80030cc:	9303      	str	r3, [sp, #12]
 80030ce:	ab0a      	add	r3, sp, #40	@ 0x28
 80030d0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80030d4:	ab09      	add	r3, sp, #36	@ 0x24
 80030d6:	9300      	str	r3, [sp, #0]
 80030d8:	6861      	ldr	r1, [r4, #4]
 80030da:	ec49 8b10 	vmov	d0, r8, r9
 80030de:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80030e2:	4628      	mov	r0, r5
 80030e4:	f7ff fed6 	bl	8002e94 <__cvt>
 80030e8:	9b06      	ldr	r3, [sp, #24]
 80030ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80030ec:	2b47      	cmp	r3, #71	@ 0x47
 80030ee:	4680      	mov	r8, r0
 80030f0:	d129      	bne.n	8003146 <_printf_float+0x172>
 80030f2:	1cc8      	adds	r0, r1, #3
 80030f4:	db02      	blt.n	80030fc <_printf_float+0x128>
 80030f6:	6863      	ldr	r3, [r4, #4]
 80030f8:	4299      	cmp	r1, r3
 80030fa:	dd41      	ble.n	8003180 <_printf_float+0x1ac>
 80030fc:	f1aa 0a02 	sub.w	sl, sl, #2
 8003100:	fa5f fa8a 	uxtb.w	sl, sl
 8003104:	3901      	subs	r1, #1
 8003106:	4652      	mov	r2, sl
 8003108:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800310c:	9109      	str	r1, [sp, #36]	@ 0x24
 800310e:	f7ff ff26 	bl	8002f5e <__exponent>
 8003112:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003114:	1813      	adds	r3, r2, r0
 8003116:	2a01      	cmp	r2, #1
 8003118:	4681      	mov	r9, r0
 800311a:	6123      	str	r3, [r4, #16]
 800311c:	dc02      	bgt.n	8003124 <_printf_float+0x150>
 800311e:	6822      	ldr	r2, [r4, #0]
 8003120:	07d2      	lsls	r2, r2, #31
 8003122:	d501      	bpl.n	8003128 <_printf_float+0x154>
 8003124:	3301      	adds	r3, #1
 8003126:	6123      	str	r3, [r4, #16]
 8003128:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800312c:	2b00      	cmp	r3, #0
 800312e:	d0a2      	beq.n	8003076 <_printf_float+0xa2>
 8003130:	232d      	movs	r3, #45	@ 0x2d
 8003132:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003136:	e79e      	b.n	8003076 <_printf_float+0xa2>
 8003138:	9a06      	ldr	r2, [sp, #24]
 800313a:	2a47      	cmp	r2, #71	@ 0x47
 800313c:	d1c2      	bne.n	80030c4 <_printf_float+0xf0>
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1c0      	bne.n	80030c4 <_printf_float+0xf0>
 8003142:	2301      	movs	r3, #1
 8003144:	e7bd      	b.n	80030c2 <_printf_float+0xee>
 8003146:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800314a:	d9db      	bls.n	8003104 <_printf_float+0x130>
 800314c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003150:	d118      	bne.n	8003184 <_printf_float+0x1b0>
 8003152:	2900      	cmp	r1, #0
 8003154:	6863      	ldr	r3, [r4, #4]
 8003156:	dd0b      	ble.n	8003170 <_printf_float+0x19c>
 8003158:	6121      	str	r1, [r4, #16]
 800315a:	b913      	cbnz	r3, 8003162 <_printf_float+0x18e>
 800315c:	6822      	ldr	r2, [r4, #0]
 800315e:	07d0      	lsls	r0, r2, #31
 8003160:	d502      	bpl.n	8003168 <_printf_float+0x194>
 8003162:	3301      	adds	r3, #1
 8003164:	440b      	add	r3, r1
 8003166:	6123      	str	r3, [r4, #16]
 8003168:	65a1      	str	r1, [r4, #88]	@ 0x58
 800316a:	f04f 0900 	mov.w	r9, #0
 800316e:	e7db      	b.n	8003128 <_printf_float+0x154>
 8003170:	b913      	cbnz	r3, 8003178 <_printf_float+0x1a4>
 8003172:	6822      	ldr	r2, [r4, #0]
 8003174:	07d2      	lsls	r2, r2, #31
 8003176:	d501      	bpl.n	800317c <_printf_float+0x1a8>
 8003178:	3302      	adds	r3, #2
 800317a:	e7f4      	b.n	8003166 <_printf_float+0x192>
 800317c:	2301      	movs	r3, #1
 800317e:	e7f2      	b.n	8003166 <_printf_float+0x192>
 8003180:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003184:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003186:	4299      	cmp	r1, r3
 8003188:	db05      	blt.n	8003196 <_printf_float+0x1c2>
 800318a:	6823      	ldr	r3, [r4, #0]
 800318c:	6121      	str	r1, [r4, #16]
 800318e:	07d8      	lsls	r0, r3, #31
 8003190:	d5ea      	bpl.n	8003168 <_printf_float+0x194>
 8003192:	1c4b      	adds	r3, r1, #1
 8003194:	e7e7      	b.n	8003166 <_printf_float+0x192>
 8003196:	2900      	cmp	r1, #0
 8003198:	bfd4      	ite	le
 800319a:	f1c1 0202 	rsble	r2, r1, #2
 800319e:	2201      	movgt	r2, #1
 80031a0:	4413      	add	r3, r2
 80031a2:	e7e0      	b.n	8003166 <_printf_float+0x192>
 80031a4:	6823      	ldr	r3, [r4, #0]
 80031a6:	055a      	lsls	r2, r3, #21
 80031a8:	d407      	bmi.n	80031ba <_printf_float+0x1e6>
 80031aa:	6923      	ldr	r3, [r4, #16]
 80031ac:	4642      	mov	r2, r8
 80031ae:	4631      	mov	r1, r6
 80031b0:	4628      	mov	r0, r5
 80031b2:	47b8      	blx	r7
 80031b4:	3001      	adds	r0, #1
 80031b6:	d12b      	bne.n	8003210 <_printf_float+0x23c>
 80031b8:	e767      	b.n	800308a <_printf_float+0xb6>
 80031ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80031be:	f240 80dd 	bls.w	800337c <_printf_float+0x3a8>
 80031c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80031c6:	2200      	movs	r2, #0
 80031c8:	2300      	movs	r3, #0
 80031ca:	f7fd fc85 	bl	8000ad8 <__aeabi_dcmpeq>
 80031ce:	2800      	cmp	r0, #0
 80031d0:	d033      	beq.n	800323a <_printf_float+0x266>
 80031d2:	4a37      	ldr	r2, [pc, #220]	@ (80032b0 <_printf_float+0x2dc>)
 80031d4:	2301      	movs	r3, #1
 80031d6:	4631      	mov	r1, r6
 80031d8:	4628      	mov	r0, r5
 80031da:	47b8      	blx	r7
 80031dc:	3001      	adds	r0, #1
 80031de:	f43f af54 	beq.w	800308a <_printf_float+0xb6>
 80031e2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80031e6:	4543      	cmp	r3, r8
 80031e8:	db02      	blt.n	80031f0 <_printf_float+0x21c>
 80031ea:	6823      	ldr	r3, [r4, #0]
 80031ec:	07d8      	lsls	r0, r3, #31
 80031ee:	d50f      	bpl.n	8003210 <_printf_float+0x23c>
 80031f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80031f4:	4631      	mov	r1, r6
 80031f6:	4628      	mov	r0, r5
 80031f8:	47b8      	blx	r7
 80031fa:	3001      	adds	r0, #1
 80031fc:	f43f af45 	beq.w	800308a <_printf_float+0xb6>
 8003200:	f04f 0900 	mov.w	r9, #0
 8003204:	f108 38ff 	add.w	r8, r8, #4294967295
 8003208:	f104 0a1a 	add.w	sl, r4, #26
 800320c:	45c8      	cmp	r8, r9
 800320e:	dc09      	bgt.n	8003224 <_printf_float+0x250>
 8003210:	6823      	ldr	r3, [r4, #0]
 8003212:	079b      	lsls	r3, r3, #30
 8003214:	f100 8103 	bmi.w	800341e <_printf_float+0x44a>
 8003218:	68e0      	ldr	r0, [r4, #12]
 800321a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800321c:	4298      	cmp	r0, r3
 800321e:	bfb8      	it	lt
 8003220:	4618      	movlt	r0, r3
 8003222:	e734      	b.n	800308e <_printf_float+0xba>
 8003224:	2301      	movs	r3, #1
 8003226:	4652      	mov	r2, sl
 8003228:	4631      	mov	r1, r6
 800322a:	4628      	mov	r0, r5
 800322c:	47b8      	blx	r7
 800322e:	3001      	adds	r0, #1
 8003230:	f43f af2b 	beq.w	800308a <_printf_float+0xb6>
 8003234:	f109 0901 	add.w	r9, r9, #1
 8003238:	e7e8      	b.n	800320c <_printf_float+0x238>
 800323a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800323c:	2b00      	cmp	r3, #0
 800323e:	dc39      	bgt.n	80032b4 <_printf_float+0x2e0>
 8003240:	4a1b      	ldr	r2, [pc, #108]	@ (80032b0 <_printf_float+0x2dc>)
 8003242:	2301      	movs	r3, #1
 8003244:	4631      	mov	r1, r6
 8003246:	4628      	mov	r0, r5
 8003248:	47b8      	blx	r7
 800324a:	3001      	adds	r0, #1
 800324c:	f43f af1d 	beq.w	800308a <_printf_float+0xb6>
 8003250:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003254:	ea59 0303 	orrs.w	r3, r9, r3
 8003258:	d102      	bne.n	8003260 <_printf_float+0x28c>
 800325a:	6823      	ldr	r3, [r4, #0]
 800325c:	07d9      	lsls	r1, r3, #31
 800325e:	d5d7      	bpl.n	8003210 <_printf_float+0x23c>
 8003260:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003264:	4631      	mov	r1, r6
 8003266:	4628      	mov	r0, r5
 8003268:	47b8      	blx	r7
 800326a:	3001      	adds	r0, #1
 800326c:	f43f af0d 	beq.w	800308a <_printf_float+0xb6>
 8003270:	f04f 0a00 	mov.w	sl, #0
 8003274:	f104 0b1a 	add.w	fp, r4, #26
 8003278:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800327a:	425b      	negs	r3, r3
 800327c:	4553      	cmp	r3, sl
 800327e:	dc01      	bgt.n	8003284 <_printf_float+0x2b0>
 8003280:	464b      	mov	r3, r9
 8003282:	e793      	b.n	80031ac <_printf_float+0x1d8>
 8003284:	2301      	movs	r3, #1
 8003286:	465a      	mov	r2, fp
 8003288:	4631      	mov	r1, r6
 800328a:	4628      	mov	r0, r5
 800328c:	47b8      	blx	r7
 800328e:	3001      	adds	r0, #1
 8003290:	f43f aefb 	beq.w	800308a <_printf_float+0xb6>
 8003294:	f10a 0a01 	add.w	sl, sl, #1
 8003298:	e7ee      	b.n	8003278 <_printf_float+0x2a4>
 800329a:	bf00      	nop
 800329c:	7fefffff 	.word	0x7fefffff
 80032a0:	080066cc 	.word	0x080066cc
 80032a4:	080066d0 	.word	0x080066d0
 80032a8:	080066d4 	.word	0x080066d4
 80032ac:	080066d8 	.word	0x080066d8
 80032b0:	080066dc 	.word	0x080066dc
 80032b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80032b6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80032ba:	4553      	cmp	r3, sl
 80032bc:	bfa8      	it	ge
 80032be:	4653      	movge	r3, sl
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	4699      	mov	r9, r3
 80032c4:	dc36      	bgt.n	8003334 <_printf_float+0x360>
 80032c6:	f04f 0b00 	mov.w	fp, #0
 80032ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80032ce:	f104 021a 	add.w	r2, r4, #26
 80032d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80032d4:	9306      	str	r3, [sp, #24]
 80032d6:	eba3 0309 	sub.w	r3, r3, r9
 80032da:	455b      	cmp	r3, fp
 80032dc:	dc31      	bgt.n	8003342 <_printf_float+0x36e>
 80032de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80032e0:	459a      	cmp	sl, r3
 80032e2:	dc3a      	bgt.n	800335a <_printf_float+0x386>
 80032e4:	6823      	ldr	r3, [r4, #0]
 80032e6:	07da      	lsls	r2, r3, #31
 80032e8:	d437      	bmi.n	800335a <_printf_float+0x386>
 80032ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80032ec:	ebaa 0903 	sub.w	r9, sl, r3
 80032f0:	9b06      	ldr	r3, [sp, #24]
 80032f2:	ebaa 0303 	sub.w	r3, sl, r3
 80032f6:	4599      	cmp	r9, r3
 80032f8:	bfa8      	it	ge
 80032fa:	4699      	movge	r9, r3
 80032fc:	f1b9 0f00 	cmp.w	r9, #0
 8003300:	dc33      	bgt.n	800336a <_printf_float+0x396>
 8003302:	f04f 0800 	mov.w	r8, #0
 8003306:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800330a:	f104 0b1a 	add.w	fp, r4, #26
 800330e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003310:	ebaa 0303 	sub.w	r3, sl, r3
 8003314:	eba3 0309 	sub.w	r3, r3, r9
 8003318:	4543      	cmp	r3, r8
 800331a:	f77f af79 	ble.w	8003210 <_printf_float+0x23c>
 800331e:	2301      	movs	r3, #1
 8003320:	465a      	mov	r2, fp
 8003322:	4631      	mov	r1, r6
 8003324:	4628      	mov	r0, r5
 8003326:	47b8      	blx	r7
 8003328:	3001      	adds	r0, #1
 800332a:	f43f aeae 	beq.w	800308a <_printf_float+0xb6>
 800332e:	f108 0801 	add.w	r8, r8, #1
 8003332:	e7ec      	b.n	800330e <_printf_float+0x33a>
 8003334:	4642      	mov	r2, r8
 8003336:	4631      	mov	r1, r6
 8003338:	4628      	mov	r0, r5
 800333a:	47b8      	blx	r7
 800333c:	3001      	adds	r0, #1
 800333e:	d1c2      	bne.n	80032c6 <_printf_float+0x2f2>
 8003340:	e6a3      	b.n	800308a <_printf_float+0xb6>
 8003342:	2301      	movs	r3, #1
 8003344:	4631      	mov	r1, r6
 8003346:	4628      	mov	r0, r5
 8003348:	9206      	str	r2, [sp, #24]
 800334a:	47b8      	blx	r7
 800334c:	3001      	adds	r0, #1
 800334e:	f43f ae9c 	beq.w	800308a <_printf_float+0xb6>
 8003352:	9a06      	ldr	r2, [sp, #24]
 8003354:	f10b 0b01 	add.w	fp, fp, #1
 8003358:	e7bb      	b.n	80032d2 <_printf_float+0x2fe>
 800335a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800335e:	4631      	mov	r1, r6
 8003360:	4628      	mov	r0, r5
 8003362:	47b8      	blx	r7
 8003364:	3001      	adds	r0, #1
 8003366:	d1c0      	bne.n	80032ea <_printf_float+0x316>
 8003368:	e68f      	b.n	800308a <_printf_float+0xb6>
 800336a:	9a06      	ldr	r2, [sp, #24]
 800336c:	464b      	mov	r3, r9
 800336e:	4442      	add	r2, r8
 8003370:	4631      	mov	r1, r6
 8003372:	4628      	mov	r0, r5
 8003374:	47b8      	blx	r7
 8003376:	3001      	adds	r0, #1
 8003378:	d1c3      	bne.n	8003302 <_printf_float+0x32e>
 800337a:	e686      	b.n	800308a <_printf_float+0xb6>
 800337c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003380:	f1ba 0f01 	cmp.w	sl, #1
 8003384:	dc01      	bgt.n	800338a <_printf_float+0x3b6>
 8003386:	07db      	lsls	r3, r3, #31
 8003388:	d536      	bpl.n	80033f8 <_printf_float+0x424>
 800338a:	2301      	movs	r3, #1
 800338c:	4642      	mov	r2, r8
 800338e:	4631      	mov	r1, r6
 8003390:	4628      	mov	r0, r5
 8003392:	47b8      	blx	r7
 8003394:	3001      	adds	r0, #1
 8003396:	f43f ae78 	beq.w	800308a <_printf_float+0xb6>
 800339a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800339e:	4631      	mov	r1, r6
 80033a0:	4628      	mov	r0, r5
 80033a2:	47b8      	blx	r7
 80033a4:	3001      	adds	r0, #1
 80033a6:	f43f ae70 	beq.w	800308a <_printf_float+0xb6>
 80033aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80033ae:	2200      	movs	r2, #0
 80033b0:	2300      	movs	r3, #0
 80033b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80033b6:	f7fd fb8f 	bl	8000ad8 <__aeabi_dcmpeq>
 80033ba:	b9c0      	cbnz	r0, 80033ee <_printf_float+0x41a>
 80033bc:	4653      	mov	r3, sl
 80033be:	f108 0201 	add.w	r2, r8, #1
 80033c2:	4631      	mov	r1, r6
 80033c4:	4628      	mov	r0, r5
 80033c6:	47b8      	blx	r7
 80033c8:	3001      	adds	r0, #1
 80033ca:	d10c      	bne.n	80033e6 <_printf_float+0x412>
 80033cc:	e65d      	b.n	800308a <_printf_float+0xb6>
 80033ce:	2301      	movs	r3, #1
 80033d0:	465a      	mov	r2, fp
 80033d2:	4631      	mov	r1, r6
 80033d4:	4628      	mov	r0, r5
 80033d6:	47b8      	blx	r7
 80033d8:	3001      	adds	r0, #1
 80033da:	f43f ae56 	beq.w	800308a <_printf_float+0xb6>
 80033de:	f108 0801 	add.w	r8, r8, #1
 80033e2:	45d0      	cmp	r8, sl
 80033e4:	dbf3      	blt.n	80033ce <_printf_float+0x3fa>
 80033e6:	464b      	mov	r3, r9
 80033e8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80033ec:	e6df      	b.n	80031ae <_printf_float+0x1da>
 80033ee:	f04f 0800 	mov.w	r8, #0
 80033f2:	f104 0b1a 	add.w	fp, r4, #26
 80033f6:	e7f4      	b.n	80033e2 <_printf_float+0x40e>
 80033f8:	2301      	movs	r3, #1
 80033fa:	4642      	mov	r2, r8
 80033fc:	e7e1      	b.n	80033c2 <_printf_float+0x3ee>
 80033fe:	2301      	movs	r3, #1
 8003400:	464a      	mov	r2, r9
 8003402:	4631      	mov	r1, r6
 8003404:	4628      	mov	r0, r5
 8003406:	47b8      	blx	r7
 8003408:	3001      	adds	r0, #1
 800340a:	f43f ae3e 	beq.w	800308a <_printf_float+0xb6>
 800340e:	f108 0801 	add.w	r8, r8, #1
 8003412:	68e3      	ldr	r3, [r4, #12]
 8003414:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003416:	1a5b      	subs	r3, r3, r1
 8003418:	4543      	cmp	r3, r8
 800341a:	dcf0      	bgt.n	80033fe <_printf_float+0x42a>
 800341c:	e6fc      	b.n	8003218 <_printf_float+0x244>
 800341e:	f04f 0800 	mov.w	r8, #0
 8003422:	f104 0919 	add.w	r9, r4, #25
 8003426:	e7f4      	b.n	8003412 <_printf_float+0x43e>

08003428 <_printf_common>:
 8003428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800342c:	4616      	mov	r6, r2
 800342e:	4698      	mov	r8, r3
 8003430:	688a      	ldr	r2, [r1, #8]
 8003432:	690b      	ldr	r3, [r1, #16]
 8003434:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003438:	4293      	cmp	r3, r2
 800343a:	bfb8      	it	lt
 800343c:	4613      	movlt	r3, r2
 800343e:	6033      	str	r3, [r6, #0]
 8003440:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003444:	4607      	mov	r7, r0
 8003446:	460c      	mov	r4, r1
 8003448:	b10a      	cbz	r2, 800344e <_printf_common+0x26>
 800344a:	3301      	adds	r3, #1
 800344c:	6033      	str	r3, [r6, #0]
 800344e:	6823      	ldr	r3, [r4, #0]
 8003450:	0699      	lsls	r1, r3, #26
 8003452:	bf42      	ittt	mi
 8003454:	6833      	ldrmi	r3, [r6, #0]
 8003456:	3302      	addmi	r3, #2
 8003458:	6033      	strmi	r3, [r6, #0]
 800345a:	6825      	ldr	r5, [r4, #0]
 800345c:	f015 0506 	ands.w	r5, r5, #6
 8003460:	d106      	bne.n	8003470 <_printf_common+0x48>
 8003462:	f104 0a19 	add.w	sl, r4, #25
 8003466:	68e3      	ldr	r3, [r4, #12]
 8003468:	6832      	ldr	r2, [r6, #0]
 800346a:	1a9b      	subs	r3, r3, r2
 800346c:	42ab      	cmp	r3, r5
 800346e:	dc26      	bgt.n	80034be <_printf_common+0x96>
 8003470:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003474:	6822      	ldr	r2, [r4, #0]
 8003476:	3b00      	subs	r3, #0
 8003478:	bf18      	it	ne
 800347a:	2301      	movne	r3, #1
 800347c:	0692      	lsls	r2, r2, #26
 800347e:	d42b      	bmi.n	80034d8 <_printf_common+0xb0>
 8003480:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003484:	4641      	mov	r1, r8
 8003486:	4638      	mov	r0, r7
 8003488:	47c8      	blx	r9
 800348a:	3001      	adds	r0, #1
 800348c:	d01e      	beq.n	80034cc <_printf_common+0xa4>
 800348e:	6823      	ldr	r3, [r4, #0]
 8003490:	6922      	ldr	r2, [r4, #16]
 8003492:	f003 0306 	and.w	r3, r3, #6
 8003496:	2b04      	cmp	r3, #4
 8003498:	bf02      	ittt	eq
 800349a:	68e5      	ldreq	r5, [r4, #12]
 800349c:	6833      	ldreq	r3, [r6, #0]
 800349e:	1aed      	subeq	r5, r5, r3
 80034a0:	68a3      	ldr	r3, [r4, #8]
 80034a2:	bf0c      	ite	eq
 80034a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034a8:	2500      	movne	r5, #0
 80034aa:	4293      	cmp	r3, r2
 80034ac:	bfc4      	itt	gt
 80034ae:	1a9b      	subgt	r3, r3, r2
 80034b0:	18ed      	addgt	r5, r5, r3
 80034b2:	2600      	movs	r6, #0
 80034b4:	341a      	adds	r4, #26
 80034b6:	42b5      	cmp	r5, r6
 80034b8:	d11a      	bne.n	80034f0 <_printf_common+0xc8>
 80034ba:	2000      	movs	r0, #0
 80034bc:	e008      	b.n	80034d0 <_printf_common+0xa8>
 80034be:	2301      	movs	r3, #1
 80034c0:	4652      	mov	r2, sl
 80034c2:	4641      	mov	r1, r8
 80034c4:	4638      	mov	r0, r7
 80034c6:	47c8      	blx	r9
 80034c8:	3001      	adds	r0, #1
 80034ca:	d103      	bne.n	80034d4 <_printf_common+0xac>
 80034cc:	f04f 30ff 	mov.w	r0, #4294967295
 80034d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034d4:	3501      	adds	r5, #1
 80034d6:	e7c6      	b.n	8003466 <_printf_common+0x3e>
 80034d8:	18e1      	adds	r1, r4, r3
 80034da:	1c5a      	adds	r2, r3, #1
 80034dc:	2030      	movs	r0, #48	@ 0x30
 80034de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80034e2:	4422      	add	r2, r4
 80034e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80034e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80034ec:	3302      	adds	r3, #2
 80034ee:	e7c7      	b.n	8003480 <_printf_common+0x58>
 80034f0:	2301      	movs	r3, #1
 80034f2:	4622      	mov	r2, r4
 80034f4:	4641      	mov	r1, r8
 80034f6:	4638      	mov	r0, r7
 80034f8:	47c8      	blx	r9
 80034fa:	3001      	adds	r0, #1
 80034fc:	d0e6      	beq.n	80034cc <_printf_common+0xa4>
 80034fe:	3601      	adds	r6, #1
 8003500:	e7d9      	b.n	80034b6 <_printf_common+0x8e>
	...

08003504 <_printf_i>:
 8003504:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003508:	7e0f      	ldrb	r7, [r1, #24]
 800350a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800350c:	2f78      	cmp	r7, #120	@ 0x78
 800350e:	4691      	mov	r9, r2
 8003510:	4680      	mov	r8, r0
 8003512:	460c      	mov	r4, r1
 8003514:	469a      	mov	sl, r3
 8003516:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800351a:	d807      	bhi.n	800352c <_printf_i+0x28>
 800351c:	2f62      	cmp	r7, #98	@ 0x62
 800351e:	d80a      	bhi.n	8003536 <_printf_i+0x32>
 8003520:	2f00      	cmp	r7, #0
 8003522:	f000 80d2 	beq.w	80036ca <_printf_i+0x1c6>
 8003526:	2f58      	cmp	r7, #88	@ 0x58
 8003528:	f000 80b9 	beq.w	800369e <_printf_i+0x19a>
 800352c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003530:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003534:	e03a      	b.n	80035ac <_printf_i+0xa8>
 8003536:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800353a:	2b15      	cmp	r3, #21
 800353c:	d8f6      	bhi.n	800352c <_printf_i+0x28>
 800353e:	a101      	add	r1, pc, #4	@ (adr r1, 8003544 <_printf_i+0x40>)
 8003540:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003544:	0800359d 	.word	0x0800359d
 8003548:	080035b1 	.word	0x080035b1
 800354c:	0800352d 	.word	0x0800352d
 8003550:	0800352d 	.word	0x0800352d
 8003554:	0800352d 	.word	0x0800352d
 8003558:	0800352d 	.word	0x0800352d
 800355c:	080035b1 	.word	0x080035b1
 8003560:	0800352d 	.word	0x0800352d
 8003564:	0800352d 	.word	0x0800352d
 8003568:	0800352d 	.word	0x0800352d
 800356c:	0800352d 	.word	0x0800352d
 8003570:	080036b1 	.word	0x080036b1
 8003574:	080035db 	.word	0x080035db
 8003578:	0800366b 	.word	0x0800366b
 800357c:	0800352d 	.word	0x0800352d
 8003580:	0800352d 	.word	0x0800352d
 8003584:	080036d3 	.word	0x080036d3
 8003588:	0800352d 	.word	0x0800352d
 800358c:	080035db 	.word	0x080035db
 8003590:	0800352d 	.word	0x0800352d
 8003594:	0800352d 	.word	0x0800352d
 8003598:	08003673 	.word	0x08003673
 800359c:	6833      	ldr	r3, [r6, #0]
 800359e:	1d1a      	adds	r2, r3, #4
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	6032      	str	r2, [r6, #0]
 80035a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80035a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80035ac:	2301      	movs	r3, #1
 80035ae:	e09d      	b.n	80036ec <_printf_i+0x1e8>
 80035b0:	6833      	ldr	r3, [r6, #0]
 80035b2:	6820      	ldr	r0, [r4, #0]
 80035b4:	1d19      	adds	r1, r3, #4
 80035b6:	6031      	str	r1, [r6, #0]
 80035b8:	0606      	lsls	r6, r0, #24
 80035ba:	d501      	bpl.n	80035c0 <_printf_i+0xbc>
 80035bc:	681d      	ldr	r5, [r3, #0]
 80035be:	e003      	b.n	80035c8 <_printf_i+0xc4>
 80035c0:	0645      	lsls	r5, r0, #25
 80035c2:	d5fb      	bpl.n	80035bc <_printf_i+0xb8>
 80035c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80035c8:	2d00      	cmp	r5, #0
 80035ca:	da03      	bge.n	80035d4 <_printf_i+0xd0>
 80035cc:	232d      	movs	r3, #45	@ 0x2d
 80035ce:	426d      	negs	r5, r5
 80035d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80035d4:	4859      	ldr	r0, [pc, #356]	@ (800373c <_printf_i+0x238>)
 80035d6:	230a      	movs	r3, #10
 80035d8:	e011      	b.n	80035fe <_printf_i+0xfa>
 80035da:	6821      	ldr	r1, [r4, #0]
 80035dc:	6833      	ldr	r3, [r6, #0]
 80035de:	0608      	lsls	r0, r1, #24
 80035e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80035e4:	d402      	bmi.n	80035ec <_printf_i+0xe8>
 80035e6:	0649      	lsls	r1, r1, #25
 80035e8:	bf48      	it	mi
 80035ea:	b2ad      	uxthmi	r5, r5
 80035ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80035ee:	4853      	ldr	r0, [pc, #332]	@ (800373c <_printf_i+0x238>)
 80035f0:	6033      	str	r3, [r6, #0]
 80035f2:	bf14      	ite	ne
 80035f4:	230a      	movne	r3, #10
 80035f6:	2308      	moveq	r3, #8
 80035f8:	2100      	movs	r1, #0
 80035fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80035fe:	6866      	ldr	r6, [r4, #4]
 8003600:	60a6      	str	r6, [r4, #8]
 8003602:	2e00      	cmp	r6, #0
 8003604:	bfa2      	ittt	ge
 8003606:	6821      	ldrge	r1, [r4, #0]
 8003608:	f021 0104 	bicge.w	r1, r1, #4
 800360c:	6021      	strge	r1, [r4, #0]
 800360e:	b90d      	cbnz	r5, 8003614 <_printf_i+0x110>
 8003610:	2e00      	cmp	r6, #0
 8003612:	d04b      	beq.n	80036ac <_printf_i+0x1a8>
 8003614:	4616      	mov	r6, r2
 8003616:	fbb5 f1f3 	udiv	r1, r5, r3
 800361a:	fb03 5711 	mls	r7, r3, r1, r5
 800361e:	5dc7      	ldrb	r7, [r0, r7]
 8003620:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003624:	462f      	mov	r7, r5
 8003626:	42bb      	cmp	r3, r7
 8003628:	460d      	mov	r5, r1
 800362a:	d9f4      	bls.n	8003616 <_printf_i+0x112>
 800362c:	2b08      	cmp	r3, #8
 800362e:	d10b      	bne.n	8003648 <_printf_i+0x144>
 8003630:	6823      	ldr	r3, [r4, #0]
 8003632:	07df      	lsls	r7, r3, #31
 8003634:	d508      	bpl.n	8003648 <_printf_i+0x144>
 8003636:	6923      	ldr	r3, [r4, #16]
 8003638:	6861      	ldr	r1, [r4, #4]
 800363a:	4299      	cmp	r1, r3
 800363c:	bfde      	ittt	le
 800363e:	2330      	movle	r3, #48	@ 0x30
 8003640:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003644:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003648:	1b92      	subs	r2, r2, r6
 800364a:	6122      	str	r2, [r4, #16]
 800364c:	f8cd a000 	str.w	sl, [sp]
 8003650:	464b      	mov	r3, r9
 8003652:	aa03      	add	r2, sp, #12
 8003654:	4621      	mov	r1, r4
 8003656:	4640      	mov	r0, r8
 8003658:	f7ff fee6 	bl	8003428 <_printf_common>
 800365c:	3001      	adds	r0, #1
 800365e:	d14a      	bne.n	80036f6 <_printf_i+0x1f2>
 8003660:	f04f 30ff 	mov.w	r0, #4294967295
 8003664:	b004      	add	sp, #16
 8003666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800366a:	6823      	ldr	r3, [r4, #0]
 800366c:	f043 0320 	orr.w	r3, r3, #32
 8003670:	6023      	str	r3, [r4, #0]
 8003672:	4833      	ldr	r0, [pc, #204]	@ (8003740 <_printf_i+0x23c>)
 8003674:	2778      	movs	r7, #120	@ 0x78
 8003676:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800367a:	6823      	ldr	r3, [r4, #0]
 800367c:	6831      	ldr	r1, [r6, #0]
 800367e:	061f      	lsls	r7, r3, #24
 8003680:	f851 5b04 	ldr.w	r5, [r1], #4
 8003684:	d402      	bmi.n	800368c <_printf_i+0x188>
 8003686:	065f      	lsls	r7, r3, #25
 8003688:	bf48      	it	mi
 800368a:	b2ad      	uxthmi	r5, r5
 800368c:	6031      	str	r1, [r6, #0]
 800368e:	07d9      	lsls	r1, r3, #31
 8003690:	bf44      	itt	mi
 8003692:	f043 0320 	orrmi.w	r3, r3, #32
 8003696:	6023      	strmi	r3, [r4, #0]
 8003698:	b11d      	cbz	r5, 80036a2 <_printf_i+0x19e>
 800369a:	2310      	movs	r3, #16
 800369c:	e7ac      	b.n	80035f8 <_printf_i+0xf4>
 800369e:	4827      	ldr	r0, [pc, #156]	@ (800373c <_printf_i+0x238>)
 80036a0:	e7e9      	b.n	8003676 <_printf_i+0x172>
 80036a2:	6823      	ldr	r3, [r4, #0]
 80036a4:	f023 0320 	bic.w	r3, r3, #32
 80036a8:	6023      	str	r3, [r4, #0]
 80036aa:	e7f6      	b.n	800369a <_printf_i+0x196>
 80036ac:	4616      	mov	r6, r2
 80036ae:	e7bd      	b.n	800362c <_printf_i+0x128>
 80036b0:	6833      	ldr	r3, [r6, #0]
 80036b2:	6825      	ldr	r5, [r4, #0]
 80036b4:	6961      	ldr	r1, [r4, #20]
 80036b6:	1d18      	adds	r0, r3, #4
 80036b8:	6030      	str	r0, [r6, #0]
 80036ba:	062e      	lsls	r6, r5, #24
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	d501      	bpl.n	80036c4 <_printf_i+0x1c0>
 80036c0:	6019      	str	r1, [r3, #0]
 80036c2:	e002      	b.n	80036ca <_printf_i+0x1c6>
 80036c4:	0668      	lsls	r0, r5, #25
 80036c6:	d5fb      	bpl.n	80036c0 <_printf_i+0x1bc>
 80036c8:	8019      	strh	r1, [r3, #0]
 80036ca:	2300      	movs	r3, #0
 80036cc:	6123      	str	r3, [r4, #16]
 80036ce:	4616      	mov	r6, r2
 80036d0:	e7bc      	b.n	800364c <_printf_i+0x148>
 80036d2:	6833      	ldr	r3, [r6, #0]
 80036d4:	1d1a      	adds	r2, r3, #4
 80036d6:	6032      	str	r2, [r6, #0]
 80036d8:	681e      	ldr	r6, [r3, #0]
 80036da:	6862      	ldr	r2, [r4, #4]
 80036dc:	2100      	movs	r1, #0
 80036de:	4630      	mov	r0, r6
 80036e0:	f7fc fd7e 	bl	80001e0 <memchr>
 80036e4:	b108      	cbz	r0, 80036ea <_printf_i+0x1e6>
 80036e6:	1b80      	subs	r0, r0, r6
 80036e8:	6060      	str	r0, [r4, #4]
 80036ea:	6863      	ldr	r3, [r4, #4]
 80036ec:	6123      	str	r3, [r4, #16]
 80036ee:	2300      	movs	r3, #0
 80036f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80036f4:	e7aa      	b.n	800364c <_printf_i+0x148>
 80036f6:	6923      	ldr	r3, [r4, #16]
 80036f8:	4632      	mov	r2, r6
 80036fa:	4649      	mov	r1, r9
 80036fc:	4640      	mov	r0, r8
 80036fe:	47d0      	blx	sl
 8003700:	3001      	adds	r0, #1
 8003702:	d0ad      	beq.n	8003660 <_printf_i+0x15c>
 8003704:	6823      	ldr	r3, [r4, #0]
 8003706:	079b      	lsls	r3, r3, #30
 8003708:	d413      	bmi.n	8003732 <_printf_i+0x22e>
 800370a:	68e0      	ldr	r0, [r4, #12]
 800370c:	9b03      	ldr	r3, [sp, #12]
 800370e:	4298      	cmp	r0, r3
 8003710:	bfb8      	it	lt
 8003712:	4618      	movlt	r0, r3
 8003714:	e7a6      	b.n	8003664 <_printf_i+0x160>
 8003716:	2301      	movs	r3, #1
 8003718:	4632      	mov	r2, r6
 800371a:	4649      	mov	r1, r9
 800371c:	4640      	mov	r0, r8
 800371e:	47d0      	blx	sl
 8003720:	3001      	adds	r0, #1
 8003722:	d09d      	beq.n	8003660 <_printf_i+0x15c>
 8003724:	3501      	adds	r5, #1
 8003726:	68e3      	ldr	r3, [r4, #12]
 8003728:	9903      	ldr	r1, [sp, #12]
 800372a:	1a5b      	subs	r3, r3, r1
 800372c:	42ab      	cmp	r3, r5
 800372e:	dcf2      	bgt.n	8003716 <_printf_i+0x212>
 8003730:	e7eb      	b.n	800370a <_printf_i+0x206>
 8003732:	2500      	movs	r5, #0
 8003734:	f104 0619 	add.w	r6, r4, #25
 8003738:	e7f5      	b.n	8003726 <_printf_i+0x222>
 800373a:	bf00      	nop
 800373c:	080066de 	.word	0x080066de
 8003740:	080066ef 	.word	0x080066ef

08003744 <std>:
 8003744:	2300      	movs	r3, #0
 8003746:	b510      	push	{r4, lr}
 8003748:	4604      	mov	r4, r0
 800374a:	e9c0 3300 	strd	r3, r3, [r0]
 800374e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003752:	6083      	str	r3, [r0, #8]
 8003754:	8181      	strh	r1, [r0, #12]
 8003756:	6643      	str	r3, [r0, #100]	@ 0x64
 8003758:	81c2      	strh	r2, [r0, #14]
 800375a:	6183      	str	r3, [r0, #24]
 800375c:	4619      	mov	r1, r3
 800375e:	2208      	movs	r2, #8
 8003760:	305c      	adds	r0, #92	@ 0x5c
 8003762:	f000 f928 	bl	80039b6 <memset>
 8003766:	4b0d      	ldr	r3, [pc, #52]	@ (800379c <std+0x58>)
 8003768:	6263      	str	r3, [r4, #36]	@ 0x24
 800376a:	4b0d      	ldr	r3, [pc, #52]	@ (80037a0 <std+0x5c>)
 800376c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800376e:	4b0d      	ldr	r3, [pc, #52]	@ (80037a4 <std+0x60>)
 8003770:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003772:	4b0d      	ldr	r3, [pc, #52]	@ (80037a8 <std+0x64>)
 8003774:	6323      	str	r3, [r4, #48]	@ 0x30
 8003776:	4b0d      	ldr	r3, [pc, #52]	@ (80037ac <std+0x68>)
 8003778:	6224      	str	r4, [r4, #32]
 800377a:	429c      	cmp	r4, r3
 800377c:	d006      	beq.n	800378c <std+0x48>
 800377e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003782:	4294      	cmp	r4, r2
 8003784:	d002      	beq.n	800378c <std+0x48>
 8003786:	33d0      	adds	r3, #208	@ 0xd0
 8003788:	429c      	cmp	r4, r3
 800378a:	d105      	bne.n	8003798 <std+0x54>
 800378c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003790:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003794:	f000 b98c 	b.w	8003ab0 <__retarget_lock_init_recursive>
 8003798:	bd10      	pop	{r4, pc}
 800379a:	bf00      	nop
 800379c:	08003931 	.word	0x08003931
 80037a0:	08003953 	.word	0x08003953
 80037a4:	0800398b 	.word	0x0800398b
 80037a8:	080039af 	.word	0x080039af
 80037ac:	20000210 	.word	0x20000210

080037b0 <stdio_exit_handler>:
 80037b0:	4a02      	ldr	r2, [pc, #8]	@ (80037bc <stdio_exit_handler+0xc>)
 80037b2:	4903      	ldr	r1, [pc, #12]	@ (80037c0 <stdio_exit_handler+0x10>)
 80037b4:	4803      	ldr	r0, [pc, #12]	@ (80037c4 <stdio_exit_handler+0x14>)
 80037b6:	f000 b869 	b.w	800388c <_fwalk_sglue>
 80037ba:	bf00      	nop
 80037bc:	20000018 	.word	0x20000018
 80037c0:	0800540d 	.word	0x0800540d
 80037c4:	20000028 	.word	0x20000028

080037c8 <cleanup_stdio>:
 80037c8:	6841      	ldr	r1, [r0, #4]
 80037ca:	4b0c      	ldr	r3, [pc, #48]	@ (80037fc <cleanup_stdio+0x34>)
 80037cc:	4299      	cmp	r1, r3
 80037ce:	b510      	push	{r4, lr}
 80037d0:	4604      	mov	r4, r0
 80037d2:	d001      	beq.n	80037d8 <cleanup_stdio+0x10>
 80037d4:	f001 fe1a 	bl	800540c <_fflush_r>
 80037d8:	68a1      	ldr	r1, [r4, #8]
 80037da:	4b09      	ldr	r3, [pc, #36]	@ (8003800 <cleanup_stdio+0x38>)
 80037dc:	4299      	cmp	r1, r3
 80037de:	d002      	beq.n	80037e6 <cleanup_stdio+0x1e>
 80037e0:	4620      	mov	r0, r4
 80037e2:	f001 fe13 	bl	800540c <_fflush_r>
 80037e6:	68e1      	ldr	r1, [r4, #12]
 80037e8:	4b06      	ldr	r3, [pc, #24]	@ (8003804 <cleanup_stdio+0x3c>)
 80037ea:	4299      	cmp	r1, r3
 80037ec:	d004      	beq.n	80037f8 <cleanup_stdio+0x30>
 80037ee:	4620      	mov	r0, r4
 80037f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037f4:	f001 be0a 	b.w	800540c <_fflush_r>
 80037f8:	bd10      	pop	{r4, pc}
 80037fa:	bf00      	nop
 80037fc:	20000210 	.word	0x20000210
 8003800:	20000278 	.word	0x20000278
 8003804:	200002e0 	.word	0x200002e0

08003808 <global_stdio_init.part.0>:
 8003808:	b510      	push	{r4, lr}
 800380a:	4b0b      	ldr	r3, [pc, #44]	@ (8003838 <global_stdio_init.part.0+0x30>)
 800380c:	4c0b      	ldr	r4, [pc, #44]	@ (800383c <global_stdio_init.part.0+0x34>)
 800380e:	4a0c      	ldr	r2, [pc, #48]	@ (8003840 <global_stdio_init.part.0+0x38>)
 8003810:	601a      	str	r2, [r3, #0]
 8003812:	4620      	mov	r0, r4
 8003814:	2200      	movs	r2, #0
 8003816:	2104      	movs	r1, #4
 8003818:	f7ff ff94 	bl	8003744 <std>
 800381c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003820:	2201      	movs	r2, #1
 8003822:	2109      	movs	r1, #9
 8003824:	f7ff ff8e 	bl	8003744 <std>
 8003828:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800382c:	2202      	movs	r2, #2
 800382e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003832:	2112      	movs	r1, #18
 8003834:	f7ff bf86 	b.w	8003744 <std>
 8003838:	20000348 	.word	0x20000348
 800383c:	20000210 	.word	0x20000210
 8003840:	080037b1 	.word	0x080037b1

08003844 <__sfp_lock_acquire>:
 8003844:	4801      	ldr	r0, [pc, #4]	@ (800384c <__sfp_lock_acquire+0x8>)
 8003846:	f000 b934 	b.w	8003ab2 <__retarget_lock_acquire_recursive>
 800384a:	bf00      	nop
 800384c:	20000351 	.word	0x20000351

08003850 <__sfp_lock_release>:
 8003850:	4801      	ldr	r0, [pc, #4]	@ (8003858 <__sfp_lock_release+0x8>)
 8003852:	f000 b92f 	b.w	8003ab4 <__retarget_lock_release_recursive>
 8003856:	bf00      	nop
 8003858:	20000351 	.word	0x20000351

0800385c <__sinit>:
 800385c:	b510      	push	{r4, lr}
 800385e:	4604      	mov	r4, r0
 8003860:	f7ff fff0 	bl	8003844 <__sfp_lock_acquire>
 8003864:	6a23      	ldr	r3, [r4, #32]
 8003866:	b11b      	cbz	r3, 8003870 <__sinit+0x14>
 8003868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800386c:	f7ff bff0 	b.w	8003850 <__sfp_lock_release>
 8003870:	4b04      	ldr	r3, [pc, #16]	@ (8003884 <__sinit+0x28>)
 8003872:	6223      	str	r3, [r4, #32]
 8003874:	4b04      	ldr	r3, [pc, #16]	@ (8003888 <__sinit+0x2c>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1f5      	bne.n	8003868 <__sinit+0xc>
 800387c:	f7ff ffc4 	bl	8003808 <global_stdio_init.part.0>
 8003880:	e7f2      	b.n	8003868 <__sinit+0xc>
 8003882:	bf00      	nop
 8003884:	080037c9 	.word	0x080037c9
 8003888:	20000348 	.word	0x20000348

0800388c <_fwalk_sglue>:
 800388c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003890:	4607      	mov	r7, r0
 8003892:	4688      	mov	r8, r1
 8003894:	4614      	mov	r4, r2
 8003896:	2600      	movs	r6, #0
 8003898:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800389c:	f1b9 0901 	subs.w	r9, r9, #1
 80038a0:	d505      	bpl.n	80038ae <_fwalk_sglue+0x22>
 80038a2:	6824      	ldr	r4, [r4, #0]
 80038a4:	2c00      	cmp	r4, #0
 80038a6:	d1f7      	bne.n	8003898 <_fwalk_sglue+0xc>
 80038a8:	4630      	mov	r0, r6
 80038aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038ae:	89ab      	ldrh	r3, [r5, #12]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d907      	bls.n	80038c4 <_fwalk_sglue+0x38>
 80038b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80038b8:	3301      	adds	r3, #1
 80038ba:	d003      	beq.n	80038c4 <_fwalk_sglue+0x38>
 80038bc:	4629      	mov	r1, r5
 80038be:	4638      	mov	r0, r7
 80038c0:	47c0      	blx	r8
 80038c2:	4306      	orrs	r6, r0
 80038c4:	3568      	adds	r5, #104	@ 0x68
 80038c6:	e7e9      	b.n	800389c <_fwalk_sglue+0x10>

080038c8 <sniprintf>:
 80038c8:	b40c      	push	{r2, r3}
 80038ca:	b530      	push	{r4, r5, lr}
 80038cc:	4b17      	ldr	r3, [pc, #92]	@ (800392c <sniprintf+0x64>)
 80038ce:	1e0c      	subs	r4, r1, #0
 80038d0:	681d      	ldr	r5, [r3, #0]
 80038d2:	b09d      	sub	sp, #116	@ 0x74
 80038d4:	da08      	bge.n	80038e8 <sniprintf+0x20>
 80038d6:	238b      	movs	r3, #139	@ 0x8b
 80038d8:	602b      	str	r3, [r5, #0]
 80038da:	f04f 30ff 	mov.w	r0, #4294967295
 80038de:	b01d      	add	sp, #116	@ 0x74
 80038e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80038e4:	b002      	add	sp, #8
 80038e6:	4770      	bx	lr
 80038e8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80038ec:	f8ad 3014 	strh.w	r3, [sp, #20]
 80038f0:	bf14      	ite	ne
 80038f2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80038f6:	4623      	moveq	r3, r4
 80038f8:	9304      	str	r3, [sp, #16]
 80038fa:	9307      	str	r3, [sp, #28]
 80038fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003900:	9002      	str	r0, [sp, #8]
 8003902:	9006      	str	r0, [sp, #24]
 8003904:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003908:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800390a:	ab21      	add	r3, sp, #132	@ 0x84
 800390c:	a902      	add	r1, sp, #8
 800390e:	4628      	mov	r0, r5
 8003910:	9301      	str	r3, [sp, #4]
 8003912:	f001 fbfb 	bl	800510c <_svfiprintf_r>
 8003916:	1c43      	adds	r3, r0, #1
 8003918:	bfbc      	itt	lt
 800391a:	238b      	movlt	r3, #139	@ 0x8b
 800391c:	602b      	strlt	r3, [r5, #0]
 800391e:	2c00      	cmp	r4, #0
 8003920:	d0dd      	beq.n	80038de <sniprintf+0x16>
 8003922:	9b02      	ldr	r3, [sp, #8]
 8003924:	2200      	movs	r2, #0
 8003926:	701a      	strb	r2, [r3, #0]
 8003928:	e7d9      	b.n	80038de <sniprintf+0x16>
 800392a:	bf00      	nop
 800392c:	20000024 	.word	0x20000024

08003930 <__sread>:
 8003930:	b510      	push	{r4, lr}
 8003932:	460c      	mov	r4, r1
 8003934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003938:	f000 f86c 	bl	8003a14 <_read_r>
 800393c:	2800      	cmp	r0, #0
 800393e:	bfab      	itete	ge
 8003940:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003942:	89a3      	ldrhlt	r3, [r4, #12]
 8003944:	181b      	addge	r3, r3, r0
 8003946:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800394a:	bfac      	ite	ge
 800394c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800394e:	81a3      	strhlt	r3, [r4, #12]
 8003950:	bd10      	pop	{r4, pc}

08003952 <__swrite>:
 8003952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003956:	461f      	mov	r7, r3
 8003958:	898b      	ldrh	r3, [r1, #12]
 800395a:	05db      	lsls	r3, r3, #23
 800395c:	4605      	mov	r5, r0
 800395e:	460c      	mov	r4, r1
 8003960:	4616      	mov	r6, r2
 8003962:	d505      	bpl.n	8003970 <__swrite+0x1e>
 8003964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003968:	2302      	movs	r3, #2
 800396a:	2200      	movs	r2, #0
 800396c:	f000 f840 	bl	80039f0 <_lseek_r>
 8003970:	89a3      	ldrh	r3, [r4, #12]
 8003972:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003976:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800397a:	81a3      	strh	r3, [r4, #12]
 800397c:	4632      	mov	r2, r6
 800397e:	463b      	mov	r3, r7
 8003980:	4628      	mov	r0, r5
 8003982:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003986:	f000 b857 	b.w	8003a38 <_write_r>

0800398a <__sseek>:
 800398a:	b510      	push	{r4, lr}
 800398c:	460c      	mov	r4, r1
 800398e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003992:	f000 f82d 	bl	80039f0 <_lseek_r>
 8003996:	1c43      	adds	r3, r0, #1
 8003998:	89a3      	ldrh	r3, [r4, #12]
 800399a:	bf15      	itete	ne
 800399c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800399e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80039a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80039a6:	81a3      	strheq	r3, [r4, #12]
 80039a8:	bf18      	it	ne
 80039aa:	81a3      	strhne	r3, [r4, #12]
 80039ac:	bd10      	pop	{r4, pc}

080039ae <__sclose>:
 80039ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039b2:	f000 b80d 	b.w	80039d0 <_close_r>

080039b6 <memset>:
 80039b6:	4402      	add	r2, r0
 80039b8:	4603      	mov	r3, r0
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d100      	bne.n	80039c0 <memset+0xa>
 80039be:	4770      	bx	lr
 80039c0:	f803 1b01 	strb.w	r1, [r3], #1
 80039c4:	e7f9      	b.n	80039ba <memset+0x4>
	...

080039c8 <_localeconv_r>:
 80039c8:	4800      	ldr	r0, [pc, #0]	@ (80039cc <_localeconv_r+0x4>)
 80039ca:	4770      	bx	lr
 80039cc:	20000164 	.word	0x20000164

080039d0 <_close_r>:
 80039d0:	b538      	push	{r3, r4, r5, lr}
 80039d2:	4d06      	ldr	r5, [pc, #24]	@ (80039ec <_close_r+0x1c>)
 80039d4:	2300      	movs	r3, #0
 80039d6:	4604      	mov	r4, r0
 80039d8:	4608      	mov	r0, r1
 80039da:	602b      	str	r3, [r5, #0]
 80039dc:	f7fe facc 	bl	8001f78 <_close>
 80039e0:	1c43      	adds	r3, r0, #1
 80039e2:	d102      	bne.n	80039ea <_close_r+0x1a>
 80039e4:	682b      	ldr	r3, [r5, #0]
 80039e6:	b103      	cbz	r3, 80039ea <_close_r+0x1a>
 80039e8:	6023      	str	r3, [r4, #0]
 80039ea:	bd38      	pop	{r3, r4, r5, pc}
 80039ec:	2000034c 	.word	0x2000034c

080039f0 <_lseek_r>:
 80039f0:	b538      	push	{r3, r4, r5, lr}
 80039f2:	4d07      	ldr	r5, [pc, #28]	@ (8003a10 <_lseek_r+0x20>)
 80039f4:	4604      	mov	r4, r0
 80039f6:	4608      	mov	r0, r1
 80039f8:	4611      	mov	r1, r2
 80039fa:	2200      	movs	r2, #0
 80039fc:	602a      	str	r2, [r5, #0]
 80039fe:	461a      	mov	r2, r3
 8003a00:	f7fe fae1 	bl	8001fc6 <_lseek>
 8003a04:	1c43      	adds	r3, r0, #1
 8003a06:	d102      	bne.n	8003a0e <_lseek_r+0x1e>
 8003a08:	682b      	ldr	r3, [r5, #0]
 8003a0a:	b103      	cbz	r3, 8003a0e <_lseek_r+0x1e>
 8003a0c:	6023      	str	r3, [r4, #0]
 8003a0e:	bd38      	pop	{r3, r4, r5, pc}
 8003a10:	2000034c 	.word	0x2000034c

08003a14 <_read_r>:
 8003a14:	b538      	push	{r3, r4, r5, lr}
 8003a16:	4d07      	ldr	r5, [pc, #28]	@ (8003a34 <_read_r+0x20>)
 8003a18:	4604      	mov	r4, r0
 8003a1a:	4608      	mov	r0, r1
 8003a1c:	4611      	mov	r1, r2
 8003a1e:	2200      	movs	r2, #0
 8003a20:	602a      	str	r2, [r5, #0]
 8003a22:	461a      	mov	r2, r3
 8003a24:	f7fe fa6f 	bl	8001f06 <_read>
 8003a28:	1c43      	adds	r3, r0, #1
 8003a2a:	d102      	bne.n	8003a32 <_read_r+0x1e>
 8003a2c:	682b      	ldr	r3, [r5, #0]
 8003a2e:	b103      	cbz	r3, 8003a32 <_read_r+0x1e>
 8003a30:	6023      	str	r3, [r4, #0]
 8003a32:	bd38      	pop	{r3, r4, r5, pc}
 8003a34:	2000034c 	.word	0x2000034c

08003a38 <_write_r>:
 8003a38:	b538      	push	{r3, r4, r5, lr}
 8003a3a:	4d07      	ldr	r5, [pc, #28]	@ (8003a58 <_write_r+0x20>)
 8003a3c:	4604      	mov	r4, r0
 8003a3e:	4608      	mov	r0, r1
 8003a40:	4611      	mov	r1, r2
 8003a42:	2200      	movs	r2, #0
 8003a44:	602a      	str	r2, [r5, #0]
 8003a46:	461a      	mov	r2, r3
 8003a48:	f7fe fa7a 	bl	8001f40 <_write>
 8003a4c:	1c43      	adds	r3, r0, #1
 8003a4e:	d102      	bne.n	8003a56 <_write_r+0x1e>
 8003a50:	682b      	ldr	r3, [r5, #0]
 8003a52:	b103      	cbz	r3, 8003a56 <_write_r+0x1e>
 8003a54:	6023      	str	r3, [r4, #0]
 8003a56:	bd38      	pop	{r3, r4, r5, pc}
 8003a58:	2000034c 	.word	0x2000034c

08003a5c <__errno>:
 8003a5c:	4b01      	ldr	r3, [pc, #4]	@ (8003a64 <__errno+0x8>)
 8003a5e:	6818      	ldr	r0, [r3, #0]
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	20000024 	.word	0x20000024

08003a68 <__libc_init_array>:
 8003a68:	b570      	push	{r4, r5, r6, lr}
 8003a6a:	4d0d      	ldr	r5, [pc, #52]	@ (8003aa0 <__libc_init_array+0x38>)
 8003a6c:	4c0d      	ldr	r4, [pc, #52]	@ (8003aa4 <__libc_init_array+0x3c>)
 8003a6e:	1b64      	subs	r4, r4, r5
 8003a70:	10a4      	asrs	r4, r4, #2
 8003a72:	2600      	movs	r6, #0
 8003a74:	42a6      	cmp	r6, r4
 8003a76:	d109      	bne.n	8003a8c <__libc_init_array+0x24>
 8003a78:	4d0b      	ldr	r5, [pc, #44]	@ (8003aa8 <__libc_init_array+0x40>)
 8003a7a:	4c0c      	ldr	r4, [pc, #48]	@ (8003aac <__libc_init_array+0x44>)
 8003a7c:	f002 fdac 	bl	80065d8 <_init>
 8003a80:	1b64      	subs	r4, r4, r5
 8003a82:	10a4      	asrs	r4, r4, #2
 8003a84:	2600      	movs	r6, #0
 8003a86:	42a6      	cmp	r6, r4
 8003a88:	d105      	bne.n	8003a96 <__libc_init_array+0x2e>
 8003a8a:	bd70      	pop	{r4, r5, r6, pc}
 8003a8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a90:	4798      	blx	r3
 8003a92:	3601      	adds	r6, #1
 8003a94:	e7ee      	b.n	8003a74 <__libc_init_array+0xc>
 8003a96:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a9a:	4798      	blx	r3
 8003a9c:	3601      	adds	r6, #1
 8003a9e:	e7f2      	b.n	8003a86 <__libc_init_array+0x1e>
 8003aa0:	08006a60 	.word	0x08006a60
 8003aa4:	08006a60 	.word	0x08006a60
 8003aa8:	08006a60 	.word	0x08006a60
 8003aac:	08006a64 	.word	0x08006a64

08003ab0 <__retarget_lock_init_recursive>:
 8003ab0:	4770      	bx	lr

08003ab2 <__retarget_lock_acquire_recursive>:
 8003ab2:	4770      	bx	lr

08003ab4 <__retarget_lock_release_recursive>:
 8003ab4:	4770      	bx	lr

08003ab6 <quorem>:
 8003ab6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aba:	6903      	ldr	r3, [r0, #16]
 8003abc:	690c      	ldr	r4, [r1, #16]
 8003abe:	42a3      	cmp	r3, r4
 8003ac0:	4607      	mov	r7, r0
 8003ac2:	db7e      	blt.n	8003bc2 <quorem+0x10c>
 8003ac4:	3c01      	subs	r4, #1
 8003ac6:	f101 0814 	add.w	r8, r1, #20
 8003aca:	00a3      	lsls	r3, r4, #2
 8003acc:	f100 0514 	add.w	r5, r0, #20
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003ad6:	9301      	str	r3, [sp, #4]
 8003ad8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003adc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003ae8:	fbb2 f6f3 	udiv	r6, r2, r3
 8003aec:	d32e      	bcc.n	8003b4c <quorem+0x96>
 8003aee:	f04f 0a00 	mov.w	sl, #0
 8003af2:	46c4      	mov	ip, r8
 8003af4:	46ae      	mov	lr, r5
 8003af6:	46d3      	mov	fp, sl
 8003af8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003afc:	b298      	uxth	r0, r3
 8003afe:	fb06 a000 	mla	r0, r6, r0, sl
 8003b02:	0c02      	lsrs	r2, r0, #16
 8003b04:	0c1b      	lsrs	r3, r3, #16
 8003b06:	fb06 2303 	mla	r3, r6, r3, r2
 8003b0a:	f8de 2000 	ldr.w	r2, [lr]
 8003b0e:	b280      	uxth	r0, r0
 8003b10:	b292      	uxth	r2, r2
 8003b12:	1a12      	subs	r2, r2, r0
 8003b14:	445a      	add	r2, fp
 8003b16:	f8de 0000 	ldr.w	r0, [lr]
 8003b1a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003b24:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003b28:	b292      	uxth	r2, r2
 8003b2a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003b2e:	45e1      	cmp	r9, ip
 8003b30:	f84e 2b04 	str.w	r2, [lr], #4
 8003b34:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003b38:	d2de      	bcs.n	8003af8 <quorem+0x42>
 8003b3a:	9b00      	ldr	r3, [sp, #0]
 8003b3c:	58eb      	ldr	r3, [r5, r3]
 8003b3e:	b92b      	cbnz	r3, 8003b4c <quorem+0x96>
 8003b40:	9b01      	ldr	r3, [sp, #4]
 8003b42:	3b04      	subs	r3, #4
 8003b44:	429d      	cmp	r5, r3
 8003b46:	461a      	mov	r2, r3
 8003b48:	d32f      	bcc.n	8003baa <quorem+0xf4>
 8003b4a:	613c      	str	r4, [r7, #16]
 8003b4c:	4638      	mov	r0, r7
 8003b4e:	f001 f979 	bl	8004e44 <__mcmp>
 8003b52:	2800      	cmp	r0, #0
 8003b54:	db25      	blt.n	8003ba2 <quorem+0xec>
 8003b56:	4629      	mov	r1, r5
 8003b58:	2000      	movs	r0, #0
 8003b5a:	f858 2b04 	ldr.w	r2, [r8], #4
 8003b5e:	f8d1 c000 	ldr.w	ip, [r1]
 8003b62:	fa1f fe82 	uxth.w	lr, r2
 8003b66:	fa1f f38c 	uxth.w	r3, ip
 8003b6a:	eba3 030e 	sub.w	r3, r3, lr
 8003b6e:	4403      	add	r3, r0
 8003b70:	0c12      	lsrs	r2, r2, #16
 8003b72:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003b76:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003b80:	45c1      	cmp	r9, r8
 8003b82:	f841 3b04 	str.w	r3, [r1], #4
 8003b86:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003b8a:	d2e6      	bcs.n	8003b5a <quorem+0xa4>
 8003b8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003b90:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003b94:	b922      	cbnz	r2, 8003ba0 <quorem+0xea>
 8003b96:	3b04      	subs	r3, #4
 8003b98:	429d      	cmp	r5, r3
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	d30b      	bcc.n	8003bb6 <quorem+0x100>
 8003b9e:	613c      	str	r4, [r7, #16]
 8003ba0:	3601      	adds	r6, #1
 8003ba2:	4630      	mov	r0, r6
 8003ba4:	b003      	add	sp, #12
 8003ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003baa:	6812      	ldr	r2, [r2, #0]
 8003bac:	3b04      	subs	r3, #4
 8003bae:	2a00      	cmp	r2, #0
 8003bb0:	d1cb      	bne.n	8003b4a <quorem+0x94>
 8003bb2:	3c01      	subs	r4, #1
 8003bb4:	e7c6      	b.n	8003b44 <quorem+0x8e>
 8003bb6:	6812      	ldr	r2, [r2, #0]
 8003bb8:	3b04      	subs	r3, #4
 8003bba:	2a00      	cmp	r2, #0
 8003bbc:	d1ef      	bne.n	8003b9e <quorem+0xe8>
 8003bbe:	3c01      	subs	r4, #1
 8003bc0:	e7ea      	b.n	8003b98 <quorem+0xe2>
 8003bc2:	2000      	movs	r0, #0
 8003bc4:	e7ee      	b.n	8003ba4 <quorem+0xee>
	...

08003bc8 <_dtoa_r>:
 8003bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bcc:	69c7      	ldr	r7, [r0, #28]
 8003bce:	b099      	sub	sp, #100	@ 0x64
 8003bd0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8003bd4:	ec55 4b10 	vmov	r4, r5, d0
 8003bd8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8003bda:	9109      	str	r1, [sp, #36]	@ 0x24
 8003bdc:	4683      	mov	fp, r0
 8003bde:	920e      	str	r2, [sp, #56]	@ 0x38
 8003be0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003be2:	b97f      	cbnz	r7, 8003c04 <_dtoa_r+0x3c>
 8003be4:	2010      	movs	r0, #16
 8003be6:	f000 fdfd 	bl	80047e4 <malloc>
 8003bea:	4602      	mov	r2, r0
 8003bec:	f8cb 001c 	str.w	r0, [fp, #28]
 8003bf0:	b920      	cbnz	r0, 8003bfc <_dtoa_r+0x34>
 8003bf2:	4ba7      	ldr	r3, [pc, #668]	@ (8003e90 <_dtoa_r+0x2c8>)
 8003bf4:	21ef      	movs	r1, #239	@ 0xef
 8003bf6:	48a7      	ldr	r0, [pc, #668]	@ (8003e94 <_dtoa_r+0x2cc>)
 8003bf8:	f001 fc68 	bl	80054cc <__assert_func>
 8003bfc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8003c00:	6007      	str	r7, [r0, #0]
 8003c02:	60c7      	str	r7, [r0, #12]
 8003c04:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003c08:	6819      	ldr	r1, [r3, #0]
 8003c0a:	b159      	cbz	r1, 8003c24 <_dtoa_r+0x5c>
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	604a      	str	r2, [r1, #4]
 8003c10:	2301      	movs	r3, #1
 8003c12:	4093      	lsls	r3, r2
 8003c14:	608b      	str	r3, [r1, #8]
 8003c16:	4658      	mov	r0, fp
 8003c18:	f000 feda 	bl	80049d0 <_Bfree>
 8003c1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003c20:	2200      	movs	r2, #0
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	1e2b      	subs	r3, r5, #0
 8003c26:	bfb9      	ittee	lt
 8003c28:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8003c2c:	9303      	strlt	r3, [sp, #12]
 8003c2e:	2300      	movge	r3, #0
 8003c30:	6033      	strge	r3, [r6, #0]
 8003c32:	9f03      	ldr	r7, [sp, #12]
 8003c34:	4b98      	ldr	r3, [pc, #608]	@ (8003e98 <_dtoa_r+0x2d0>)
 8003c36:	bfbc      	itt	lt
 8003c38:	2201      	movlt	r2, #1
 8003c3a:	6032      	strlt	r2, [r6, #0]
 8003c3c:	43bb      	bics	r3, r7
 8003c3e:	d112      	bne.n	8003c66 <_dtoa_r+0x9e>
 8003c40:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8003c42:	f242 730f 	movw	r3, #9999	@ 0x270f
 8003c46:	6013      	str	r3, [r2, #0]
 8003c48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003c4c:	4323      	orrs	r3, r4
 8003c4e:	f000 854d 	beq.w	80046ec <_dtoa_r+0xb24>
 8003c52:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8003c54:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8003eac <_dtoa_r+0x2e4>
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f000 854f 	beq.w	80046fc <_dtoa_r+0xb34>
 8003c5e:	f10a 0303 	add.w	r3, sl, #3
 8003c62:	f000 bd49 	b.w	80046f8 <_dtoa_r+0xb30>
 8003c66:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	ec51 0b17 	vmov	r0, r1, d7
 8003c70:	2300      	movs	r3, #0
 8003c72:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8003c76:	f7fc ff2f 	bl	8000ad8 <__aeabi_dcmpeq>
 8003c7a:	4680      	mov	r8, r0
 8003c7c:	b158      	cbz	r0, 8003c96 <_dtoa_r+0xce>
 8003c7e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8003c80:	2301      	movs	r3, #1
 8003c82:	6013      	str	r3, [r2, #0]
 8003c84:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8003c86:	b113      	cbz	r3, 8003c8e <_dtoa_r+0xc6>
 8003c88:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8003c8a:	4b84      	ldr	r3, [pc, #528]	@ (8003e9c <_dtoa_r+0x2d4>)
 8003c8c:	6013      	str	r3, [r2, #0]
 8003c8e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8003eb0 <_dtoa_r+0x2e8>
 8003c92:	f000 bd33 	b.w	80046fc <_dtoa_r+0xb34>
 8003c96:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8003c9a:	aa16      	add	r2, sp, #88	@ 0x58
 8003c9c:	a917      	add	r1, sp, #92	@ 0x5c
 8003c9e:	4658      	mov	r0, fp
 8003ca0:	f001 f980 	bl	8004fa4 <__d2b>
 8003ca4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8003ca8:	4681      	mov	r9, r0
 8003caa:	2e00      	cmp	r6, #0
 8003cac:	d077      	beq.n	8003d9e <_dtoa_r+0x1d6>
 8003cae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003cb0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8003cb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003cbc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003cc0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003cc4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8003cc8:	4619      	mov	r1, r3
 8003cca:	2200      	movs	r2, #0
 8003ccc:	4b74      	ldr	r3, [pc, #464]	@ (8003ea0 <_dtoa_r+0x2d8>)
 8003cce:	f7fc fae3 	bl	8000298 <__aeabi_dsub>
 8003cd2:	a369      	add	r3, pc, #420	@ (adr r3, 8003e78 <_dtoa_r+0x2b0>)
 8003cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd8:	f7fc fc96 	bl	8000608 <__aeabi_dmul>
 8003cdc:	a368      	add	r3, pc, #416	@ (adr r3, 8003e80 <_dtoa_r+0x2b8>)
 8003cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce2:	f7fc fadb 	bl	800029c <__adddf3>
 8003ce6:	4604      	mov	r4, r0
 8003ce8:	4630      	mov	r0, r6
 8003cea:	460d      	mov	r5, r1
 8003cec:	f7fc fc22 	bl	8000534 <__aeabi_i2d>
 8003cf0:	a365      	add	r3, pc, #404	@ (adr r3, 8003e88 <_dtoa_r+0x2c0>)
 8003cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf6:	f7fc fc87 	bl	8000608 <__aeabi_dmul>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	4620      	mov	r0, r4
 8003d00:	4629      	mov	r1, r5
 8003d02:	f7fc facb 	bl	800029c <__adddf3>
 8003d06:	4604      	mov	r4, r0
 8003d08:	460d      	mov	r5, r1
 8003d0a:	f7fc ff2d 	bl	8000b68 <__aeabi_d2iz>
 8003d0e:	2200      	movs	r2, #0
 8003d10:	4607      	mov	r7, r0
 8003d12:	2300      	movs	r3, #0
 8003d14:	4620      	mov	r0, r4
 8003d16:	4629      	mov	r1, r5
 8003d18:	f7fc fee8 	bl	8000aec <__aeabi_dcmplt>
 8003d1c:	b140      	cbz	r0, 8003d30 <_dtoa_r+0x168>
 8003d1e:	4638      	mov	r0, r7
 8003d20:	f7fc fc08 	bl	8000534 <__aeabi_i2d>
 8003d24:	4622      	mov	r2, r4
 8003d26:	462b      	mov	r3, r5
 8003d28:	f7fc fed6 	bl	8000ad8 <__aeabi_dcmpeq>
 8003d2c:	b900      	cbnz	r0, 8003d30 <_dtoa_r+0x168>
 8003d2e:	3f01      	subs	r7, #1
 8003d30:	2f16      	cmp	r7, #22
 8003d32:	d851      	bhi.n	8003dd8 <_dtoa_r+0x210>
 8003d34:	4b5b      	ldr	r3, [pc, #364]	@ (8003ea4 <_dtoa_r+0x2dc>)
 8003d36:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003d42:	f7fc fed3 	bl	8000aec <__aeabi_dcmplt>
 8003d46:	2800      	cmp	r0, #0
 8003d48:	d048      	beq.n	8003ddc <_dtoa_r+0x214>
 8003d4a:	3f01      	subs	r7, #1
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	9312      	str	r3, [sp, #72]	@ 0x48
 8003d50:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8003d52:	1b9b      	subs	r3, r3, r6
 8003d54:	1e5a      	subs	r2, r3, #1
 8003d56:	bf44      	itt	mi
 8003d58:	f1c3 0801 	rsbmi	r8, r3, #1
 8003d5c:	2300      	movmi	r3, #0
 8003d5e:	9208      	str	r2, [sp, #32]
 8003d60:	bf54      	ite	pl
 8003d62:	f04f 0800 	movpl.w	r8, #0
 8003d66:	9308      	strmi	r3, [sp, #32]
 8003d68:	2f00      	cmp	r7, #0
 8003d6a:	db39      	blt.n	8003de0 <_dtoa_r+0x218>
 8003d6c:	9b08      	ldr	r3, [sp, #32]
 8003d6e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8003d70:	443b      	add	r3, r7
 8003d72:	9308      	str	r3, [sp, #32]
 8003d74:	2300      	movs	r3, #0
 8003d76:	930a      	str	r3, [sp, #40]	@ 0x28
 8003d78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d7a:	2b09      	cmp	r3, #9
 8003d7c:	d864      	bhi.n	8003e48 <_dtoa_r+0x280>
 8003d7e:	2b05      	cmp	r3, #5
 8003d80:	bfc4      	itt	gt
 8003d82:	3b04      	subgt	r3, #4
 8003d84:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8003d86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d88:	f1a3 0302 	sub.w	r3, r3, #2
 8003d8c:	bfcc      	ite	gt
 8003d8e:	2400      	movgt	r4, #0
 8003d90:	2401      	movle	r4, #1
 8003d92:	2b03      	cmp	r3, #3
 8003d94:	d863      	bhi.n	8003e5e <_dtoa_r+0x296>
 8003d96:	e8df f003 	tbb	[pc, r3]
 8003d9a:	372a      	.short	0x372a
 8003d9c:	5535      	.short	0x5535
 8003d9e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8003da2:	441e      	add	r6, r3
 8003da4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8003da8:	2b20      	cmp	r3, #32
 8003daa:	bfc1      	itttt	gt
 8003dac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8003db0:	409f      	lslgt	r7, r3
 8003db2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8003db6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8003dba:	bfd6      	itet	le
 8003dbc:	f1c3 0320 	rsble	r3, r3, #32
 8003dc0:	ea47 0003 	orrgt.w	r0, r7, r3
 8003dc4:	fa04 f003 	lslle.w	r0, r4, r3
 8003dc8:	f7fc fba4 	bl	8000514 <__aeabi_ui2d>
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8003dd2:	3e01      	subs	r6, #1
 8003dd4:	9214      	str	r2, [sp, #80]	@ 0x50
 8003dd6:	e777      	b.n	8003cc8 <_dtoa_r+0x100>
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e7b8      	b.n	8003d4e <_dtoa_r+0x186>
 8003ddc:	9012      	str	r0, [sp, #72]	@ 0x48
 8003dde:	e7b7      	b.n	8003d50 <_dtoa_r+0x188>
 8003de0:	427b      	negs	r3, r7
 8003de2:	930a      	str	r3, [sp, #40]	@ 0x28
 8003de4:	2300      	movs	r3, #0
 8003de6:	eba8 0807 	sub.w	r8, r8, r7
 8003dea:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003dec:	e7c4      	b.n	8003d78 <_dtoa_r+0x1b0>
 8003dee:	2300      	movs	r3, #0
 8003df0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003df2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	dc35      	bgt.n	8003e64 <_dtoa_r+0x29c>
 8003df8:	2301      	movs	r3, #1
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	9307      	str	r3, [sp, #28]
 8003dfe:	461a      	mov	r2, r3
 8003e00:	920e      	str	r2, [sp, #56]	@ 0x38
 8003e02:	e00b      	b.n	8003e1c <_dtoa_r+0x254>
 8003e04:	2301      	movs	r3, #1
 8003e06:	e7f3      	b.n	8003df0 <_dtoa_r+0x228>
 8003e08:	2300      	movs	r3, #0
 8003e0a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003e0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003e0e:	18fb      	adds	r3, r7, r3
 8003e10:	9300      	str	r3, [sp, #0]
 8003e12:	3301      	adds	r3, #1
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	9307      	str	r3, [sp, #28]
 8003e18:	bfb8      	it	lt
 8003e1a:	2301      	movlt	r3, #1
 8003e1c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8003e20:	2100      	movs	r1, #0
 8003e22:	2204      	movs	r2, #4
 8003e24:	f102 0514 	add.w	r5, r2, #20
 8003e28:	429d      	cmp	r5, r3
 8003e2a:	d91f      	bls.n	8003e6c <_dtoa_r+0x2a4>
 8003e2c:	6041      	str	r1, [r0, #4]
 8003e2e:	4658      	mov	r0, fp
 8003e30:	f000 fd8e 	bl	8004950 <_Balloc>
 8003e34:	4682      	mov	sl, r0
 8003e36:	2800      	cmp	r0, #0
 8003e38:	d13c      	bne.n	8003eb4 <_dtoa_r+0x2ec>
 8003e3a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ea8 <_dtoa_r+0x2e0>)
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	f240 11af 	movw	r1, #431	@ 0x1af
 8003e42:	e6d8      	b.n	8003bf6 <_dtoa_r+0x2e>
 8003e44:	2301      	movs	r3, #1
 8003e46:	e7e0      	b.n	8003e0a <_dtoa_r+0x242>
 8003e48:	2401      	movs	r4, #1
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e4e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003e50:	f04f 33ff 	mov.w	r3, #4294967295
 8003e54:	9300      	str	r3, [sp, #0]
 8003e56:	9307      	str	r3, [sp, #28]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	2312      	movs	r3, #18
 8003e5c:	e7d0      	b.n	8003e00 <_dtoa_r+0x238>
 8003e5e:	2301      	movs	r3, #1
 8003e60:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003e62:	e7f5      	b.n	8003e50 <_dtoa_r+0x288>
 8003e64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003e66:	9300      	str	r3, [sp, #0]
 8003e68:	9307      	str	r3, [sp, #28]
 8003e6a:	e7d7      	b.n	8003e1c <_dtoa_r+0x254>
 8003e6c:	3101      	adds	r1, #1
 8003e6e:	0052      	lsls	r2, r2, #1
 8003e70:	e7d8      	b.n	8003e24 <_dtoa_r+0x25c>
 8003e72:	bf00      	nop
 8003e74:	f3af 8000 	nop.w
 8003e78:	636f4361 	.word	0x636f4361
 8003e7c:	3fd287a7 	.word	0x3fd287a7
 8003e80:	8b60c8b3 	.word	0x8b60c8b3
 8003e84:	3fc68a28 	.word	0x3fc68a28
 8003e88:	509f79fb 	.word	0x509f79fb
 8003e8c:	3fd34413 	.word	0x3fd34413
 8003e90:	0800670d 	.word	0x0800670d
 8003e94:	08006724 	.word	0x08006724
 8003e98:	7ff00000 	.word	0x7ff00000
 8003e9c:	080066dd 	.word	0x080066dd
 8003ea0:	3ff80000 	.word	0x3ff80000
 8003ea4:	08006820 	.word	0x08006820
 8003ea8:	0800677c 	.word	0x0800677c
 8003eac:	08006709 	.word	0x08006709
 8003eb0:	080066dc 	.word	0x080066dc
 8003eb4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003eb8:	6018      	str	r0, [r3, #0]
 8003eba:	9b07      	ldr	r3, [sp, #28]
 8003ebc:	2b0e      	cmp	r3, #14
 8003ebe:	f200 80a4 	bhi.w	800400a <_dtoa_r+0x442>
 8003ec2:	2c00      	cmp	r4, #0
 8003ec4:	f000 80a1 	beq.w	800400a <_dtoa_r+0x442>
 8003ec8:	2f00      	cmp	r7, #0
 8003eca:	dd33      	ble.n	8003f34 <_dtoa_r+0x36c>
 8003ecc:	4bad      	ldr	r3, [pc, #692]	@ (8004184 <_dtoa_r+0x5bc>)
 8003ece:	f007 020f 	and.w	r2, r7, #15
 8003ed2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003ed6:	ed93 7b00 	vldr	d7, [r3]
 8003eda:	05f8      	lsls	r0, r7, #23
 8003edc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003ee0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8003ee4:	d516      	bpl.n	8003f14 <_dtoa_r+0x34c>
 8003ee6:	4ba8      	ldr	r3, [pc, #672]	@ (8004188 <_dtoa_r+0x5c0>)
 8003ee8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003eec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003ef0:	f7fc fcb4 	bl	800085c <__aeabi_ddiv>
 8003ef4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003ef8:	f004 040f 	and.w	r4, r4, #15
 8003efc:	2603      	movs	r6, #3
 8003efe:	4da2      	ldr	r5, [pc, #648]	@ (8004188 <_dtoa_r+0x5c0>)
 8003f00:	b954      	cbnz	r4, 8003f18 <_dtoa_r+0x350>
 8003f02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f0a:	f7fc fca7 	bl	800085c <__aeabi_ddiv>
 8003f0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f12:	e028      	b.n	8003f66 <_dtoa_r+0x39e>
 8003f14:	2602      	movs	r6, #2
 8003f16:	e7f2      	b.n	8003efe <_dtoa_r+0x336>
 8003f18:	07e1      	lsls	r1, r4, #31
 8003f1a:	d508      	bpl.n	8003f2e <_dtoa_r+0x366>
 8003f1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003f20:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003f24:	f7fc fb70 	bl	8000608 <__aeabi_dmul>
 8003f28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003f2c:	3601      	adds	r6, #1
 8003f2e:	1064      	asrs	r4, r4, #1
 8003f30:	3508      	adds	r5, #8
 8003f32:	e7e5      	b.n	8003f00 <_dtoa_r+0x338>
 8003f34:	f000 80d2 	beq.w	80040dc <_dtoa_r+0x514>
 8003f38:	427c      	negs	r4, r7
 8003f3a:	4b92      	ldr	r3, [pc, #584]	@ (8004184 <_dtoa_r+0x5bc>)
 8003f3c:	4d92      	ldr	r5, [pc, #584]	@ (8004188 <_dtoa_r+0x5c0>)
 8003f3e:	f004 020f 	and.w	r2, r4, #15
 8003f42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f4a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003f4e:	f7fc fb5b 	bl	8000608 <__aeabi_dmul>
 8003f52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f56:	1124      	asrs	r4, r4, #4
 8003f58:	2300      	movs	r3, #0
 8003f5a:	2602      	movs	r6, #2
 8003f5c:	2c00      	cmp	r4, #0
 8003f5e:	f040 80b2 	bne.w	80040c6 <_dtoa_r+0x4fe>
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1d3      	bne.n	8003f0e <_dtoa_r+0x346>
 8003f66:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8003f68:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f000 80b7 	beq.w	80040e0 <_dtoa_r+0x518>
 8003f72:	4b86      	ldr	r3, [pc, #536]	@ (800418c <_dtoa_r+0x5c4>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	4620      	mov	r0, r4
 8003f78:	4629      	mov	r1, r5
 8003f7a:	f7fc fdb7 	bl	8000aec <__aeabi_dcmplt>
 8003f7e:	2800      	cmp	r0, #0
 8003f80:	f000 80ae 	beq.w	80040e0 <_dtoa_r+0x518>
 8003f84:	9b07      	ldr	r3, [sp, #28]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	f000 80aa 	beq.w	80040e0 <_dtoa_r+0x518>
 8003f8c:	9b00      	ldr	r3, [sp, #0]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	dd37      	ble.n	8004002 <_dtoa_r+0x43a>
 8003f92:	1e7b      	subs	r3, r7, #1
 8003f94:	9304      	str	r3, [sp, #16]
 8003f96:	4620      	mov	r0, r4
 8003f98:	4b7d      	ldr	r3, [pc, #500]	@ (8004190 <_dtoa_r+0x5c8>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	4629      	mov	r1, r5
 8003f9e:	f7fc fb33 	bl	8000608 <__aeabi_dmul>
 8003fa2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003fa6:	9c00      	ldr	r4, [sp, #0]
 8003fa8:	3601      	adds	r6, #1
 8003faa:	4630      	mov	r0, r6
 8003fac:	f7fc fac2 	bl	8000534 <__aeabi_i2d>
 8003fb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003fb4:	f7fc fb28 	bl	8000608 <__aeabi_dmul>
 8003fb8:	4b76      	ldr	r3, [pc, #472]	@ (8004194 <_dtoa_r+0x5cc>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f7fc f96e 	bl	800029c <__adddf3>
 8003fc0:	4605      	mov	r5, r0
 8003fc2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8003fc6:	2c00      	cmp	r4, #0
 8003fc8:	f040 808d 	bne.w	80040e6 <_dtoa_r+0x51e>
 8003fcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003fd0:	4b71      	ldr	r3, [pc, #452]	@ (8004198 <_dtoa_r+0x5d0>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f7fc f960 	bl	8000298 <__aeabi_dsub>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	460b      	mov	r3, r1
 8003fdc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003fe0:	462a      	mov	r2, r5
 8003fe2:	4633      	mov	r3, r6
 8003fe4:	f7fc fda0 	bl	8000b28 <__aeabi_dcmpgt>
 8003fe8:	2800      	cmp	r0, #0
 8003fea:	f040 828b 	bne.w	8004504 <_dtoa_r+0x93c>
 8003fee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ff2:	462a      	mov	r2, r5
 8003ff4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8003ff8:	f7fc fd78 	bl	8000aec <__aeabi_dcmplt>
 8003ffc:	2800      	cmp	r0, #0
 8003ffe:	f040 8128 	bne.w	8004252 <_dtoa_r+0x68a>
 8004002:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004006:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800400a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800400c:	2b00      	cmp	r3, #0
 800400e:	f2c0 815a 	blt.w	80042c6 <_dtoa_r+0x6fe>
 8004012:	2f0e      	cmp	r7, #14
 8004014:	f300 8157 	bgt.w	80042c6 <_dtoa_r+0x6fe>
 8004018:	4b5a      	ldr	r3, [pc, #360]	@ (8004184 <_dtoa_r+0x5bc>)
 800401a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800401e:	ed93 7b00 	vldr	d7, [r3]
 8004022:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004024:	2b00      	cmp	r3, #0
 8004026:	ed8d 7b00 	vstr	d7, [sp]
 800402a:	da03      	bge.n	8004034 <_dtoa_r+0x46c>
 800402c:	9b07      	ldr	r3, [sp, #28]
 800402e:	2b00      	cmp	r3, #0
 8004030:	f340 8101 	ble.w	8004236 <_dtoa_r+0x66e>
 8004034:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004038:	4656      	mov	r6, sl
 800403a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800403e:	4620      	mov	r0, r4
 8004040:	4629      	mov	r1, r5
 8004042:	f7fc fc0b 	bl	800085c <__aeabi_ddiv>
 8004046:	f7fc fd8f 	bl	8000b68 <__aeabi_d2iz>
 800404a:	4680      	mov	r8, r0
 800404c:	f7fc fa72 	bl	8000534 <__aeabi_i2d>
 8004050:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004054:	f7fc fad8 	bl	8000608 <__aeabi_dmul>
 8004058:	4602      	mov	r2, r0
 800405a:	460b      	mov	r3, r1
 800405c:	4620      	mov	r0, r4
 800405e:	4629      	mov	r1, r5
 8004060:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004064:	f7fc f918 	bl	8000298 <__aeabi_dsub>
 8004068:	f806 4b01 	strb.w	r4, [r6], #1
 800406c:	9d07      	ldr	r5, [sp, #28]
 800406e:	eba6 040a 	sub.w	r4, r6, sl
 8004072:	42a5      	cmp	r5, r4
 8004074:	4602      	mov	r2, r0
 8004076:	460b      	mov	r3, r1
 8004078:	f040 8117 	bne.w	80042aa <_dtoa_r+0x6e2>
 800407c:	f7fc f90e 	bl	800029c <__adddf3>
 8004080:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004084:	4604      	mov	r4, r0
 8004086:	460d      	mov	r5, r1
 8004088:	f7fc fd4e 	bl	8000b28 <__aeabi_dcmpgt>
 800408c:	2800      	cmp	r0, #0
 800408e:	f040 80f9 	bne.w	8004284 <_dtoa_r+0x6bc>
 8004092:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004096:	4620      	mov	r0, r4
 8004098:	4629      	mov	r1, r5
 800409a:	f7fc fd1d 	bl	8000ad8 <__aeabi_dcmpeq>
 800409e:	b118      	cbz	r0, 80040a8 <_dtoa_r+0x4e0>
 80040a0:	f018 0f01 	tst.w	r8, #1
 80040a4:	f040 80ee 	bne.w	8004284 <_dtoa_r+0x6bc>
 80040a8:	4649      	mov	r1, r9
 80040aa:	4658      	mov	r0, fp
 80040ac:	f000 fc90 	bl	80049d0 <_Bfree>
 80040b0:	2300      	movs	r3, #0
 80040b2:	7033      	strb	r3, [r6, #0]
 80040b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80040b6:	3701      	adds	r7, #1
 80040b8:	601f      	str	r7, [r3, #0]
 80040ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f000 831d 	beq.w	80046fc <_dtoa_r+0xb34>
 80040c2:	601e      	str	r6, [r3, #0]
 80040c4:	e31a      	b.n	80046fc <_dtoa_r+0xb34>
 80040c6:	07e2      	lsls	r2, r4, #31
 80040c8:	d505      	bpl.n	80040d6 <_dtoa_r+0x50e>
 80040ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 80040ce:	f7fc fa9b 	bl	8000608 <__aeabi_dmul>
 80040d2:	3601      	adds	r6, #1
 80040d4:	2301      	movs	r3, #1
 80040d6:	1064      	asrs	r4, r4, #1
 80040d8:	3508      	adds	r5, #8
 80040da:	e73f      	b.n	8003f5c <_dtoa_r+0x394>
 80040dc:	2602      	movs	r6, #2
 80040de:	e742      	b.n	8003f66 <_dtoa_r+0x39e>
 80040e0:	9c07      	ldr	r4, [sp, #28]
 80040e2:	9704      	str	r7, [sp, #16]
 80040e4:	e761      	b.n	8003faa <_dtoa_r+0x3e2>
 80040e6:	4b27      	ldr	r3, [pc, #156]	@ (8004184 <_dtoa_r+0x5bc>)
 80040e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80040ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80040ee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80040f2:	4454      	add	r4, sl
 80040f4:	2900      	cmp	r1, #0
 80040f6:	d053      	beq.n	80041a0 <_dtoa_r+0x5d8>
 80040f8:	4928      	ldr	r1, [pc, #160]	@ (800419c <_dtoa_r+0x5d4>)
 80040fa:	2000      	movs	r0, #0
 80040fc:	f7fc fbae 	bl	800085c <__aeabi_ddiv>
 8004100:	4633      	mov	r3, r6
 8004102:	462a      	mov	r2, r5
 8004104:	f7fc f8c8 	bl	8000298 <__aeabi_dsub>
 8004108:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800410c:	4656      	mov	r6, sl
 800410e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004112:	f7fc fd29 	bl	8000b68 <__aeabi_d2iz>
 8004116:	4605      	mov	r5, r0
 8004118:	f7fc fa0c 	bl	8000534 <__aeabi_i2d>
 800411c:	4602      	mov	r2, r0
 800411e:	460b      	mov	r3, r1
 8004120:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004124:	f7fc f8b8 	bl	8000298 <__aeabi_dsub>
 8004128:	3530      	adds	r5, #48	@ 0x30
 800412a:	4602      	mov	r2, r0
 800412c:	460b      	mov	r3, r1
 800412e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004132:	f806 5b01 	strb.w	r5, [r6], #1
 8004136:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800413a:	f7fc fcd7 	bl	8000aec <__aeabi_dcmplt>
 800413e:	2800      	cmp	r0, #0
 8004140:	d171      	bne.n	8004226 <_dtoa_r+0x65e>
 8004142:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004146:	4911      	ldr	r1, [pc, #68]	@ (800418c <_dtoa_r+0x5c4>)
 8004148:	2000      	movs	r0, #0
 800414a:	f7fc f8a5 	bl	8000298 <__aeabi_dsub>
 800414e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004152:	f7fc fccb 	bl	8000aec <__aeabi_dcmplt>
 8004156:	2800      	cmp	r0, #0
 8004158:	f040 8095 	bne.w	8004286 <_dtoa_r+0x6be>
 800415c:	42a6      	cmp	r6, r4
 800415e:	f43f af50 	beq.w	8004002 <_dtoa_r+0x43a>
 8004162:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004166:	4b0a      	ldr	r3, [pc, #40]	@ (8004190 <_dtoa_r+0x5c8>)
 8004168:	2200      	movs	r2, #0
 800416a:	f7fc fa4d 	bl	8000608 <__aeabi_dmul>
 800416e:	4b08      	ldr	r3, [pc, #32]	@ (8004190 <_dtoa_r+0x5c8>)
 8004170:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004174:	2200      	movs	r2, #0
 8004176:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800417a:	f7fc fa45 	bl	8000608 <__aeabi_dmul>
 800417e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004182:	e7c4      	b.n	800410e <_dtoa_r+0x546>
 8004184:	08006820 	.word	0x08006820
 8004188:	080067f8 	.word	0x080067f8
 800418c:	3ff00000 	.word	0x3ff00000
 8004190:	40240000 	.word	0x40240000
 8004194:	401c0000 	.word	0x401c0000
 8004198:	40140000 	.word	0x40140000
 800419c:	3fe00000 	.word	0x3fe00000
 80041a0:	4631      	mov	r1, r6
 80041a2:	4628      	mov	r0, r5
 80041a4:	f7fc fa30 	bl	8000608 <__aeabi_dmul>
 80041a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80041ac:	9415      	str	r4, [sp, #84]	@ 0x54
 80041ae:	4656      	mov	r6, sl
 80041b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80041b4:	f7fc fcd8 	bl	8000b68 <__aeabi_d2iz>
 80041b8:	4605      	mov	r5, r0
 80041ba:	f7fc f9bb 	bl	8000534 <__aeabi_i2d>
 80041be:	4602      	mov	r2, r0
 80041c0:	460b      	mov	r3, r1
 80041c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80041c6:	f7fc f867 	bl	8000298 <__aeabi_dsub>
 80041ca:	3530      	adds	r5, #48	@ 0x30
 80041cc:	f806 5b01 	strb.w	r5, [r6], #1
 80041d0:	4602      	mov	r2, r0
 80041d2:	460b      	mov	r3, r1
 80041d4:	42a6      	cmp	r6, r4
 80041d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80041da:	f04f 0200 	mov.w	r2, #0
 80041de:	d124      	bne.n	800422a <_dtoa_r+0x662>
 80041e0:	4bac      	ldr	r3, [pc, #688]	@ (8004494 <_dtoa_r+0x8cc>)
 80041e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80041e6:	f7fc f859 	bl	800029c <__adddf3>
 80041ea:	4602      	mov	r2, r0
 80041ec:	460b      	mov	r3, r1
 80041ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80041f2:	f7fc fc99 	bl	8000b28 <__aeabi_dcmpgt>
 80041f6:	2800      	cmp	r0, #0
 80041f8:	d145      	bne.n	8004286 <_dtoa_r+0x6be>
 80041fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80041fe:	49a5      	ldr	r1, [pc, #660]	@ (8004494 <_dtoa_r+0x8cc>)
 8004200:	2000      	movs	r0, #0
 8004202:	f7fc f849 	bl	8000298 <__aeabi_dsub>
 8004206:	4602      	mov	r2, r0
 8004208:	460b      	mov	r3, r1
 800420a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800420e:	f7fc fc6d 	bl	8000aec <__aeabi_dcmplt>
 8004212:	2800      	cmp	r0, #0
 8004214:	f43f aef5 	beq.w	8004002 <_dtoa_r+0x43a>
 8004218:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800421a:	1e73      	subs	r3, r6, #1
 800421c:	9315      	str	r3, [sp, #84]	@ 0x54
 800421e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004222:	2b30      	cmp	r3, #48	@ 0x30
 8004224:	d0f8      	beq.n	8004218 <_dtoa_r+0x650>
 8004226:	9f04      	ldr	r7, [sp, #16]
 8004228:	e73e      	b.n	80040a8 <_dtoa_r+0x4e0>
 800422a:	4b9b      	ldr	r3, [pc, #620]	@ (8004498 <_dtoa_r+0x8d0>)
 800422c:	f7fc f9ec 	bl	8000608 <__aeabi_dmul>
 8004230:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004234:	e7bc      	b.n	80041b0 <_dtoa_r+0x5e8>
 8004236:	d10c      	bne.n	8004252 <_dtoa_r+0x68a>
 8004238:	4b98      	ldr	r3, [pc, #608]	@ (800449c <_dtoa_r+0x8d4>)
 800423a:	2200      	movs	r2, #0
 800423c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004240:	f7fc f9e2 	bl	8000608 <__aeabi_dmul>
 8004244:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004248:	f7fc fc64 	bl	8000b14 <__aeabi_dcmpge>
 800424c:	2800      	cmp	r0, #0
 800424e:	f000 8157 	beq.w	8004500 <_dtoa_r+0x938>
 8004252:	2400      	movs	r4, #0
 8004254:	4625      	mov	r5, r4
 8004256:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004258:	43db      	mvns	r3, r3
 800425a:	9304      	str	r3, [sp, #16]
 800425c:	4656      	mov	r6, sl
 800425e:	2700      	movs	r7, #0
 8004260:	4621      	mov	r1, r4
 8004262:	4658      	mov	r0, fp
 8004264:	f000 fbb4 	bl	80049d0 <_Bfree>
 8004268:	2d00      	cmp	r5, #0
 800426a:	d0dc      	beq.n	8004226 <_dtoa_r+0x65e>
 800426c:	b12f      	cbz	r7, 800427a <_dtoa_r+0x6b2>
 800426e:	42af      	cmp	r7, r5
 8004270:	d003      	beq.n	800427a <_dtoa_r+0x6b2>
 8004272:	4639      	mov	r1, r7
 8004274:	4658      	mov	r0, fp
 8004276:	f000 fbab 	bl	80049d0 <_Bfree>
 800427a:	4629      	mov	r1, r5
 800427c:	4658      	mov	r0, fp
 800427e:	f000 fba7 	bl	80049d0 <_Bfree>
 8004282:	e7d0      	b.n	8004226 <_dtoa_r+0x65e>
 8004284:	9704      	str	r7, [sp, #16]
 8004286:	4633      	mov	r3, r6
 8004288:	461e      	mov	r6, r3
 800428a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800428e:	2a39      	cmp	r2, #57	@ 0x39
 8004290:	d107      	bne.n	80042a2 <_dtoa_r+0x6da>
 8004292:	459a      	cmp	sl, r3
 8004294:	d1f8      	bne.n	8004288 <_dtoa_r+0x6c0>
 8004296:	9a04      	ldr	r2, [sp, #16]
 8004298:	3201      	adds	r2, #1
 800429a:	9204      	str	r2, [sp, #16]
 800429c:	2230      	movs	r2, #48	@ 0x30
 800429e:	f88a 2000 	strb.w	r2, [sl]
 80042a2:	781a      	ldrb	r2, [r3, #0]
 80042a4:	3201      	adds	r2, #1
 80042a6:	701a      	strb	r2, [r3, #0]
 80042a8:	e7bd      	b.n	8004226 <_dtoa_r+0x65e>
 80042aa:	4b7b      	ldr	r3, [pc, #492]	@ (8004498 <_dtoa_r+0x8d0>)
 80042ac:	2200      	movs	r2, #0
 80042ae:	f7fc f9ab 	bl	8000608 <__aeabi_dmul>
 80042b2:	2200      	movs	r2, #0
 80042b4:	2300      	movs	r3, #0
 80042b6:	4604      	mov	r4, r0
 80042b8:	460d      	mov	r5, r1
 80042ba:	f7fc fc0d 	bl	8000ad8 <__aeabi_dcmpeq>
 80042be:	2800      	cmp	r0, #0
 80042c0:	f43f aebb 	beq.w	800403a <_dtoa_r+0x472>
 80042c4:	e6f0      	b.n	80040a8 <_dtoa_r+0x4e0>
 80042c6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80042c8:	2a00      	cmp	r2, #0
 80042ca:	f000 80db 	beq.w	8004484 <_dtoa_r+0x8bc>
 80042ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80042d0:	2a01      	cmp	r2, #1
 80042d2:	f300 80bf 	bgt.w	8004454 <_dtoa_r+0x88c>
 80042d6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80042d8:	2a00      	cmp	r2, #0
 80042da:	f000 80b7 	beq.w	800444c <_dtoa_r+0x884>
 80042de:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80042e2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80042e4:	4646      	mov	r6, r8
 80042e6:	9a08      	ldr	r2, [sp, #32]
 80042e8:	2101      	movs	r1, #1
 80042ea:	441a      	add	r2, r3
 80042ec:	4658      	mov	r0, fp
 80042ee:	4498      	add	r8, r3
 80042f0:	9208      	str	r2, [sp, #32]
 80042f2:	f000 fc21 	bl	8004b38 <__i2b>
 80042f6:	4605      	mov	r5, r0
 80042f8:	b15e      	cbz	r6, 8004312 <_dtoa_r+0x74a>
 80042fa:	9b08      	ldr	r3, [sp, #32]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	dd08      	ble.n	8004312 <_dtoa_r+0x74a>
 8004300:	42b3      	cmp	r3, r6
 8004302:	9a08      	ldr	r2, [sp, #32]
 8004304:	bfa8      	it	ge
 8004306:	4633      	movge	r3, r6
 8004308:	eba8 0803 	sub.w	r8, r8, r3
 800430c:	1af6      	subs	r6, r6, r3
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	9308      	str	r3, [sp, #32]
 8004312:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004314:	b1f3      	cbz	r3, 8004354 <_dtoa_r+0x78c>
 8004316:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 80b7 	beq.w	800448c <_dtoa_r+0x8c4>
 800431e:	b18c      	cbz	r4, 8004344 <_dtoa_r+0x77c>
 8004320:	4629      	mov	r1, r5
 8004322:	4622      	mov	r2, r4
 8004324:	4658      	mov	r0, fp
 8004326:	f000 fcc7 	bl	8004cb8 <__pow5mult>
 800432a:	464a      	mov	r2, r9
 800432c:	4601      	mov	r1, r0
 800432e:	4605      	mov	r5, r0
 8004330:	4658      	mov	r0, fp
 8004332:	f000 fc17 	bl	8004b64 <__multiply>
 8004336:	4649      	mov	r1, r9
 8004338:	9004      	str	r0, [sp, #16]
 800433a:	4658      	mov	r0, fp
 800433c:	f000 fb48 	bl	80049d0 <_Bfree>
 8004340:	9b04      	ldr	r3, [sp, #16]
 8004342:	4699      	mov	r9, r3
 8004344:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004346:	1b1a      	subs	r2, r3, r4
 8004348:	d004      	beq.n	8004354 <_dtoa_r+0x78c>
 800434a:	4649      	mov	r1, r9
 800434c:	4658      	mov	r0, fp
 800434e:	f000 fcb3 	bl	8004cb8 <__pow5mult>
 8004352:	4681      	mov	r9, r0
 8004354:	2101      	movs	r1, #1
 8004356:	4658      	mov	r0, fp
 8004358:	f000 fbee 	bl	8004b38 <__i2b>
 800435c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800435e:	4604      	mov	r4, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	f000 81cf 	beq.w	8004704 <_dtoa_r+0xb3c>
 8004366:	461a      	mov	r2, r3
 8004368:	4601      	mov	r1, r0
 800436a:	4658      	mov	r0, fp
 800436c:	f000 fca4 	bl	8004cb8 <__pow5mult>
 8004370:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004372:	2b01      	cmp	r3, #1
 8004374:	4604      	mov	r4, r0
 8004376:	f300 8095 	bgt.w	80044a4 <_dtoa_r+0x8dc>
 800437a:	9b02      	ldr	r3, [sp, #8]
 800437c:	2b00      	cmp	r3, #0
 800437e:	f040 8087 	bne.w	8004490 <_dtoa_r+0x8c8>
 8004382:	9b03      	ldr	r3, [sp, #12]
 8004384:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004388:	2b00      	cmp	r3, #0
 800438a:	f040 8089 	bne.w	80044a0 <_dtoa_r+0x8d8>
 800438e:	9b03      	ldr	r3, [sp, #12]
 8004390:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004394:	0d1b      	lsrs	r3, r3, #20
 8004396:	051b      	lsls	r3, r3, #20
 8004398:	b12b      	cbz	r3, 80043a6 <_dtoa_r+0x7de>
 800439a:	9b08      	ldr	r3, [sp, #32]
 800439c:	3301      	adds	r3, #1
 800439e:	9308      	str	r3, [sp, #32]
 80043a0:	f108 0801 	add.w	r8, r8, #1
 80043a4:	2301      	movs	r3, #1
 80043a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80043a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f000 81b0 	beq.w	8004710 <_dtoa_r+0xb48>
 80043b0:	6923      	ldr	r3, [r4, #16]
 80043b2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80043b6:	6918      	ldr	r0, [r3, #16]
 80043b8:	f000 fb72 	bl	8004aa0 <__hi0bits>
 80043bc:	f1c0 0020 	rsb	r0, r0, #32
 80043c0:	9b08      	ldr	r3, [sp, #32]
 80043c2:	4418      	add	r0, r3
 80043c4:	f010 001f 	ands.w	r0, r0, #31
 80043c8:	d077      	beq.n	80044ba <_dtoa_r+0x8f2>
 80043ca:	f1c0 0320 	rsb	r3, r0, #32
 80043ce:	2b04      	cmp	r3, #4
 80043d0:	dd6b      	ble.n	80044aa <_dtoa_r+0x8e2>
 80043d2:	9b08      	ldr	r3, [sp, #32]
 80043d4:	f1c0 001c 	rsb	r0, r0, #28
 80043d8:	4403      	add	r3, r0
 80043da:	4480      	add	r8, r0
 80043dc:	4406      	add	r6, r0
 80043de:	9308      	str	r3, [sp, #32]
 80043e0:	f1b8 0f00 	cmp.w	r8, #0
 80043e4:	dd05      	ble.n	80043f2 <_dtoa_r+0x82a>
 80043e6:	4649      	mov	r1, r9
 80043e8:	4642      	mov	r2, r8
 80043ea:	4658      	mov	r0, fp
 80043ec:	f000 fcbe 	bl	8004d6c <__lshift>
 80043f0:	4681      	mov	r9, r0
 80043f2:	9b08      	ldr	r3, [sp, #32]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	dd05      	ble.n	8004404 <_dtoa_r+0x83c>
 80043f8:	4621      	mov	r1, r4
 80043fa:	461a      	mov	r2, r3
 80043fc:	4658      	mov	r0, fp
 80043fe:	f000 fcb5 	bl	8004d6c <__lshift>
 8004402:	4604      	mov	r4, r0
 8004404:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004406:	2b00      	cmp	r3, #0
 8004408:	d059      	beq.n	80044be <_dtoa_r+0x8f6>
 800440a:	4621      	mov	r1, r4
 800440c:	4648      	mov	r0, r9
 800440e:	f000 fd19 	bl	8004e44 <__mcmp>
 8004412:	2800      	cmp	r0, #0
 8004414:	da53      	bge.n	80044be <_dtoa_r+0x8f6>
 8004416:	1e7b      	subs	r3, r7, #1
 8004418:	9304      	str	r3, [sp, #16]
 800441a:	4649      	mov	r1, r9
 800441c:	2300      	movs	r3, #0
 800441e:	220a      	movs	r2, #10
 8004420:	4658      	mov	r0, fp
 8004422:	f000 faf7 	bl	8004a14 <__multadd>
 8004426:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004428:	4681      	mov	r9, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	f000 8172 	beq.w	8004714 <_dtoa_r+0xb4c>
 8004430:	2300      	movs	r3, #0
 8004432:	4629      	mov	r1, r5
 8004434:	220a      	movs	r2, #10
 8004436:	4658      	mov	r0, fp
 8004438:	f000 faec 	bl	8004a14 <__multadd>
 800443c:	9b00      	ldr	r3, [sp, #0]
 800443e:	2b00      	cmp	r3, #0
 8004440:	4605      	mov	r5, r0
 8004442:	dc67      	bgt.n	8004514 <_dtoa_r+0x94c>
 8004444:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004446:	2b02      	cmp	r3, #2
 8004448:	dc41      	bgt.n	80044ce <_dtoa_r+0x906>
 800444a:	e063      	b.n	8004514 <_dtoa_r+0x94c>
 800444c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800444e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004452:	e746      	b.n	80042e2 <_dtoa_r+0x71a>
 8004454:	9b07      	ldr	r3, [sp, #28]
 8004456:	1e5c      	subs	r4, r3, #1
 8004458:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800445a:	42a3      	cmp	r3, r4
 800445c:	bfbf      	itttt	lt
 800445e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004460:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8004462:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004464:	1ae3      	sublt	r3, r4, r3
 8004466:	bfb4      	ite	lt
 8004468:	18d2      	addlt	r2, r2, r3
 800446a:	1b1c      	subge	r4, r3, r4
 800446c:	9b07      	ldr	r3, [sp, #28]
 800446e:	bfbc      	itt	lt
 8004470:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8004472:	2400      	movlt	r4, #0
 8004474:	2b00      	cmp	r3, #0
 8004476:	bfb5      	itete	lt
 8004478:	eba8 0603 	sublt.w	r6, r8, r3
 800447c:	9b07      	ldrge	r3, [sp, #28]
 800447e:	2300      	movlt	r3, #0
 8004480:	4646      	movge	r6, r8
 8004482:	e730      	b.n	80042e6 <_dtoa_r+0x71e>
 8004484:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004486:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004488:	4646      	mov	r6, r8
 800448a:	e735      	b.n	80042f8 <_dtoa_r+0x730>
 800448c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800448e:	e75c      	b.n	800434a <_dtoa_r+0x782>
 8004490:	2300      	movs	r3, #0
 8004492:	e788      	b.n	80043a6 <_dtoa_r+0x7de>
 8004494:	3fe00000 	.word	0x3fe00000
 8004498:	40240000 	.word	0x40240000
 800449c:	40140000 	.word	0x40140000
 80044a0:	9b02      	ldr	r3, [sp, #8]
 80044a2:	e780      	b.n	80043a6 <_dtoa_r+0x7de>
 80044a4:	2300      	movs	r3, #0
 80044a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80044a8:	e782      	b.n	80043b0 <_dtoa_r+0x7e8>
 80044aa:	d099      	beq.n	80043e0 <_dtoa_r+0x818>
 80044ac:	9a08      	ldr	r2, [sp, #32]
 80044ae:	331c      	adds	r3, #28
 80044b0:	441a      	add	r2, r3
 80044b2:	4498      	add	r8, r3
 80044b4:	441e      	add	r6, r3
 80044b6:	9208      	str	r2, [sp, #32]
 80044b8:	e792      	b.n	80043e0 <_dtoa_r+0x818>
 80044ba:	4603      	mov	r3, r0
 80044bc:	e7f6      	b.n	80044ac <_dtoa_r+0x8e4>
 80044be:	9b07      	ldr	r3, [sp, #28]
 80044c0:	9704      	str	r7, [sp, #16]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	dc20      	bgt.n	8004508 <_dtoa_r+0x940>
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	dd1e      	ble.n	800450c <_dtoa_r+0x944>
 80044ce:	9b00      	ldr	r3, [sp, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f47f aec0 	bne.w	8004256 <_dtoa_r+0x68e>
 80044d6:	4621      	mov	r1, r4
 80044d8:	2205      	movs	r2, #5
 80044da:	4658      	mov	r0, fp
 80044dc:	f000 fa9a 	bl	8004a14 <__multadd>
 80044e0:	4601      	mov	r1, r0
 80044e2:	4604      	mov	r4, r0
 80044e4:	4648      	mov	r0, r9
 80044e6:	f000 fcad 	bl	8004e44 <__mcmp>
 80044ea:	2800      	cmp	r0, #0
 80044ec:	f77f aeb3 	ble.w	8004256 <_dtoa_r+0x68e>
 80044f0:	4656      	mov	r6, sl
 80044f2:	2331      	movs	r3, #49	@ 0x31
 80044f4:	f806 3b01 	strb.w	r3, [r6], #1
 80044f8:	9b04      	ldr	r3, [sp, #16]
 80044fa:	3301      	adds	r3, #1
 80044fc:	9304      	str	r3, [sp, #16]
 80044fe:	e6ae      	b.n	800425e <_dtoa_r+0x696>
 8004500:	9c07      	ldr	r4, [sp, #28]
 8004502:	9704      	str	r7, [sp, #16]
 8004504:	4625      	mov	r5, r4
 8004506:	e7f3      	b.n	80044f0 <_dtoa_r+0x928>
 8004508:	9b07      	ldr	r3, [sp, #28]
 800450a:	9300      	str	r3, [sp, #0]
 800450c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800450e:	2b00      	cmp	r3, #0
 8004510:	f000 8104 	beq.w	800471c <_dtoa_r+0xb54>
 8004514:	2e00      	cmp	r6, #0
 8004516:	dd05      	ble.n	8004524 <_dtoa_r+0x95c>
 8004518:	4629      	mov	r1, r5
 800451a:	4632      	mov	r2, r6
 800451c:	4658      	mov	r0, fp
 800451e:	f000 fc25 	bl	8004d6c <__lshift>
 8004522:	4605      	mov	r5, r0
 8004524:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004526:	2b00      	cmp	r3, #0
 8004528:	d05a      	beq.n	80045e0 <_dtoa_r+0xa18>
 800452a:	6869      	ldr	r1, [r5, #4]
 800452c:	4658      	mov	r0, fp
 800452e:	f000 fa0f 	bl	8004950 <_Balloc>
 8004532:	4606      	mov	r6, r0
 8004534:	b928      	cbnz	r0, 8004542 <_dtoa_r+0x97a>
 8004536:	4b84      	ldr	r3, [pc, #528]	@ (8004748 <_dtoa_r+0xb80>)
 8004538:	4602      	mov	r2, r0
 800453a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800453e:	f7ff bb5a 	b.w	8003bf6 <_dtoa_r+0x2e>
 8004542:	692a      	ldr	r2, [r5, #16]
 8004544:	3202      	adds	r2, #2
 8004546:	0092      	lsls	r2, r2, #2
 8004548:	f105 010c 	add.w	r1, r5, #12
 800454c:	300c      	adds	r0, #12
 800454e:	f000 ffaf 	bl	80054b0 <memcpy>
 8004552:	2201      	movs	r2, #1
 8004554:	4631      	mov	r1, r6
 8004556:	4658      	mov	r0, fp
 8004558:	f000 fc08 	bl	8004d6c <__lshift>
 800455c:	f10a 0301 	add.w	r3, sl, #1
 8004560:	9307      	str	r3, [sp, #28]
 8004562:	9b00      	ldr	r3, [sp, #0]
 8004564:	4453      	add	r3, sl
 8004566:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004568:	9b02      	ldr	r3, [sp, #8]
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	462f      	mov	r7, r5
 8004570:	930a      	str	r3, [sp, #40]	@ 0x28
 8004572:	4605      	mov	r5, r0
 8004574:	9b07      	ldr	r3, [sp, #28]
 8004576:	4621      	mov	r1, r4
 8004578:	3b01      	subs	r3, #1
 800457a:	4648      	mov	r0, r9
 800457c:	9300      	str	r3, [sp, #0]
 800457e:	f7ff fa9a 	bl	8003ab6 <quorem>
 8004582:	4639      	mov	r1, r7
 8004584:	9002      	str	r0, [sp, #8]
 8004586:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800458a:	4648      	mov	r0, r9
 800458c:	f000 fc5a 	bl	8004e44 <__mcmp>
 8004590:	462a      	mov	r2, r5
 8004592:	9008      	str	r0, [sp, #32]
 8004594:	4621      	mov	r1, r4
 8004596:	4658      	mov	r0, fp
 8004598:	f000 fc70 	bl	8004e7c <__mdiff>
 800459c:	68c2      	ldr	r2, [r0, #12]
 800459e:	4606      	mov	r6, r0
 80045a0:	bb02      	cbnz	r2, 80045e4 <_dtoa_r+0xa1c>
 80045a2:	4601      	mov	r1, r0
 80045a4:	4648      	mov	r0, r9
 80045a6:	f000 fc4d 	bl	8004e44 <__mcmp>
 80045aa:	4602      	mov	r2, r0
 80045ac:	4631      	mov	r1, r6
 80045ae:	4658      	mov	r0, fp
 80045b0:	920e      	str	r2, [sp, #56]	@ 0x38
 80045b2:	f000 fa0d 	bl	80049d0 <_Bfree>
 80045b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80045b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80045ba:	9e07      	ldr	r6, [sp, #28]
 80045bc:	ea43 0102 	orr.w	r1, r3, r2
 80045c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80045c2:	4319      	orrs	r1, r3
 80045c4:	d110      	bne.n	80045e8 <_dtoa_r+0xa20>
 80045c6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80045ca:	d029      	beq.n	8004620 <_dtoa_r+0xa58>
 80045cc:	9b08      	ldr	r3, [sp, #32]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	dd02      	ble.n	80045d8 <_dtoa_r+0xa10>
 80045d2:	9b02      	ldr	r3, [sp, #8]
 80045d4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80045d8:	9b00      	ldr	r3, [sp, #0]
 80045da:	f883 8000 	strb.w	r8, [r3]
 80045de:	e63f      	b.n	8004260 <_dtoa_r+0x698>
 80045e0:	4628      	mov	r0, r5
 80045e2:	e7bb      	b.n	800455c <_dtoa_r+0x994>
 80045e4:	2201      	movs	r2, #1
 80045e6:	e7e1      	b.n	80045ac <_dtoa_r+0x9e4>
 80045e8:	9b08      	ldr	r3, [sp, #32]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	db04      	blt.n	80045f8 <_dtoa_r+0xa30>
 80045ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80045f0:	430b      	orrs	r3, r1
 80045f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80045f4:	430b      	orrs	r3, r1
 80045f6:	d120      	bne.n	800463a <_dtoa_r+0xa72>
 80045f8:	2a00      	cmp	r2, #0
 80045fa:	dded      	ble.n	80045d8 <_dtoa_r+0xa10>
 80045fc:	4649      	mov	r1, r9
 80045fe:	2201      	movs	r2, #1
 8004600:	4658      	mov	r0, fp
 8004602:	f000 fbb3 	bl	8004d6c <__lshift>
 8004606:	4621      	mov	r1, r4
 8004608:	4681      	mov	r9, r0
 800460a:	f000 fc1b 	bl	8004e44 <__mcmp>
 800460e:	2800      	cmp	r0, #0
 8004610:	dc03      	bgt.n	800461a <_dtoa_r+0xa52>
 8004612:	d1e1      	bne.n	80045d8 <_dtoa_r+0xa10>
 8004614:	f018 0f01 	tst.w	r8, #1
 8004618:	d0de      	beq.n	80045d8 <_dtoa_r+0xa10>
 800461a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800461e:	d1d8      	bne.n	80045d2 <_dtoa_r+0xa0a>
 8004620:	9a00      	ldr	r2, [sp, #0]
 8004622:	2339      	movs	r3, #57	@ 0x39
 8004624:	7013      	strb	r3, [r2, #0]
 8004626:	4633      	mov	r3, r6
 8004628:	461e      	mov	r6, r3
 800462a:	3b01      	subs	r3, #1
 800462c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004630:	2a39      	cmp	r2, #57	@ 0x39
 8004632:	d052      	beq.n	80046da <_dtoa_r+0xb12>
 8004634:	3201      	adds	r2, #1
 8004636:	701a      	strb	r2, [r3, #0]
 8004638:	e612      	b.n	8004260 <_dtoa_r+0x698>
 800463a:	2a00      	cmp	r2, #0
 800463c:	dd07      	ble.n	800464e <_dtoa_r+0xa86>
 800463e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004642:	d0ed      	beq.n	8004620 <_dtoa_r+0xa58>
 8004644:	9a00      	ldr	r2, [sp, #0]
 8004646:	f108 0301 	add.w	r3, r8, #1
 800464a:	7013      	strb	r3, [r2, #0]
 800464c:	e608      	b.n	8004260 <_dtoa_r+0x698>
 800464e:	9b07      	ldr	r3, [sp, #28]
 8004650:	9a07      	ldr	r2, [sp, #28]
 8004652:	f803 8c01 	strb.w	r8, [r3, #-1]
 8004656:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004658:	4293      	cmp	r3, r2
 800465a:	d028      	beq.n	80046ae <_dtoa_r+0xae6>
 800465c:	4649      	mov	r1, r9
 800465e:	2300      	movs	r3, #0
 8004660:	220a      	movs	r2, #10
 8004662:	4658      	mov	r0, fp
 8004664:	f000 f9d6 	bl	8004a14 <__multadd>
 8004668:	42af      	cmp	r7, r5
 800466a:	4681      	mov	r9, r0
 800466c:	f04f 0300 	mov.w	r3, #0
 8004670:	f04f 020a 	mov.w	r2, #10
 8004674:	4639      	mov	r1, r7
 8004676:	4658      	mov	r0, fp
 8004678:	d107      	bne.n	800468a <_dtoa_r+0xac2>
 800467a:	f000 f9cb 	bl	8004a14 <__multadd>
 800467e:	4607      	mov	r7, r0
 8004680:	4605      	mov	r5, r0
 8004682:	9b07      	ldr	r3, [sp, #28]
 8004684:	3301      	adds	r3, #1
 8004686:	9307      	str	r3, [sp, #28]
 8004688:	e774      	b.n	8004574 <_dtoa_r+0x9ac>
 800468a:	f000 f9c3 	bl	8004a14 <__multadd>
 800468e:	4629      	mov	r1, r5
 8004690:	4607      	mov	r7, r0
 8004692:	2300      	movs	r3, #0
 8004694:	220a      	movs	r2, #10
 8004696:	4658      	mov	r0, fp
 8004698:	f000 f9bc 	bl	8004a14 <__multadd>
 800469c:	4605      	mov	r5, r0
 800469e:	e7f0      	b.n	8004682 <_dtoa_r+0xaba>
 80046a0:	9b00      	ldr	r3, [sp, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	bfcc      	ite	gt
 80046a6:	461e      	movgt	r6, r3
 80046a8:	2601      	movle	r6, #1
 80046aa:	4456      	add	r6, sl
 80046ac:	2700      	movs	r7, #0
 80046ae:	4649      	mov	r1, r9
 80046b0:	2201      	movs	r2, #1
 80046b2:	4658      	mov	r0, fp
 80046b4:	f000 fb5a 	bl	8004d6c <__lshift>
 80046b8:	4621      	mov	r1, r4
 80046ba:	4681      	mov	r9, r0
 80046bc:	f000 fbc2 	bl	8004e44 <__mcmp>
 80046c0:	2800      	cmp	r0, #0
 80046c2:	dcb0      	bgt.n	8004626 <_dtoa_r+0xa5e>
 80046c4:	d102      	bne.n	80046cc <_dtoa_r+0xb04>
 80046c6:	f018 0f01 	tst.w	r8, #1
 80046ca:	d1ac      	bne.n	8004626 <_dtoa_r+0xa5e>
 80046cc:	4633      	mov	r3, r6
 80046ce:	461e      	mov	r6, r3
 80046d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80046d4:	2a30      	cmp	r2, #48	@ 0x30
 80046d6:	d0fa      	beq.n	80046ce <_dtoa_r+0xb06>
 80046d8:	e5c2      	b.n	8004260 <_dtoa_r+0x698>
 80046da:	459a      	cmp	sl, r3
 80046dc:	d1a4      	bne.n	8004628 <_dtoa_r+0xa60>
 80046de:	9b04      	ldr	r3, [sp, #16]
 80046e0:	3301      	adds	r3, #1
 80046e2:	9304      	str	r3, [sp, #16]
 80046e4:	2331      	movs	r3, #49	@ 0x31
 80046e6:	f88a 3000 	strb.w	r3, [sl]
 80046ea:	e5b9      	b.n	8004260 <_dtoa_r+0x698>
 80046ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80046ee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800474c <_dtoa_r+0xb84>
 80046f2:	b11b      	cbz	r3, 80046fc <_dtoa_r+0xb34>
 80046f4:	f10a 0308 	add.w	r3, sl, #8
 80046f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80046fa:	6013      	str	r3, [r2, #0]
 80046fc:	4650      	mov	r0, sl
 80046fe:	b019      	add	sp, #100	@ 0x64
 8004700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004704:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004706:	2b01      	cmp	r3, #1
 8004708:	f77f ae37 	ble.w	800437a <_dtoa_r+0x7b2>
 800470c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800470e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004710:	2001      	movs	r0, #1
 8004712:	e655      	b.n	80043c0 <_dtoa_r+0x7f8>
 8004714:	9b00      	ldr	r3, [sp, #0]
 8004716:	2b00      	cmp	r3, #0
 8004718:	f77f aed6 	ble.w	80044c8 <_dtoa_r+0x900>
 800471c:	4656      	mov	r6, sl
 800471e:	4621      	mov	r1, r4
 8004720:	4648      	mov	r0, r9
 8004722:	f7ff f9c8 	bl	8003ab6 <quorem>
 8004726:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800472a:	f806 8b01 	strb.w	r8, [r6], #1
 800472e:	9b00      	ldr	r3, [sp, #0]
 8004730:	eba6 020a 	sub.w	r2, r6, sl
 8004734:	4293      	cmp	r3, r2
 8004736:	ddb3      	ble.n	80046a0 <_dtoa_r+0xad8>
 8004738:	4649      	mov	r1, r9
 800473a:	2300      	movs	r3, #0
 800473c:	220a      	movs	r2, #10
 800473e:	4658      	mov	r0, fp
 8004740:	f000 f968 	bl	8004a14 <__multadd>
 8004744:	4681      	mov	r9, r0
 8004746:	e7ea      	b.n	800471e <_dtoa_r+0xb56>
 8004748:	0800677c 	.word	0x0800677c
 800474c:	08006700 	.word	0x08006700

08004750 <_free_r>:
 8004750:	b538      	push	{r3, r4, r5, lr}
 8004752:	4605      	mov	r5, r0
 8004754:	2900      	cmp	r1, #0
 8004756:	d041      	beq.n	80047dc <_free_r+0x8c>
 8004758:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800475c:	1f0c      	subs	r4, r1, #4
 800475e:	2b00      	cmp	r3, #0
 8004760:	bfb8      	it	lt
 8004762:	18e4      	addlt	r4, r4, r3
 8004764:	f000 f8e8 	bl	8004938 <__malloc_lock>
 8004768:	4a1d      	ldr	r2, [pc, #116]	@ (80047e0 <_free_r+0x90>)
 800476a:	6813      	ldr	r3, [r2, #0]
 800476c:	b933      	cbnz	r3, 800477c <_free_r+0x2c>
 800476e:	6063      	str	r3, [r4, #4]
 8004770:	6014      	str	r4, [r2, #0]
 8004772:	4628      	mov	r0, r5
 8004774:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004778:	f000 b8e4 	b.w	8004944 <__malloc_unlock>
 800477c:	42a3      	cmp	r3, r4
 800477e:	d908      	bls.n	8004792 <_free_r+0x42>
 8004780:	6820      	ldr	r0, [r4, #0]
 8004782:	1821      	adds	r1, r4, r0
 8004784:	428b      	cmp	r3, r1
 8004786:	bf01      	itttt	eq
 8004788:	6819      	ldreq	r1, [r3, #0]
 800478a:	685b      	ldreq	r3, [r3, #4]
 800478c:	1809      	addeq	r1, r1, r0
 800478e:	6021      	streq	r1, [r4, #0]
 8004790:	e7ed      	b.n	800476e <_free_r+0x1e>
 8004792:	461a      	mov	r2, r3
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	b10b      	cbz	r3, 800479c <_free_r+0x4c>
 8004798:	42a3      	cmp	r3, r4
 800479a:	d9fa      	bls.n	8004792 <_free_r+0x42>
 800479c:	6811      	ldr	r1, [r2, #0]
 800479e:	1850      	adds	r0, r2, r1
 80047a0:	42a0      	cmp	r0, r4
 80047a2:	d10b      	bne.n	80047bc <_free_r+0x6c>
 80047a4:	6820      	ldr	r0, [r4, #0]
 80047a6:	4401      	add	r1, r0
 80047a8:	1850      	adds	r0, r2, r1
 80047aa:	4283      	cmp	r3, r0
 80047ac:	6011      	str	r1, [r2, #0]
 80047ae:	d1e0      	bne.n	8004772 <_free_r+0x22>
 80047b0:	6818      	ldr	r0, [r3, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	6053      	str	r3, [r2, #4]
 80047b6:	4408      	add	r0, r1
 80047b8:	6010      	str	r0, [r2, #0]
 80047ba:	e7da      	b.n	8004772 <_free_r+0x22>
 80047bc:	d902      	bls.n	80047c4 <_free_r+0x74>
 80047be:	230c      	movs	r3, #12
 80047c0:	602b      	str	r3, [r5, #0]
 80047c2:	e7d6      	b.n	8004772 <_free_r+0x22>
 80047c4:	6820      	ldr	r0, [r4, #0]
 80047c6:	1821      	adds	r1, r4, r0
 80047c8:	428b      	cmp	r3, r1
 80047ca:	bf04      	itt	eq
 80047cc:	6819      	ldreq	r1, [r3, #0]
 80047ce:	685b      	ldreq	r3, [r3, #4]
 80047d0:	6063      	str	r3, [r4, #4]
 80047d2:	bf04      	itt	eq
 80047d4:	1809      	addeq	r1, r1, r0
 80047d6:	6021      	streq	r1, [r4, #0]
 80047d8:	6054      	str	r4, [r2, #4]
 80047da:	e7ca      	b.n	8004772 <_free_r+0x22>
 80047dc:	bd38      	pop	{r3, r4, r5, pc}
 80047de:	bf00      	nop
 80047e0:	20000358 	.word	0x20000358

080047e4 <malloc>:
 80047e4:	4b02      	ldr	r3, [pc, #8]	@ (80047f0 <malloc+0xc>)
 80047e6:	4601      	mov	r1, r0
 80047e8:	6818      	ldr	r0, [r3, #0]
 80047ea:	f000 b825 	b.w	8004838 <_malloc_r>
 80047ee:	bf00      	nop
 80047f0:	20000024 	.word	0x20000024

080047f4 <sbrk_aligned>:
 80047f4:	b570      	push	{r4, r5, r6, lr}
 80047f6:	4e0f      	ldr	r6, [pc, #60]	@ (8004834 <sbrk_aligned+0x40>)
 80047f8:	460c      	mov	r4, r1
 80047fa:	6831      	ldr	r1, [r6, #0]
 80047fc:	4605      	mov	r5, r0
 80047fe:	b911      	cbnz	r1, 8004806 <sbrk_aligned+0x12>
 8004800:	f000 fe46 	bl	8005490 <_sbrk_r>
 8004804:	6030      	str	r0, [r6, #0]
 8004806:	4621      	mov	r1, r4
 8004808:	4628      	mov	r0, r5
 800480a:	f000 fe41 	bl	8005490 <_sbrk_r>
 800480e:	1c43      	adds	r3, r0, #1
 8004810:	d103      	bne.n	800481a <sbrk_aligned+0x26>
 8004812:	f04f 34ff 	mov.w	r4, #4294967295
 8004816:	4620      	mov	r0, r4
 8004818:	bd70      	pop	{r4, r5, r6, pc}
 800481a:	1cc4      	adds	r4, r0, #3
 800481c:	f024 0403 	bic.w	r4, r4, #3
 8004820:	42a0      	cmp	r0, r4
 8004822:	d0f8      	beq.n	8004816 <sbrk_aligned+0x22>
 8004824:	1a21      	subs	r1, r4, r0
 8004826:	4628      	mov	r0, r5
 8004828:	f000 fe32 	bl	8005490 <_sbrk_r>
 800482c:	3001      	adds	r0, #1
 800482e:	d1f2      	bne.n	8004816 <sbrk_aligned+0x22>
 8004830:	e7ef      	b.n	8004812 <sbrk_aligned+0x1e>
 8004832:	bf00      	nop
 8004834:	20000354 	.word	0x20000354

08004838 <_malloc_r>:
 8004838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800483c:	1ccd      	adds	r5, r1, #3
 800483e:	f025 0503 	bic.w	r5, r5, #3
 8004842:	3508      	adds	r5, #8
 8004844:	2d0c      	cmp	r5, #12
 8004846:	bf38      	it	cc
 8004848:	250c      	movcc	r5, #12
 800484a:	2d00      	cmp	r5, #0
 800484c:	4606      	mov	r6, r0
 800484e:	db01      	blt.n	8004854 <_malloc_r+0x1c>
 8004850:	42a9      	cmp	r1, r5
 8004852:	d904      	bls.n	800485e <_malloc_r+0x26>
 8004854:	230c      	movs	r3, #12
 8004856:	6033      	str	r3, [r6, #0]
 8004858:	2000      	movs	r0, #0
 800485a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800485e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004934 <_malloc_r+0xfc>
 8004862:	f000 f869 	bl	8004938 <__malloc_lock>
 8004866:	f8d8 3000 	ldr.w	r3, [r8]
 800486a:	461c      	mov	r4, r3
 800486c:	bb44      	cbnz	r4, 80048c0 <_malloc_r+0x88>
 800486e:	4629      	mov	r1, r5
 8004870:	4630      	mov	r0, r6
 8004872:	f7ff ffbf 	bl	80047f4 <sbrk_aligned>
 8004876:	1c43      	adds	r3, r0, #1
 8004878:	4604      	mov	r4, r0
 800487a:	d158      	bne.n	800492e <_malloc_r+0xf6>
 800487c:	f8d8 4000 	ldr.w	r4, [r8]
 8004880:	4627      	mov	r7, r4
 8004882:	2f00      	cmp	r7, #0
 8004884:	d143      	bne.n	800490e <_malloc_r+0xd6>
 8004886:	2c00      	cmp	r4, #0
 8004888:	d04b      	beq.n	8004922 <_malloc_r+0xea>
 800488a:	6823      	ldr	r3, [r4, #0]
 800488c:	4639      	mov	r1, r7
 800488e:	4630      	mov	r0, r6
 8004890:	eb04 0903 	add.w	r9, r4, r3
 8004894:	f000 fdfc 	bl	8005490 <_sbrk_r>
 8004898:	4581      	cmp	r9, r0
 800489a:	d142      	bne.n	8004922 <_malloc_r+0xea>
 800489c:	6821      	ldr	r1, [r4, #0]
 800489e:	1a6d      	subs	r5, r5, r1
 80048a0:	4629      	mov	r1, r5
 80048a2:	4630      	mov	r0, r6
 80048a4:	f7ff ffa6 	bl	80047f4 <sbrk_aligned>
 80048a8:	3001      	adds	r0, #1
 80048aa:	d03a      	beq.n	8004922 <_malloc_r+0xea>
 80048ac:	6823      	ldr	r3, [r4, #0]
 80048ae:	442b      	add	r3, r5
 80048b0:	6023      	str	r3, [r4, #0]
 80048b2:	f8d8 3000 	ldr.w	r3, [r8]
 80048b6:	685a      	ldr	r2, [r3, #4]
 80048b8:	bb62      	cbnz	r2, 8004914 <_malloc_r+0xdc>
 80048ba:	f8c8 7000 	str.w	r7, [r8]
 80048be:	e00f      	b.n	80048e0 <_malloc_r+0xa8>
 80048c0:	6822      	ldr	r2, [r4, #0]
 80048c2:	1b52      	subs	r2, r2, r5
 80048c4:	d420      	bmi.n	8004908 <_malloc_r+0xd0>
 80048c6:	2a0b      	cmp	r2, #11
 80048c8:	d917      	bls.n	80048fa <_malloc_r+0xc2>
 80048ca:	1961      	adds	r1, r4, r5
 80048cc:	42a3      	cmp	r3, r4
 80048ce:	6025      	str	r5, [r4, #0]
 80048d0:	bf18      	it	ne
 80048d2:	6059      	strne	r1, [r3, #4]
 80048d4:	6863      	ldr	r3, [r4, #4]
 80048d6:	bf08      	it	eq
 80048d8:	f8c8 1000 	streq.w	r1, [r8]
 80048dc:	5162      	str	r2, [r4, r5]
 80048de:	604b      	str	r3, [r1, #4]
 80048e0:	4630      	mov	r0, r6
 80048e2:	f000 f82f 	bl	8004944 <__malloc_unlock>
 80048e6:	f104 000b 	add.w	r0, r4, #11
 80048ea:	1d23      	adds	r3, r4, #4
 80048ec:	f020 0007 	bic.w	r0, r0, #7
 80048f0:	1ac2      	subs	r2, r0, r3
 80048f2:	bf1c      	itt	ne
 80048f4:	1a1b      	subne	r3, r3, r0
 80048f6:	50a3      	strne	r3, [r4, r2]
 80048f8:	e7af      	b.n	800485a <_malloc_r+0x22>
 80048fa:	6862      	ldr	r2, [r4, #4]
 80048fc:	42a3      	cmp	r3, r4
 80048fe:	bf0c      	ite	eq
 8004900:	f8c8 2000 	streq.w	r2, [r8]
 8004904:	605a      	strne	r2, [r3, #4]
 8004906:	e7eb      	b.n	80048e0 <_malloc_r+0xa8>
 8004908:	4623      	mov	r3, r4
 800490a:	6864      	ldr	r4, [r4, #4]
 800490c:	e7ae      	b.n	800486c <_malloc_r+0x34>
 800490e:	463c      	mov	r4, r7
 8004910:	687f      	ldr	r7, [r7, #4]
 8004912:	e7b6      	b.n	8004882 <_malloc_r+0x4a>
 8004914:	461a      	mov	r2, r3
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	42a3      	cmp	r3, r4
 800491a:	d1fb      	bne.n	8004914 <_malloc_r+0xdc>
 800491c:	2300      	movs	r3, #0
 800491e:	6053      	str	r3, [r2, #4]
 8004920:	e7de      	b.n	80048e0 <_malloc_r+0xa8>
 8004922:	230c      	movs	r3, #12
 8004924:	6033      	str	r3, [r6, #0]
 8004926:	4630      	mov	r0, r6
 8004928:	f000 f80c 	bl	8004944 <__malloc_unlock>
 800492c:	e794      	b.n	8004858 <_malloc_r+0x20>
 800492e:	6005      	str	r5, [r0, #0]
 8004930:	e7d6      	b.n	80048e0 <_malloc_r+0xa8>
 8004932:	bf00      	nop
 8004934:	20000358 	.word	0x20000358

08004938 <__malloc_lock>:
 8004938:	4801      	ldr	r0, [pc, #4]	@ (8004940 <__malloc_lock+0x8>)
 800493a:	f7ff b8ba 	b.w	8003ab2 <__retarget_lock_acquire_recursive>
 800493e:	bf00      	nop
 8004940:	20000350 	.word	0x20000350

08004944 <__malloc_unlock>:
 8004944:	4801      	ldr	r0, [pc, #4]	@ (800494c <__malloc_unlock+0x8>)
 8004946:	f7ff b8b5 	b.w	8003ab4 <__retarget_lock_release_recursive>
 800494a:	bf00      	nop
 800494c:	20000350 	.word	0x20000350

08004950 <_Balloc>:
 8004950:	b570      	push	{r4, r5, r6, lr}
 8004952:	69c6      	ldr	r6, [r0, #28]
 8004954:	4604      	mov	r4, r0
 8004956:	460d      	mov	r5, r1
 8004958:	b976      	cbnz	r6, 8004978 <_Balloc+0x28>
 800495a:	2010      	movs	r0, #16
 800495c:	f7ff ff42 	bl	80047e4 <malloc>
 8004960:	4602      	mov	r2, r0
 8004962:	61e0      	str	r0, [r4, #28]
 8004964:	b920      	cbnz	r0, 8004970 <_Balloc+0x20>
 8004966:	4b18      	ldr	r3, [pc, #96]	@ (80049c8 <_Balloc+0x78>)
 8004968:	4818      	ldr	r0, [pc, #96]	@ (80049cc <_Balloc+0x7c>)
 800496a:	216b      	movs	r1, #107	@ 0x6b
 800496c:	f000 fdae 	bl	80054cc <__assert_func>
 8004970:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004974:	6006      	str	r6, [r0, #0]
 8004976:	60c6      	str	r6, [r0, #12]
 8004978:	69e6      	ldr	r6, [r4, #28]
 800497a:	68f3      	ldr	r3, [r6, #12]
 800497c:	b183      	cbz	r3, 80049a0 <_Balloc+0x50>
 800497e:	69e3      	ldr	r3, [r4, #28]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004986:	b9b8      	cbnz	r0, 80049b8 <_Balloc+0x68>
 8004988:	2101      	movs	r1, #1
 800498a:	fa01 f605 	lsl.w	r6, r1, r5
 800498e:	1d72      	adds	r2, r6, #5
 8004990:	0092      	lsls	r2, r2, #2
 8004992:	4620      	mov	r0, r4
 8004994:	f000 fdb8 	bl	8005508 <_calloc_r>
 8004998:	b160      	cbz	r0, 80049b4 <_Balloc+0x64>
 800499a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800499e:	e00e      	b.n	80049be <_Balloc+0x6e>
 80049a0:	2221      	movs	r2, #33	@ 0x21
 80049a2:	2104      	movs	r1, #4
 80049a4:	4620      	mov	r0, r4
 80049a6:	f000 fdaf 	bl	8005508 <_calloc_r>
 80049aa:	69e3      	ldr	r3, [r4, #28]
 80049ac:	60f0      	str	r0, [r6, #12]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1e4      	bne.n	800497e <_Balloc+0x2e>
 80049b4:	2000      	movs	r0, #0
 80049b6:	bd70      	pop	{r4, r5, r6, pc}
 80049b8:	6802      	ldr	r2, [r0, #0]
 80049ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80049be:	2300      	movs	r3, #0
 80049c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80049c4:	e7f7      	b.n	80049b6 <_Balloc+0x66>
 80049c6:	bf00      	nop
 80049c8:	0800670d 	.word	0x0800670d
 80049cc:	0800678d 	.word	0x0800678d

080049d0 <_Bfree>:
 80049d0:	b570      	push	{r4, r5, r6, lr}
 80049d2:	69c6      	ldr	r6, [r0, #28]
 80049d4:	4605      	mov	r5, r0
 80049d6:	460c      	mov	r4, r1
 80049d8:	b976      	cbnz	r6, 80049f8 <_Bfree+0x28>
 80049da:	2010      	movs	r0, #16
 80049dc:	f7ff ff02 	bl	80047e4 <malloc>
 80049e0:	4602      	mov	r2, r0
 80049e2:	61e8      	str	r0, [r5, #28]
 80049e4:	b920      	cbnz	r0, 80049f0 <_Bfree+0x20>
 80049e6:	4b09      	ldr	r3, [pc, #36]	@ (8004a0c <_Bfree+0x3c>)
 80049e8:	4809      	ldr	r0, [pc, #36]	@ (8004a10 <_Bfree+0x40>)
 80049ea:	218f      	movs	r1, #143	@ 0x8f
 80049ec:	f000 fd6e 	bl	80054cc <__assert_func>
 80049f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80049f4:	6006      	str	r6, [r0, #0]
 80049f6:	60c6      	str	r6, [r0, #12]
 80049f8:	b13c      	cbz	r4, 8004a0a <_Bfree+0x3a>
 80049fa:	69eb      	ldr	r3, [r5, #28]
 80049fc:	6862      	ldr	r2, [r4, #4]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004a04:	6021      	str	r1, [r4, #0]
 8004a06:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004a0a:	bd70      	pop	{r4, r5, r6, pc}
 8004a0c:	0800670d 	.word	0x0800670d
 8004a10:	0800678d 	.word	0x0800678d

08004a14 <__multadd>:
 8004a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a18:	690d      	ldr	r5, [r1, #16]
 8004a1a:	4607      	mov	r7, r0
 8004a1c:	460c      	mov	r4, r1
 8004a1e:	461e      	mov	r6, r3
 8004a20:	f101 0c14 	add.w	ip, r1, #20
 8004a24:	2000      	movs	r0, #0
 8004a26:	f8dc 3000 	ldr.w	r3, [ip]
 8004a2a:	b299      	uxth	r1, r3
 8004a2c:	fb02 6101 	mla	r1, r2, r1, r6
 8004a30:	0c1e      	lsrs	r6, r3, #16
 8004a32:	0c0b      	lsrs	r3, r1, #16
 8004a34:	fb02 3306 	mla	r3, r2, r6, r3
 8004a38:	b289      	uxth	r1, r1
 8004a3a:	3001      	adds	r0, #1
 8004a3c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004a40:	4285      	cmp	r5, r0
 8004a42:	f84c 1b04 	str.w	r1, [ip], #4
 8004a46:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004a4a:	dcec      	bgt.n	8004a26 <__multadd+0x12>
 8004a4c:	b30e      	cbz	r6, 8004a92 <__multadd+0x7e>
 8004a4e:	68a3      	ldr	r3, [r4, #8]
 8004a50:	42ab      	cmp	r3, r5
 8004a52:	dc19      	bgt.n	8004a88 <__multadd+0x74>
 8004a54:	6861      	ldr	r1, [r4, #4]
 8004a56:	4638      	mov	r0, r7
 8004a58:	3101      	adds	r1, #1
 8004a5a:	f7ff ff79 	bl	8004950 <_Balloc>
 8004a5e:	4680      	mov	r8, r0
 8004a60:	b928      	cbnz	r0, 8004a6e <__multadd+0x5a>
 8004a62:	4602      	mov	r2, r0
 8004a64:	4b0c      	ldr	r3, [pc, #48]	@ (8004a98 <__multadd+0x84>)
 8004a66:	480d      	ldr	r0, [pc, #52]	@ (8004a9c <__multadd+0x88>)
 8004a68:	21ba      	movs	r1, #186	@ 0xba
 8004a6a:	f000 fd2f 	bl	80054cc <__assert_func>
 8004a6e:	6922      	ldr	r2, [r4, #16]
 8004a70:	3202      	adds	r2, #2
 8004a72:	f104 010c 	add.w	r1, r4, #12
 8004a76:	0092      	lsls	r2, r2, #2
 8004a78:	300c      	adds	r0, #12
 8004a7a:	f000 fd19 	bl	80054b0 <memcpy>
 8004a7e:	4621      	mov	r1, r4
 8004a80:	4638      	mov	r0, r7
 8004a82:	f7ff ffa5 	bl	80049d0 <_Bfree>
 8004a86:	4644      	mov	r4, r8
 8004a88:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004a8c:	3501      	adds	r5, #1
 8004a8e:	615e      	str	r6, [r3, #20]
 8004a90:	6125      	str	r5, [r4, #16]
 8004a92:	4620      	mov	r0, r4
 8004a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a98:	0800677c 	.word	0x0800677c
 8004a9c:	0800678d 	.word	0x0800678d

08004aa0 <__hi0bits>:
 8004aa0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	bf36      	itet	cc
 8004aa8:	0403      	lslcc	r3, r0, #16
 8004aaa:	2000      	movcs	r0, #0
 8004aac:	2010      	movcc	r0, #16
 8004aae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ab2:	bf3c      	itt	cc
 8004ab4:	021b      	lslcc	r3, r3, #8
 8004ab6:	3008      	addcc	r0, #8
 8004ab8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004abc:	bf3c      	itt	cc
 8004abe:	011b      	lslcc	r3, r3, #4
 8004ac0:	3004      	addcc	r0, #4
 8004ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ac6:	bf3c      	itt	cc
 8004ac8:	009b      	lslcc	r3, r3, #2
 8004aca:	3002      	addcc	r0, #2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	db05      	blt.n	8004adc <__hi0bits+0x3c>
 8004ad0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004ad4:	f100 0001 	add.w	r0, r0, #1
 8004ad8:	bf08      	it	eq
 8004ada:	2020      	moveq	r0, #32
 8004adc:	4770      	bx	lr

08004ade <__lo0bits>:
 8004ade:	6803      	ldr	r3, [r0, #0]
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	f013 0007 	ands.w	r0, r3, #7
 8004ae6:	d00b      	beq.n	8004b00 <__lo0bits+0x22>
 8004ae8:	07d9      	lsls	r1, r3, #31
 8004aea:	d421      	bmi.n	8004b30 <__lo0bits+0x52>
 8004aec:	0798      	lsls	r0, r3, #30
 8004aee:	bf49      	itett	mi
 8004af0:	085b      	lsrmi	r3, r3, #1
 8004af2:	089b      	lsrpl	r3, r3, #2
 8004af4:	2001      	movmi	r0, #1
 8004af6:	6013      	strmi	r3, [r2, #0]
 8004af8:	bf5c      	itt	pl
 8004afa:	6013      	strpl	r3, [r2, #0]
 8004afc:	2002      	movpl	r0, #2
 8004afe:	4770      	bx	lr
 8004b00:	b299      	uxth	r1, r3
 8004b02:	b909      	cbnz	r1, 8004b08 <__lo0bits+0x2a>
 8004b04:	0c1b      	lsrs	r3, r3, #16
 8004b06:	2010      	movs	r0, #16
 8004b08:	b2d9      	uxtb	r1, r3
 8004b0a:	b909      	cbnz	r1, 8004b10 <__lo0bits+0x32>
 8004b0c:	3008      	adds	r0, #8
 8004b0e:	0a1b      	lsrs	r3, r3, #8
 8004b10:	0719      	lsls	r1, r3, #28
 8004b12:	bf04      	itt	eq
 8004b14:	091b      	lsreq	r3, r3, #4
 8004b16:	3004      	addeq	r0, #4
 8004b18:	0799      	lsls	r1, r3, #30
 8004b1a:	bf04      	itt	eq
 8004b1c:	089b      	lsreq	r3, r3, #2
 8004b1e:	3002      	addeq	r0, #2
 8004b20:	07d9      	lsls	r1, r3, #31
 8004b22:	d403      	bmi.n	8004b2c <__lo0bits+0x4e>
 8004b24:	085b      	lsrs	r3, r3, #1
 8004b26:	f100 0001 	add.w	r0, r0, #1
 8004b2a:	d003      	beq.n	8004b34 <__lo0bits+0x56>
 8004b2c:	6013      	str	r3, [r2, #0]
 8004b2e:	4770      	bx	lr
 8004b30:	2000      	movs	r0, #0
 8004b32:	4770      	bx	lr
 8004b34:	2020      	movs	r0, #32
 8004b36:	4770      	bx	lr

08004b38 <__i2b>:
 8004b38:	b510      	push	{r4, lr}
 8004b3a:	460c      	mov	r4, r1
 8004b3c:	2101      	movs	r1, #1
 8004b3e:	f7ff ff07 	bl	8004950 <_Balloc>
 8004b42:	4602      	mov	r2, r0
 8004b44:	b928      	cbnz	r0, 8004b52 <__i2b+0x1a>
 8004b46:	4b05      	ldr	r3, [pc, #20]	@ (8004b5c <__i2b+0x24>)
 8004b48:	4805      	ldr	r0, [pc, #20]	@ (8004b60 <__i2b+0x28>)
 8004b4a:	f240 1145 	movw	r1, #325	@ 0x145
 8004b4e:	f000 fcbd 	bl	80054cc <__assert_func>
 8004b52:	2301      	movs	r3, #1
 8004b54:	6144      	str	r4, [r0, #20]
 8004b56:	6103      	str	r3, [r0, #16]
 8004b58:	bd10      	pop	{r4, pc}
 8004b5a:	bf00      	nop
 8004b5c:	0800677c 	.word	0x0800677c
 8004b60:	0800678d 	.word	0x0800678d

08004b64 <__multiply>:
 8004b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b68:	4614      	mov	r4, r2
 8004b6a:	690a      	ldr	r2, [r1, #16]
 8004b6c:	6923      	ldr	r3, [r4, #16]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	bfa8      	it	ge
 8004b72:	4623      	movge	r3, r4
 8004b74:	460f      	mov	r7, r1
 8004b76:	bfa4      	itt	ge
 8004b78:	460c      	movge	r4, r1
 8004b7a:	461f      	movge	r7, r3
 8004b7c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004b80:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8004b84:	68a3      	ldr	r3, [r4, #8]
 8004b86:	6861      	ldr	r1, [r4, #4]
 8004b88:	eb0a 0609 	add.w	r6, sl, r9
 8004b8c:	42b3      	cmp	r3, r6
 8004b8e:	b085      	sub	sp, #20
 8004b90:	bfb8      	it	lt
 8004b92:	3101      	addlt	r1, #1
 8004b94:	f7ff fedc 	bl	8004950 <_Balloc>
 8004b98:	b930      	cbnz	r0, 8004ba8 <__multiply+0x44>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	4b44      	ldr	r3, [pc, #272]	@ (8004cb0 <__multiply+0x14c>)
 8004b9e:	4845      	ldr	r0, [pc, #276]	@ (8004cb4 <__multiply+0x150>)
 8004ba0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004ba4:	f000 fc92 	bl	80054cc <__assert_func>
 8004ba8:	f100 0514 	add.w	r5, r0, #20
 8004bac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004bb0:	462b      	mov	r3, r5
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	4543      	cmp	r3, r8
 8004bb6:	d321      	bcc.n	8004bfc <__multiply+0x98>
 8004bb8:	f107 0114 	add.w	r1, r7, #20
 8004bbc:	f104 0214 	add.w	r2, r4, #20
 8004bc0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8004bc4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8004bc8:	9302      	str	r3, [sp, #8]
 8004bca:	1b13      	subs	r3, r2, r4
 8004bcc:	3b15      	subs	r3, #21
 8004bce:	f023 0303 	bic.w	r3, r3, #3
 8004bd2:	3304      	adds	r3, #4
 8004bd4:	f104 0715 	add.w	r7, r4, #21
 8004bd8:	42ba      	cmp	r2, r7
 8004bda:	bf38      	it	cc
 8004bdc:	2304      	movcc	r3, #4
 8004bde:	9301      	str	r3, [sp, #4]
 8004be0:	9b02      	ldr	r3, [sp, #8]
 8004be2:	9103      	str	r1, [sp, #12]
 8004be4:	428b      	cmp	r3, r1
 8004be6:	d80c      	bhi.n	8004c02 <__multiply+0x9e>
 8004be8:	2e00      	cmp	r6, #0
 8004bea:	dd03      	ble.n	8004bf4 <__multiply+0x90>
 8004bec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d05b      	beq.n	8004cac <__multiply+0x148>
 8004bf4:	6106      	str	r6, [r0, #16]
 8004bf6:	b005      	add	sp, #20
 8004bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bfc:	f843 2b04 	str.w	r2, [r3], #4
 8004c00:	e7d8      	b.n	8004bb4 <__multiply+0x50>
 8004c02:	f8b1 a000 	ldrh.w	sl, [r1]
 8004c06:	f1ba 0f00 	cmp.w	sl, #0
 8004c0a:	d024      	beq.n	8004c56 <__multiply+0xf2>
 8004c0c:	f104 0e14 	add.w	lr, r4, #20
 8004c10:	46a9      	mov	r9, r5
 8004c12:	f04f 0c00 	mov.w	ip, #0
 8004c16:	f85e 7b04 	ldr.w	r7, [lr], #4
 8004c1a:	f8d9 3000 	ldr.w	r3, [r9]
 8004c1e:	fa1f fb87 	uxth.w	fp, r7
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	fb0a 330b 	mla	r3, sl, fp, r3
 8004c28:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8004c2c:	f8d9 7000 	ldr.w	r7, [r9]
 8004c30:	4463      	add	r3, ip
 8004c32:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8004c36:	fb0a c70b 	mla	r7, sl, fp, ip
 8004c3a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004c44:	4572      	cmp	r2, lr
 8004c46:	f849 3b04 	str.w	r3, [r9], #4
 8004c4a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8004c4e:	d8e2      	bhi.n	8004c16 <__multiply+0xb2>
 8004c50:	9b01      	ldr	r3, [sp, #4]
 8004c52:	f845 c003 	str.w	ip, [r5, r3]
 8004c56:	9b03      	ldr	r3, [sp, #12]
 8004c58:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8004c5c:	3104      	adds	r1, #4
 8004c5e:	f1b9 0f00 	cmp.w	r9, #0
 8004c62:	d021      	beq.n	8004ca8 <__multiply+0x144>
 8004c64:	682b      	ldr	r3, [r5, #0]
 8004c66:	f104 0c14 	add.w	ip, r4, #20
 8004c6a:	46ae      	mov	lr, r5
 8004c6c:	f04f 0a00 	mov.w	sl, #0
 8004c70:	f8bc b000 	ldrh.w	fp, [ip]
 8004c74:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8004c78:	fb09 770b 	mla	r7, r9, fp, r7
 8004c7c:	4457      	add	r7, sl
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004c84:	f84e 3b04 	str.w	r3, [lr], #4
 8004c88:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004c8c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004c90:	f8be 3000 	ldrh.w	r3, [lr]
 8004c94:	fb09 330a 	mla	r3, r9, sl, r3
 8004c98:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8004c9c:	4562      	cmp	r2, ip
 8004c9e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004ca2:	d8e5      	bhi.n	8004c70 <__multiply+0x10c>
 8004ca4:	9f01      	ldr	r7, [sp, #4]
 8004ca6:	51eb      	str	r3, [r5, r7]
 8004ca8:	3504      	adds	r5, #4
 8004caa:	e799      	b.n	8004be0 <__multiply+0x7c>
 8004cac:	3e01      	subs	r6, #1
 8004cae:	e79b      	b.n	8004be8 <__multiply+0x84>
 8004cb0:	0800677c 	.word	0x0800677c
 8004cb4:	0800678d 	.word	0x0800678d

08004cb8 <__pow5mult>:
 8004cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cbc:	4615      	mov	r5, r2
 8004cbe:	f012 0203 	ands.w	r2, r2, #3
 8004cc2:	4607      	mov	r7, r0
 8004cc4:	460e      	mov	r6, r1
 8004cc6:	d007      	beq.n	8004cd8 <__pow5mult+0x20>
 8004cc8:	4c25      	ldr	r4, [pc, #148]	@ (8004d60 <__pow5mult+0xa8>)
 8004cca:	3a01      	subs	r2, #1
 8004ccc:	2300      	movs	r3, #0
 8004cce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004cd2:	f7ff fe9f 	bl	8004a14 <__multadd>
 8004cd6:	4606      	mov	r6, r0
 8004cd8:	10ad      	asrs	r5, r5, #2
 8004cda:	d03d      	beq.n	8004d58 <__pow5mult+0xa0>
 8004cdc:	69fc      	ldr	r4, [r7, #28]
 8004cde:	b97c      	cbnz	r4, 8004d00 <__pow5mult+0x48>
 8004ce0:	2010      	movs	r0, #16
 8004ce2:	f7ff fd7f 	bl	80047e4 <malloc>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	61f8      	str	r0, [r7, #28]
 8004cea:	b928      	cbnz	r0, 8004cf8 <__pow5mult+0x40>
 8004cec:	4b1d      	ldr	r3, [pc, #116]	@ (8004d64 <__pow5mult+0xac>)
 8004cee:	481e      	ldr	r0, [pc, #120]	@ (8004d68 <__pow5mult+0xb0>)
 8004cf0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8004cf4:	f000 fbea 	bl	80054cc <__assert_func>
 8004cf8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004cfc:	6004      	str	r4, [r0, #0]
 8004cfe:	60c4      	str	r4, [r0, #12]
 8004d00:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8004d04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004d08:	b94c      	cbnz	r4, 8004d1e <__pow5mult+0x66>
 8004d0a:	f240 2171 	movw	r1, #625	@ 0x271
 8004d0e:	4638      	mov	r0, r7
 8004d10:	f7ff ff12 	bl	8004b38 <__i2b>
 8004d14:	2300      	movs	r3, #0
 8004d16:	f8c8 0008 	str.w	r0, [r8, #8]
 8004d1a:	4604      	mov	r4, r0
 8004d1c:	6003      	str	r3, [r0, #0]
 8004d1e:	f04f 0900 	mov.w	r9, #0
 8004d22:	07eb      	lsls	r3, r5, #31
 8004d24:	d50a      	bpl.n	8004d3c <__pow5mult+0x84>
 8004d26:	4631      	mov	r1, r6
 8004d28:	4622      	mov	r2, r4
 8004d2a:	4638      	mov	r0, r7
 8004d2c:	f7ff ff1a 	bl	8004b64 <__multiply>
 8004d30:	4631      	mov	r1, r6
 8004d32:	4680      	mov	r8, r0
 8004d34:	4638      	mov	r0, r7
 8004d36:	f7ff fe4b 	bl	80049d0 <_Bfree>
 8004d3a:	4646      	mov	r6, r8
 8004d3c:	106d      	asrs	r5, r5, #1
 8004d3e:	d00b      	beq.n	8004d58 <__pow5mult+0xa0>
 8004d40:	6820      	ldr	r0, [r4, #0]
 8004d42:	b938      	cbnz	r0, 8004d54 <__pow5mult+0x9c>
 8004d44:	4622      	mov	r2, r4
 8004d46:	4621      	mov	r1, r4
 8004d48:	4638      	mov	r0, r7
 8004d4a:	f7ff ff0b 	bl	8004b64 <__multiply>
 8004d4e:	6020      	str	r0, [r4, #0]
 8004d50:	f8c0 9000 	str.w	r9, [r0]
 8004d54:	4604      	mov	r4, r0
 8004d56:	e7e4      	b.n	8004d22 <__pow5mult+0x6a>
 8004d58:	4630      	mov	r0, r6
 8004d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d5e:	bf00      	nop
 8004d60:	080067e8 	.word	0x080067e8
 8004d64:	0800670d 	.word	0x0800670d
 8004d68:	0800678d 	.word	0x0800678d

08004d6c <__lshift>:
 8004d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d70:	460c      	mov	r4, r1
 8004d72:	6849      	ldr	r1, [r1, #4]
 8004d74:	6923      	ldr	r3, [r4, #16]
 8004d76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004d7a:	68a3      	ldr	r3, [r4, #8]
 8004d7c:	4607      	mov	r7, r0
 8004d7e:	4691      	mov	r9, r2
 8004d80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004d84:	f108 0601 	add.w	r6, r8, #1
 8004d88:	42b3      	cmp	r3, r6
 8004d8a:	db0b      	blt.n	8004da4 <__lshift+0x38>
 8004d8c:	4638      	mov	r0, r7
 8004d8e:	f7ff fddf 	bl	8004950 <_Balloc>
 8004d92:	4605      	mov	r5, r0
 8004d94:	b948      	cbnz	r0, 8004daa <__lshift+0x3e>
 8004d96:	4602      	mov	r2, r0
 8004d98:	4b28      	ldr	r3, [pc, #160]	@ (8004e3c <__lshift+0xd0>)
 8004d9a:	4829      	ldr	r0, [pc, #164]	@ (8004e40 <__lshift+0xd4>)
 8004d9c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8004da0:	f000 fb94 	bl	80054cc <__assert_func>
 8004da4:	3101      	adds	r1, #1
 8004da6:	005b      	lsls	r3, r3, #1
 8004da8:	e7ee      	b.n	8004d88 <__lshift+0x1c>
 8004daa:	2300      	movs	r3, #0
 8004dac:	f100 0114 	add.w	r1, r0, #20
 8004db0:	f100 0210 	add.w	r2, r0, #16
 8004db4:	4618      	mov	r0, r3
 8004db6:	4553      	cmp	r3, sl
 8004db8:	db33      	blt.n	8004e22 <__lshift+0xb6>
 8004dba:	6920      	ldr	r0, [r4, #16]
 8004dbc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004dc0:	f104 0314 	add.w	r3, r4, #20
 8004dc4:	f019 091f 	ands.w	r9, r9, #31
 8004dc8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004dcc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004dd0:	d02b      	beq.n	8004e2a <__lshift+0xbe>
 8004dd2:	f1c9 0e20 	rsb	lr, r9, #32
 8004dd6:	468a      	mov	sl, r1
 8004dd8:	2200      	movs	r2, #0
 8004dda:	6818      	ldr	r0, [r3, #0]
 8004ddc:	fa00 f009 	lsl.w	r0, r0, r9
 8004de0:	4310      	orrs	r0, r2
 8004de2:	f84a 0b04 	str.w	r0, [sl], #4
 8004de6:	f853 2b04 	ldr.w	r2, [r3], #4
 8004dea:	459c      	cmp	ip, r3
 8004dec:	fa22 f20e 	lsr.w	r2, r2, lr
 8004df0:	d8f3      	bhi.n	8004dda <__lshift+0x6e>
 8004df2:	ebac 0304 	sub.w	r3, ip, r4
 8004df6:	3b15      	subs	r3, #21
 8004df8:	f023 0303 	bic.w	r3, r3, #3
 8004dfc:	3304      	adds	r3, #4
 8004dfe:	f104 0015 	add.w	r0, r4, #21
 8004e02:	4584      	cmp	ip, r0
 8004e04:	bf38      	it	cc
 8004e06:	2304      	movcc	r3, #4
 8004e08:	50ca      	str	r2, [r1, r3]
 8004e0a:	b10a      	cbz	r2, 8004e10 <__lshift+0xa4>
 8004e0c:	f108 0602 	add.w	r6, r8, #2
 8004e10:	3e01      	subs	r6, #1
 8004e12:	4638      	mov	r0, r7
 8004e14:	612e      	str	r6, [r5, #16]
 8004e16:	4621      	mov	r1, r4
 8004e18:	f7ff fdda 	bl	80049d0 <_Bfree>
 8004e1c:	4628      	mov	r0, r5
 8004e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e22:	f842 0f04 	str.w	r0, [r2, #4]!
 8004e26:	3301      	adds	r3, #1
 8004e28:	e7c5      	b.n	8004db6 <__lshift+0x4a>
 8004e2a:	3904      	subs	r1, #4
 8004e2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e30:	f841 2f04 	str.w	r2, [r1, #4]!
 8004e34:	459c      	cmp	ip, r3
 8004e36:	d8f9      	bhi.n	8004e2c <__lshift+0xc0>
 8004e38:	e7ea      	b.n	8004e10 <__lshift+0xa4>
 8004e3a:	bf00      	nop
 8004e3c:	0800677c 	.word	0x0800677c
 8004e40:	0800678d 	.word	0x0800678d

08004e44 <__mcmp>:
 8004e44:	690a      	ldr	r2, [r1, #16]
 8004e46:	4603      	mov	r3, r0
 8004e48:	6900      	ldr	r0, [r0, #16]
 8004e4a:	1a80      	subs	r0, r0, r2
 8004e4c:	b530      	push	{r4, r5, lr}
 8004e4e:	d10e      	bne.n	8004e6e <__mcmp+0x2a>
 8004e50:	3314      	adds	r3, #20
 8004e52:	3114      	adds	r1, #20
 8004e54:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004e58:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004e5c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004e60:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004e64:	4295      	cmp	r5, r2
 8004e66:	d003      	beq.n	8004e70 <__mcmp+0x2c>
 8004e68:	d205      	bcs.n	8004e76 <__mcmp+0x32>
 8004e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8004e6e:	bd30      	pop	{r4, r5, pc}
 8004e70:	42a3      	cmp	r3, r4
 8004e72:	d3f3      	bcc.n	8004e5c <__mcmp+0x18>
 8004e74:	e7fb      	b.n	8004e6e <__mcmp+0x2a>
 8004e76:	2001      	movs	r0, #1
 8004e78:	e7f9      	b.n	8004e6e <__mcmp+0x2a>
	...

08004e7c <__mdiff>:
 8004e7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e80:	4689      	mov	r9, r1
 8004e82:	4606      	mov	r6, r0
 8004e84:	4611      	mov	r1, r2
 8004e86:	4648      	mov	r0, r9
 8004e88:	4614      	mov	r4, r2
 8004e8a:	f7ff ffdb 	bl	8004e44 <__mcmp>
 8004e8e:	1e05      	subs	r5, r0, #0
 8004e90:	d112      	bne.n	8004eb8 <__mdiff+0x3c>
 8004e92:	4629      	mov	r1, r5
 8004e94:	4630      	mov	r0, r6
 8004e96:	f7ff fd5b 	bl	8004950 <_Balloc>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	b928      	cbnz	r0, 8004eaa <__mdiff+0x2e>
 8004e9e:	4b3f      	ldr	r3, [pc, #252]	@ (8004f9c <__mdiff+0x120>)
 8004ea0:	f240 2137 	movw	r1, #567	@ 0x237
 8004ea4:	483e      	ldr	r0, [pc, #248]	@ (8004fa0 <__mdiff+0x124>)
 8004ea6:	f000 fb11 	bl	80054cc <__assert_func>
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004eb0:	4610      	mov	r0, r2
 8004eb2:	b003      	add	sp, #12
 8004eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eb8:	bfbc      	itt	lt
 8004eba:	464b      	movlt	r3, r9
 8004ebc:	46a1      	movlt	r9, r4
 8004ebe:	4630      	mov	r0, r6
 8004ec0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004ec4:	bfba      	itte	lt
 8004ec6:	461c      	movlt	r4, r3
 8004ec8:	2501      	movlt	r5, #1
 8004eca:	2500      	movge	r5, #0
 8004ecc:	f7ff fd40 	bl	8004950 <_Balloc>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	b918      	cbnz	r0, 8004edc <__mdiff+0x60>
 8004ed4:	4b31      	ldr	r3, [pc, #196]	@ (8004f9c <__mdiff+0x120>)
 8004ed6:	f240 2145 	movw	r1, #581	@ 0x245
 8004eda:	e7e3      	b.n	8004ea4 <__mdiff+0x28>
 8004edc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004ee0:	6926      	ldr	r6, [r4, #16]
 8004ee2:	60c5      	str	r5, [r0, #12]
 8004ee4:	f109 0310 	add.w	r3, r9, #16
 8004ee8:	f109 0514 	add.w	r5, r9, #20
 8004eec:	f104 0e14 	add.w	lr, r4, #20
 8004ef0:	f100 0b14 	add.w	fp, r0, #20
 8004ef4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8004ef8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8004efc:	9301      	str	r3, [sp, #4]
 8004efe:	46d9      	mov	r9, fp
 8004f00:	f04f 0c00 	mov.w	ip, #0
 8004f04:	9b01      	ldr	r3, [sp, #4]
 8004f06:	f85e 0b04 	ldr.w	r0, [lr], #4
 8004f0a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8004f0e:	9301      	str	r3, [sp, #4]
 8004f10:	fa1f f38a 	uxth.w	r3, sl
 8004f14:	4619      	mov	r1, r3
 8004f16:	b283      	uxth	r3, r0
 8004f18:	1acb      	subs	r3, r1, r3
 8004f1a:	0c00      	lsrs	r0, r0, #16
 8004f1c:	4463      	add	r3, ip
 8004f1e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8004f22:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004f2c:	4576      	cmp	r6, lr
 8004f2e:	f849 3b04 	str.w	r3, [r9], #4
 8004f32:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004f36:	d8e5      	bhi.n	8004f04 <__mdiff+0x88>
 8004f38:	1b33      	subs	r3, r6, r4
 8004f3a:	3b15      	subs	r3, #21
 8004f3c:	f023 0303 	bic.w	r3, r3, #3
 8004f40:	3415      	adds	r4, #21
 8004f42:	3304      	adds	r3, #4
 8004f44:	42a6      	cmp	r6, r4
 8004f46:	bf38      	it	cc
 8004f48:	2304      	movcc	r3, #4
 8004f4a:	441d      	add	r5, r3
 8004f4c:	445b      	add	r3, fp
 8004f4e:	461e      	mov	r6, r3
 8004f50:	462c      	mov	r4, r5
 8004f52:	4544      	cmp	r4, r8
 8004f54:	d30e      	bcc.n	8004f74 <__mdiff+0xf8>
 8004f56:	f108 0103 	add.w	r1, r8, #3
 8004f5a:	1b49      	subs	r1, r1, r5
 8004f5c:	f021 0103 	bic.w	r1, r1, #3
 8004f60:	3d03      	subs	r5, #3
 8004f62:	45a8      	cmp	r8, r5
 8004f64:	bf38      	it	cc
 8004f66:	2100      	movcc	r1, #0
 8004f68:	440b      	add	r3, r1
 8004f6a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004f6e:	b191      	cbz	r1, 8004f96 <__mdiff+0x11a>
 8004f70:	6117      	str	r7, [r2, #16]
 8004f72:	e79d      	b.n	8004eb0 <__mdiff+0x34>
 8004f74:	f854 1b04 	ldr.w	r1, [r4], #4
 8004f78:	46e6      	mov	lr, ip
 8004f7a:	0c08      	lsrs	r0, r1, #16
 8004f7c:	fa1c fc81 	uxtah	ip, ip, r1
 8004f80:	4471      	add	r1, lr
 8004f82:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8004f86:	b289      	uxth	r1, r1
 8004f88:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004f8c:	f846 1b04 	str.w	r1, [r6], #4
 8004f90:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004f94:	e7dd      	b.n	8004f52 <__mdiff+0xd6>
 8004f96:	3f01      	subs	r7, #1
 8004f98:	e7e7      	b.n	8004f6a <__mdiff+0xee>
 8004f9a:	bf00      	nop
 8004f9c:	0800677c 	.word	0x0800677c
 8004fa0:	0800678d 	.word	0x0800678d

08004fa4 <__d2b>:
 8004fa4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004fa8:	460f      	mov	r7, r1
 8004faa:	2101      	movs	r1, #1
 8004fac:	ec59 8b10 	vmov	r8, r9, d0
 8004fb0:	4616      	mov	r6, r2
 8004fb2:	f7ff fccd 	bl	8004950 <_Balloc>
 8004fb6:	4604      	mov	r4, r0
 8004fb8:	b930      	cbnz	r0, 8004fc8 <__d2b+0x24>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	4b23      	ldr	r3, [pc, #140]	@ (800504c <__d2b+0xa8>)
 8004fbe:	4824      	ldr	r0, [pc, #144]	@ (8005050 <__d2b+0xac>)
 8004fc0:	f240 310f 	movw	r1, #783	@ 0x30f
 8004fc4:	f000 fa82 	bl	80054cc <__assert_func>
 8004fc8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004fcc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004fd0:	b10d      	cbz	r5, 8004fd6 <__d2b+0x32>
 8004fd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004fd6:	9301      	str	r3, [sp, #4]
 8004fd8:	f1b8 0300 	subs.w	r3, r8, #0
 8004fdc:	d023      	beq.n	8005026 <__d2b+0x82>
 8004fde:	4668      	mov	r0, sp
 8004fe0:	9300      	str	r3, [sp, #0]
 8004fe2:	f7ff fd7c 	bl	8004ade <__lo0bits>
 8004fe6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8004fea:	b1d0      	cbz	r0, 8005022 <__d2b+0x7e>
 8004fec:	f1c0 0320 	rsb	r3, r0, #32
 8004ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff4:	430b      	orrs	r3, r1
 8004ff6:	40c2      	lsrs	r2, r0
 8004ff8:	6163      	str	r3, [r4, #20]
 8004ffa:	9201      	str	r2, [sp, #4]
 8004ffc:	9b01      	ldr	r3, [sp, #4]
 8004ffe:	61a3      	str	r3, [r4, #24]
 8005000:	2b00      	cmp	r3, #0
 8005002:	bf0c      	ite	eq
 8005004:	2201      	moveq	r2, #1
 8005006:	2202      	movne	r2, #2
 8005008:	6122      	str	r2, [r4, #16]
 800500a:	b1a5      	cbz	r5, 8005036 <__d2b+0x92>
 800500c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005010:	4405      	add	r5, r0
 8005012:	603d      	str	r5, [r7, #0]
 8005014:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005018:	6030      	str	r0, [r6, #0]
 800501a:	4620      	mov	r0, r4
 800501c:	b003      	add	sp, #12
 800501e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005022:	6161      	str	r1, [r4, #20]
 8005024:	e7ea      	b.n	8004ffc <__d2b+0x58>
 8005026:	a801      	add	r0, sp, #4
 8005028:	f7ff fd59 	bl	8004ade <__lo0bits>
 800502c:	9b01      	ldr	r3, [sp, #4]
 800502e:	6163      	str	r3, [r4, #20]
 8005030:	3020      	adds	r0, #32
 8005032:	2201      	movs	r2, #1
 8005034:	e7e8      	b.n	8005008 <__d2b+0x64>
 8005036:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800503a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800503e:	6038      	str	r0, [r7, #0]
 8005040:	6918      	ldr	r0, [r3, #16]
 8005042:	f7ff fd2d 	bl	8004aa0 <__hi0bits>
 8005046:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800504a:	e7e5      	b.n	8005018 <__d2b+0x74>
 800504c:	0800677c 	.word	0x0800677c
 8005050:	0800678d 	.word	0x0800678d

08005054 <__ssputs_r>:
 8005054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005058:	688e      	ldr	r6, [r1, #8]
 800505a:	461f      	mov	r7, r3
 800505c:	42be      	cmp	r6, r7
 800505e:	680b      	ldr	r3, [r1, #0]
 8005060:	4682      	mov	sl, r0
 8005062:	460c      	mov	r4, r1
 8005064:	4690      	mov	r8, r2
 8005066:	d82d      	bhi.n	80050c4 <__ssputs_r+0x70>
 8005068:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800506c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005070:	d026      	beq.n	80050c0 <__ssputs_r+0x6c>
 8005072:	6965      	ldr	r5, [r4, #20]
 8005074:	6909      	ldr	r1, [r1, #16]
 8005076:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800507a:	eba3 0901 	sub.w	r9, r3, r1
 800507e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005082:	1c7b      	adds	r3, r7, #1
 8005084:	444b      	add	r3, r9
 8005086:	106d      	asrs	r5, r5, #1
 8005088:	429d      	cmp	r5, r3
 800508a:	bf38      	it	cc
 800508c:	461d      	movcc	r5, r3
 800508e:	0553      	lsls	r3, r2, #21
 8005090:	d527      	bpl.n	80050e2 <__ssputs_r+0x8e>
 8005092:	4629      	mov	r1, r5
 8005094:	f7ff fbd0 	bl	8004838 <_malloc_r>
 8005098:	4606      	mov	r6, r0
 800509a:	b360      	cbz	r0, 80050f6 <__ssputs_r+0xa2>
 800509c:	6921      	ldr	r1, [r4, #16]
 800509e:	464a      	mov	r2, r9
 80050a0:	f000 fa06 	bl	80054b0 <memcpy>
 80050a4:	89a3      	ldrh	r3, [r4, #12]
 80050a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80050aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050ae:	81a3      	strh	r3, [r4, #12]
 80050b0:	6126      	str	r6, [r4, #16]
 80050b2:	6165      	str	r5, [r4, #20]
 80050b4:	444e      	add	r6, r9
 80050b6:	eba5 0509 	sub.w	r5, r5, r9
 80050ba:	6026      	str	r6, [r4, #0]
 80050bc:	60a5      	str	r5, [r4, #8]
 80050be:	463e      	mov	r6, r7
 80050c0:	42be      	cmp	r6, r7
 80050c2:	d900      	bls.n	80050c6 <__ssputs_r+0x72>
 80050c4:	463e      	mov	r6, r7
 80050c6:	6820      	ldr	r0, [r4, #0]
 80050c8:	4632      	mov	r2, r6
 80050ca:	4641      	mov	r1, r8
 80050cc:	f000 f9c6 	bl	800545c <memmove>
 80050d0:	68a3      	ldr	r3, [r4, #8]
 80050d2:	1b9b      	subs	r3, r3, r6
 80050d4:	60a3      	str	r3, [r4, #8]
 80050d6:	6823      	ldr	r3, [r4, #0]
 80050d8:	4433      	add	r3, r6
 80050da:	6023      	str	r3, [r4, #0]
 80050dc:	2000      	movs	r0, #0
 80050de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050e2:	462a      	mov	r2, r5
 80050e4:	f000 fa36 	bl	8005554 <_realloc_r>
 80050e8:	4606      	mov	r6, r0
 80050ea:	2800      	cmp	r0, #0
 80050ec:	d1e0      	bne.n	80050b0 <__ssputs_r+0x5c>
 80050ee:	6921      	ldr	r1, [r4, #16]
 80050f0:	4650      	mov	r0, sl
 80050f2:	f7ff fb2d 	bl	8004750 <_free_r>
 80050f6:	230c      	movs	r3, #12
 80050f8:	f8ca 3000 	str.w	r3, [sl]
 80050fc:	89a3      	ldrh	r3, [r4, #12]
 80050fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005102:	81a3      	strh	r3, [r4, #12]
 8005104:	f04f 30ff 	mov.w	r0, #4294967295
 8005108:	e7e9      	b.n	80050de <__ssputs_r+0x8a>
	...

0800510c <_svfiprintf_r>:
 800510c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005110:	4698      	mov	r8, r3
 8005112:	898b      	ldrh	r3, [r1, #12]
 8005114:	061b      	lsls	r3, r3, #24
 8005116:	b09d      	sub	sp, #116	@ 0x74
 8005118:	4607      	mov	r7, r0
 800511a:	460d      	mov	r5, r1
 800511c:	4614      	mov	r4, r2
 800511e:	d510      	bpl.n	8005142 <_svfiprintf_r+0x36>
 8005120:	690b      	ldr	r3, [r1, #16]
 8005122:	b973      	cbnz	r3, 8005142 <_svfiprintf_r+0x36>
 8005124:	2140      	movs	r1, #64	@ 0x40
 8005126:	f7ff fb87 	bl	8004838 <_malloc_r>
 800512a:	6028      	str	r0, [r5, #0]
 800512c:	6128      	str	r0, [r5, #16]
 800512e:	b930      	cbnz	r0, 800513e <_svfiprintf_r+0x32>
 8005130:	230c      	movs	r3, #12
 8005132:	603b      	str	r3, [r7, #0]
 8005134:	f04f 30ff 	mov.w	r0, #4294967295
 8005138:	b01d      	add	sp, #116	@ 0x74
 800513a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800513e:	2340      	movs	r3, #64	@ 0x40
 8005140:	616b      	str	r3, [r5, #20]
 8005142:	2300      	movs	r3, #0
 8005144:	9309      	str	r3, [sp, #36]	@ 0x24
 8005146:	2320      	movs	r3, #32
 8005148:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800514c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005150:	2330      	movs	r3, #48	@ 0x30
 8005152:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80052f0 <_svfiprintf_r+0x1e4>
 8005156:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800515a:	f04f 0901 	mov.w	r9, #1
 800515e:	4623      	mov	r3, r4
 8005160:	469a      	mov	sl, r3
 8005162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005166:	b10a      	cbz	r2, 800516c <_svfiprintf_r+0x60>
 8005168:	2a25      	cmp	r2, #37	@ 0x25
 800516a:	d1f9      	bne.n	8005160 <_svfiprintf_r+0x54>
 800516c:	ebba 0b04 	subs.w	fp, sl, r4
 8005170:	d00b      	beq.n	800518a <_svfiprintf_r+0x7e>
 8005172:	465b      	mov	r3, fp
 8005174:	4622      	mov	r2, r4
 8005176:	4629      	mov	r1, r5
 8005178:	4638      	mov	r0, r7
 800517a:	f7ff ff6b 	bl	8005054 <__ssputs_r>
 800517e:	3001      	adds	r0, #1
 8005180:	f000 80a7 	beq.w	80052d2 <_svfiprintf_r+0x1c6>
 8005184:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005186:	445a      	add	r2, fp
 8005188:	9209      	str	r2, [sp, #36]	@ 0x24
 800518a:	f89a 3000 	ldrb.w	r3, [sl]
 800518e:	2b00      	cmp	r3, #0
 8005190:	f000 809f 	beq.w	80052d2 <_svfiprintf_r+0x1c6>
 8005194:	2300      	movs	r3, #0
 8005196:	f04f 32ff 	mov.w	r2, #4294967295
 800519a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800519e:	f10a 0a01 	add.w	sl, sl, #1
 80051a2:	9304      	str	r3, [sp, #16]
 80051a4:	9307      	str	r3, [sp, #28]
 80051a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80051aa:	931a      	str	r3, [sp, #104]	@ 0x68
 80051ac:	4654      	mov	r4, sl
 80051ae:	2205      	movs	r2, #5
 80051b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051b4:	484e      	ldr	r0, [pc, #312]	@ (80052f0 <_svfiprintf_r+0x1e4>)
 80051b6:	f7fb f813 	bl	80001e0 <memchr>
 80051ba:	9a04      	ldr	r2, [sp, #16]
 80051bc:	b9d8      	cbnz	r0, 80051f6 <_svfiprintf_r+0xea>
 80051be:	06d0      	lsls	r0, r2, #27
 80051c0:	bf44      	itt	mi
 80051c2:	2320      	movmi	r3, #32
 80051c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80051c8:	0711      	lsls	r1, r2, #28
 80051ca:	bf44      	itt	mi
 80051cc:	232b      	movmi	r3, #43	@ 0x2b
 80051ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80051d2:	f89a 3000 	ldrb.w	r3, [sl]
 80051d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80051d8:	d015      	beq.n	8005206 <_svfiprintf_r+0xfa>
 80051da:	9a07      	ldr	r2, [sp, #28]
 80051dc:	4654      	mov	r4, sl
 80051de:	2000      	movs	r0, #0
 80051e0:	f04f 0c0a 	mov.w	ip, #10
 80051e4:	4621      	mov	r1, r4
 80051e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051ea:	3b30      	subs	r3, #48	@ 0x30
 80051ec:	2b09      	cmp	r3, #9
 80051ee:	d94b      	bls.n	8005288 <_svfiprintf_r+0x17c>
 80051f0:	b1b0      	cbz	r0, 8005220 <_svfiprintf_r+0x114>
 80051f2:	9207      	str	r2, [sp, #28]
 80051f4:	e014      	b.n	8005220 <_svfiprintf_r+0x114>
 80051f6:	eba0 0308 	sub.w	r3, r0, r8
 80051fa:	fa09 f303 	lsl.w	r3, r9, r3
 80051fe:	4313      	orrs	r3, r2
 8005200:	9304      	str	r3, [sp, #16]
 8005202:	46a2      	mov	sl, r4
 8005204:	e7d2      	b.n	80051ac <_svfiprintf_r+0xa0>
 8005206:	9b03      	ldr	r3, [sp, #12]
 8005208:	1d19      	adds	r1, r3, #4
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	9103      	str	r1, [sp, #12]
 800520e:	2b00      	cmp	r3, #0
 8005210:	bfbb      	ittet	lt
 8005212:	425b      	neglt	r3, r3
 8005214:	f042 0202 	orrlt.w	r2, r2, #2
 8005218:	9307      	strge	r3, [sp, #28]
 800521a:	9307      	strlt	r3, [sp, #28]
 800521c:	bfb8      	it	lt
 800521e:	9204      	strlt	r2, [sp, #16]
 8005220:	7823      	ldrb	r3, [r4, #0]
 8005222:	2b2e      	cmp	r3, #46	@ 0x2e
 8005224:	d10a      	bne.n	800523c <_svfiprintf_r+0x130>
 8005226:	7863      	ldrb	r3, [r4, #1]
 8005228:	2b2a      	cmp	r3, #42	@ 0x2a
 800522a:	d132      	bne.n	8005292 <_svfiprintf_r+0x186>
 800522c:	9b03      	ldr	r3, [sp, #12]
 800522e:	1d1a      	adds	r2, r3, #4
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	9203      	str	r2, [sp, #12]
 8005234:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005238:	3402      	adds	r4, #2
 800523a:	9305      	str	r3, [sp, #20]
 800523c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005300 <_svfiprintf_r+0x1f4>
 8005240:	7821      	ldrb	r1, [r4, #0]
 8005242:	2203      	movs	r2, #3
 8005244:	4650      	mov	r0, sl
 8005246:	f7fa ffcb 	bl	80001e0 <memchr>
 800524a:	b138      	cbz	r0, 800525c <_svfiprintf_r+0x150>
 800524c:	9b04      	ldr	r3, [sp, #16]
 800524e:	eba0 000a 	sub.w	r0, r0, sl
 8005252:	2240      	movs	r2, #64	@ 0x40
 8005254:	4082      	lsls	r2, r0
 8005256:	4313      	orrs	r3, r2
 8005258:	3401      	adds	r4, #1
 800525a:	9304      	str	r3, [sp, #16]
 800525c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005260:	4824      	ldr	r0, [pc, #144]	@ (80052f4 <_svfiprintf_r+0x1e8>)
 8005262:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005266:	2206      	movs	r2, #6
 8005268:	f7fa ffba 	bl	80001e0 <memchr>
 800526c:	2800      	cmp	r0, #0
 800526e:	d036      	beq.n	80052de <_svfiprintf_r+0x1d2>
 8005270:	4b21      	ldr	r3, [pc, #132]	@ (80052f8 <_svfiprintf_r+0x1ec>)
 8005272:	bb1b      	cbnz	r3, 80052bc <_svfiprintf_r+0x1b0>
 8005274:	9b03      	ldr	r3, [sp, #12]
 8005276:	3307      	adds	r3, #7
 8005278:	f023 0307 	bic.w	r3, r3, #7
 800527c:	3308      	adds	r3, #8
 800527e:	9303      	str	r3, [sp, #12]
 8005280:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005282:	4433      	add	r3, r6
 8005284:	9309      	str	r3, [sp, #36]	@ 0x24
 8005286:	e76a      	b.n	800515e <_svfiprintf_r+0x52>
 8005288:	fb0c 3202 	mla	r2, ip, r2, r3
 800528c:	460c      	mov	r4, r1
 800528e:	2001      	movs	r0, #1
 8005290:	e7a8      	b.n	80051e4 <_svfiprintf_r+0xd8>
 8005292:	2300      	movs	r3, #0
 8005294:	3401      	adds	r4, #1
 8005296:	9305      	str	r3, [sp, #20]
 8005298:	4619      	mov	r1, r3
 800529a:	f04f 0c0a 	mov.w	ip, #10
 800529e:	4620      	mov	r0, r4
 80052a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052a4:	3a30      	subs	r2, #48	@ 0x30
 80052a6:	2a09      	cmp	r2, #9
 80052a8:	d903      	bls.n	80052b2 <_svfiprintf_r+0x1a6>
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d0c6      	beq.n	800523c <_svfiprintf_r+0x130>
 80052ae:	9105      	str	r1, [sp, #20]
 80052b0:	e7c4      	b.n	800523c <_svfiprintf_r+0x130>
 80052b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80052b6:	4604      	mov	r4, r0
 80052b8:	2301      	movs	r3, #1
 80052ba:	e7f0      	b.n	800529e <_svfiprintf_r+0x192>
 80052bc:	ab03      	add	r3, sp, #12
 80052be:	9300      	str	r3, [sp, #0]
 80052c0:	462a      	mov	r2, r5
 80052c2:	4b0e      	ldr	r3, [pc, #56]	@ (80052fc <_svfiprintf_r+0x1f0>)
 80052c4:	a904      	add	r1, sp, #16
 80052c6:	4638      	mov	r0, r7
 80052c8:	f7fd fe84 	bl	8002fd4 <_printf_float>
 80052cc:	1c42      	adds	r2, r0, #1
 80052ce:	4606      	mov	r6, r0
 80052d0:	d1d6      	bne.n	8005280 <_svfiprintf_r+0x174>
 80052d2:	89ab      	ldrh	r3, [r5, #12]
 80052d4:	065b      	lsls	r3, r3, #25
 80052d6:	f53f af2d 	bmi.w	8005134 <_svfiprintf_r+0x28>
 80052da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80052dc:	e72c      	b.n	8005138 <_svfiprintf_r+0x2c>
 80052de:	ab03      	add	r3, sp, #12
 80052e0:	9300      	str	r3, [sp, #0]
 80052e2:	462a      	mov	r2, r5
 80052e4:	4b05      	ldr	r3, [pc, #20]	@ (80052fc <_svfiprintf_r+0x1f0>)
 80052e6:	a904      	add	r1, sp, #16
 80052e8:	4638      	mov	r0, r7
 80052ea:	f7fe f90b 	bl	8003504 <_printf_i>
 80052ee:	e7ed      	b.n	80052cc <_svfiprintf_r+0x1c0>
 80052f0:	080068e8 	.word	0x080068e8
 80052f4:	080068f2 	.word	0x080068f2
 80052f8:	08002fd5 	.word	0x08002fd5
 80052fc:	08005055 	.word	0x08005055
 8005300:	080068ee 	.word	0x080068ee

08005304 <__sflush_r>:
 8005304:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800530c:	0716      	lsls	r6, r2, #28
 800530e:	4605      	mov	r5, r0
 8005310:	460c      	mov	r4, r1
 8005312:	d454      	bmi.n	80053be <__sflush_r+0xba>
 8005314:	684b      	ldr	r3, [r1, #4]
 8005316:	2b00      	cmp	r3, #0
 8005318:	dc02      	bgt.n	8005320 <__sflush_r+0x1c>
 800531a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800531c:	2b00      	cmp	r3, #0
 800531e:	dd48      	ble.n	80053b2 <__sflush_r+0xae>
 8005320:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005322:	2e00      	cmp	r6, #0
 8005324:	d045      	beq.n	80053b2 <__sflush_r+0xae>
 8005326:	2300      	movs	r3, #0
 8005328:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800532c:	682f      	ldr	r7, [r5, #0]
 800532e:	6a21      	ldr	r1, [r4, #32]
 8005330:	602b      	str	r3, [r5, #0]
 8005332:	d030      	beq.n	8005396 <__sflush_r+0x92>
 8005334:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005336:	89a3      	ldrh	r3, [r4, #12]
 8005338:	0759      	lsls	r1, r3, #29
 800533a:	d505      	bpl.n	8005348 <__sflush_r+0x44>
 800533c:	6863      	ldr	r3, [r4, #4]
 800533e:	1ad2      	subs	r2, r2, r3
 8005340:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005342:	b10b      	cbz	r3, 8005348 <__sflush_r+0x44>
 8005344:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005346:	1ad2      	subs	r2, r2, r3
 8005348:	2300      	movs	r3, #0
 800534a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800534c:	6a21      	ldr	r1, [r4, #32]
 800534e:	4628      	mov	r0, r5
 8005350:	47b0      	blx	r6
 8005352:	1c43      	adds	r3, r0, #1
 8005354:	89a3      	ldrh	r3, [r4, #12]
 8005356:	d106      	bne.n	8005366 <__sflush_r+0x62>
 8005358:	6829      	ldr	r1, [r5, #0]
 800535a:	291d      	cmp	r1, #29
 800535c:	d82b      	bhi.n	80053b6 <__sflush_r+0xb2>
 800535e:	4a2a      	ldr	r2, [pc, #168]	@ (8005408 <__sflush_r+0x104>)
 8005360:	410a      	asrs	r2, r1
 8005362:	07d6      	lsls	r6, r2, #31
 8005364:	d427      	bmi.n	80053b6 <__sflush_r+0xb2>
 8005366:	2200      	movs	r2, #0
 8005368:	6062      	str	r2, [r4, #4]
 800536a:	04d9      	lsls	r1, r3, #19
 800536c:	6922      	ldr	r2, [r4, #16]
 800536e:	6022      	str	r2, [r4, #0]
 8005370:	d504      	bpl.n	800537c <__sflush_r+0x78>
 8005372:	1c42      	adds	r2, r0, #1
 8005374:	d101      	bne.n	800537a <__sflush_r+0x76>
 8005376:	682b      	ldr	r3, [r5, #0]
 8005378:	b903      	cbnz	r3, 800537c <__sflush_r+0x78>
 800537a:	6560      	str	r0, [r4, #84]	@ 0x54
 800537c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800537e:	602f      	str	r7, [r5, #0]
 8005380:	b1b9      	cbz	r1, 80053b2 <__sflush_r+0xae>
 8005382:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005386:	4299      	cmp	r1, r3
 8005388:	d002      	beq.n	8005390 <__sflush_r+0x8c>
 800538a:	4628      	mov	r0, r5
 800538c:	f7ff f9e0 	bl	8004750 <_free_r>
 8005390:	2300      	movs	r3, #0
 8005392:	6363      	str	r3, [r4, #52]	@ 0x34
 8005394:	e00d      	b.n	80053b2 <__sflush_r+0xae>
 8005396:	2301      	movs	r3, #1
 8005398:	4628      	mov	r0, r5
 800539a:	47b0      	blx	r6
 800539c:	4602      	mov	r2, r0
 800539e:	1c50      	adds	r0, r2, #1
 80053a0:	d1c9      	bne.n	8005336 <__sflush_r+0x32>
 80053a2:	682b      	ldr	r3, [r5, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d0c6      	beq.n	8005336 <__sflush_r+0x32>
 80053a8:	2b1d      	cmp	r3, #29
 80053aa:	d001      	beq.n	80053b0 <__sflush_r+0xac>
 80053ac:	2b16      	cmp	r3, #22
 80053ae:	d11e      	bne.n	80053ee <__sflush_r+0xea>
 80053b0:	602f      	str	r7, [r5, #0]
 80053b2:	2000      	movs	r0, #0
 80053b4:	e022      	b.n	80053fc <__sflush_r+0xf8>
 80053b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053ba:	b21b      	sxth	r3, r3
 80053bc:	e01b      	b.n	80053f6 <__sflush_r+0xf2>
 80053be:	690f      	ldr	r7, [r1, #16]
 80053c0:	2f00      	cmp	r7, #0
 80053c2:	d0f6      	beq.n	80053b2 <__sflush_r+0xae>
 80053c4:	0793      	lsls	r3, r2, #30
 80053c6:	680e      	ldr	r6, [r1, #0]
 80053c8:	bf08      	it	eq
 80053ca:	694b      	ldreq	r3, [r1, #20]
 80053cc:	600f      	str	r7, [r1, #0]
 80053ce:	bf18      	it	ne
 80053d0:	2300      	movne	r3, #0
 80053d2:	eba6 0807 	sub.w	r8, r6, r7
 80053d6:	608b      	str	r3, [r1, #8]
 80053d8:	f1b8 0f00 	cmp.w	r8, #0
 80053dc:	dde9      	ble.n	80053b2 <__sflush_r+0xae>
 80053de:	6a21      	ldr	r1, [r4, #32]
 80053e0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80053e2:	4643      	mov	r3, r8
 80053e4:	463a      	mov	r2, r7
 80053e6:	4628      	mov	r0, r5
 80053e8:	47b0      	blx	r6
 80053ea:	2800      	cmp	r0, #0
 80053ec:	dc08      	bgt.n	8005400 <__sflush_r+0xfc>
 80053ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053f6:	81a3      	strh	r3, [r4, #12]
 80053f8:	f04f 30ff 	mov.w	r0, #4294967295
 80053fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005400:	4407      	add	r7, r0
 8005402:	eba8 0800 	sub.w	r8, r8, r0
 8005406:	e7e7      	b.n	80053d8 <__sflush_r+0xd4>
 8005408:	dfbffffe 	.word	0xdfbffffe

0800540c <_fflush_r>:
 800540c:	b538      	push	{r3, r4, r5, lr}
 800540e:	690b      	ldr	r3, [r1, #16]
 8005410:	4605      	mov	r5, r0
 8005412:	460c      	mov	r4, r1
 8005414:	b913      	cbnz	r3, 800541c <_fflush_r+0x10>
 8005416:	2500      	movs	r5, #0
 8005418:	4628      	mov	r0, r5
 800541a:	bd38      	pop	{r3, r4, r5, pc}
 800541c:	b118      	cbz	r0, 8005426 <_fflush_r+0x1a>
 800541e:	6a03      	ldr	r3, [r0, #32]
 8005420:	b90b      	cbnz	r3, 8005426 <_fflush_r+0x1a>
 8005422:	f7fe fa1b 	bl	800385c <__sinit>
 8005426:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d0f3      	beq.n	8005416 <_fflush_r+0xa>
 800542e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005430:	07d0      	lsls	r0, r2, #31
 8005432:	d404      	bmi.n	800543e <_fflush_r+0x32>
 8005434:	0599      	lsls	r1, r3, #22
 8005436:	d402      	bmi.n	800543e <_fflush_r+0x32>
 8005438:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800543a:	f7fe fb3a 	bl	8003ab2 <__retarget_lock_acquire_recursive>
 800543e:	4628      	mov	r0, r5
 8005440:	4621      	mov	r1, r4
 8005442:	f7ff ff5f 	bl	8005304 <__sflush_r>
 8005446:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005448:	07da      	lsls	r2, r3, #31
 800544a:	4605      	mov	r5, r0
 800544c:	d4e4      	bmi.n	8005418 <_fflush_r+0xc>
 800544e:	89a3      	ldrh	r3, [r4, #12]
 8005450:	059b      	lsls	r3, r3, #22
 8005452:	d4e1      	bmi.n	8005418 <_fflush_r+0xc>
 8005454:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005456:	f7fe fb2d 	bl	8003ab4 <__retarget_lock_release_recursive>
 800545a:	e7dd      	b.n	8005418 <_fflush_r+0xc>

0800545c <memmove>:
 800545c:	4288      	cmp	r0, r1
 800545e:	b510      	push	{r4, lr}
 8005460:	eb01 0402 	add.w	r4, r1, r2
 8005464:	d902      	bls.n	800546c <memmove+0x10>
 8005466:	4284      	cmp	r4, r0
 8005468:	4623      	mov	r3, r4
 800546a:	d807      	bhi.n	800547c <memmove+0x20>
 800546c:	1e43      	subs	r3, r0, #1
 800546e:	42a1      	cmp	r1, r4
 8005470:	d008      	beq.n	8005484 <memmove+0x28>
 8005472:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005476:	f803 2f01 	strb.w	r2, [r3, #1]!
 800547a:	e7f8      	b.n	800546e <memmove+0x12>
 800547c:	4402      	add	r2, r0
 800547e:	4601      	mov	r1, r0
 8005480:	428a      	cmp	r2, r1
 8005482:	d100      	bne.n	8005486 <memmove+0x2a>
 8005484:	bd10      	pop	{r4, pc}
 8005486:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800548a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800548e:	e7f7      	b.n	8005480 <memmove+0x24>

08005490 <_sbrk_r>:
 8005490:	b538      	push	{r3, r4, r5, lr}
 8005492:	4d06      	ldr	r5, [pc, #24]	@ (80054ac <_sbrk_r+0x1c>)
 8005494:	2300      	movs	r3, #0
 8005496:	4604      	mov	r4, r0
 8005498:	4608      	mov	r0, r1
 800549a:	602b      	str	r3, [r5, #0]
 800549c:	f7fc fda0 	bl	8001fe0 <_sbrk>
 80054a0:	1c43      	adds	r3, r0, #1
 80054a2:	d102      	bne.n	80054aa <_sbrk_r+0x1a>
 80054a4:	682b      	ldr	r3, [r5, #0]
 80054a6:	b103      	cbz	r3, 80054aa <_sbrk_r+0x1a>
 80054a8:	6023      	str	r3, [r4, #0]
 80054aa:	bd38      	pop	{r3, r4, r5, pc}
 80054ac:	2000034c 	.word	0x2000034c

080054b0 <memcpy>:
 80054b0:	440a      	add	r2, r1
 80054b2:	4291      	cmp	r1, r2
 80054b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80054b8:	d100      	bne.n	80054bc <memcpy+0xc>
 80054ba:	4770      	bx	lr
 80054bc:	b510      	push	{r4, lr}
 80054be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054c6:	4291      	cmp	r1, r2
 80054c8:	d1f9      	bne.n	80054be <memcpy+0xe>
 80054ca:	bd10      	pop	{r4, pc}

080054cc <__assert_func>:
 80054cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80054ce:	4614      	mov	r4, r2
 80054d0:	461a      	mov	r2, r3
 80054d2:	4b09      	ldr	r3, [pc, #36]	@ (80054f8 <__assert_func+0x2c>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4605      	mov	r5, r0
 80054d8:	68d8      	ldr	r0, [r3, #12]
 80054da:	b954      	cbnz	r4, 80054f2 <__assert_func+0x26>
 80054dc:	4b07      	ldr	r3, [pc, #28]	@ (80054fc <__assert_func+0x30>)
 80054de:	461c      	mov	r4, r3
 80054e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80054e4:	9100      	str	r1, [sp, #0]
 80054e6:	462b      	mov	r3, r5
 80054e8:	4905      	ldr	r1, [pc, #20]	@ (8005500 <__assert_func+0x34>)
 80054ea:	f000 f86f 	bl	80055cc <fiprintf>
 80054ee:	f000 f87f 	bl	80055f0 <abort>
 80054f2:	4b04      	ldr	r3, [pc, #16]	@ (8005504 <__assert_func+0x38>)
 80054f4:	e7f4      	b.n	80054e0 <__assert_func+0x14>
 80054f6:	bf00      	nop
 80054f8:	20000024 	.word	0x20000024
 80054fc:	0800693e 	.word	0x0800693e
 8005500:	08006910 	.word	0x08006910
 8005504:	08006903 	.word	0x08006903

08005508 <_calloc_r>:
 8005508:	b570      	push	{r4, r5, r6, lr}
 800550a:	fba1 5402 	umull	r5, r4, r1, r2
 800550e:	b93c      	cbnz	r4, 8005520 <_calloc_r+0x18>
 8005510:	4629      	mov	r1, r5
 8005512:	f7ff f991 	bl	8004838 <_malloc_r>
 8005516:	4606      	mov	r6, r0
 8005518:	b928      	cbnz	r0, 8005526 <_calloc_r+0x1e>
 800551a:	2600      	movs	r6, #0
 800551c:	4630      	mov	r0, r6
 800551e:	bd70      	pop	{r4, r5, r6, pc}
 8005520:	220c      	movs	r2, #12
 8005522:	6002      	str	r2, [r0, #0]
 8005524:	e7f9      	b.n	800551a <_calloc_r+0x12>
 8005526:	462a      	mov	r2, r5
 8005528:	4621      	mov	r1, r4
 800552a:	f7fe fa44 	bl	80039b6 <memset>
 800552e:	e7f5      	b.n	800551c <_calloc_r+0x14>

08005530 <__ascii_mbtowc>:
 8005530:	b082      	sub	sp, #8
 8005532:	b901      	cbnz	r1, 8005536 <__ascii_mbtowc+0x6>
 8005534:	a901      	add	r1, sp, #4
 8005536:	b142      	cbz	r2, 800554a <__ascii_mbtowc+0x1a>
 8005538:	b14b      	cbz	r3, 800554e <__ascii_mbtowc+0x1e>
 800553a:	7813      	ldrb	r3, [r2, #0]
 800553c:	600b      	str	r3, [r1, #0]
 800553e:	7812      	ldrb	r2, [r2, #0]
 8005540:	1e10      	subs	r0, r2, #0
 8005542:	bf18      	it	ne
 8005544:	2001      	movne	r0, #1
 8005546:	b002      	add	sp, #8
 8005548:	4770      	bx	lr
 800554a:	4610      	mov	r0, r2
 800554c:	e7fb      	b.n	8005546 <__ascii_mbtowc+0x16>
 800554e:	f06f 0001 	mvn.w	r0, #1
 8005552:	e7f8      	b.n	8005546 <__ascii_mbtowc+0x16>

08005554 <_realloc_r>:
 8005554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005558:	4680      	mov	r8, r0
 800555a:	4615      	mov	r5, r2
 800555c:	460c      	mov	r4, r1
 800555e:	b921      	cbnz	r1, 800556a <_realloc_r+0x16>
 8005560:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005564:	4611      	mov	r1, r2
 8005566:	f7ff b967 	b.w	8004838 <_malloc_r>
 800556a:	b92a      	cbnz	r2, 8005578 <_realloc_r+0x24>
 800556c:	f7ff f8f0 	bl	8004750 <_free_r>
 8005570:	2400      	movs	r4, #0
 8005572:	4620      	mov	r0, r4
 8005574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005578:	f000 f841 	bl	80055fe <_malloc_usable_size_r>
 800557c:	4285      	cmp	r5, r0
 800557e:	4606      	mov	r6, r0
 8005580:	d802      	bhi.n	8005588 <_realloc_r+0x34>
 8005582:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005586:	d8f4      	bhi.n	8005572 <_realloc_r+0x1e>
 8005588:	4629      	mov	r1, r5
 800558a:	4640      	mov	r0, r8
 800558c:	f7ff f954 	bl	8004838 <_malloc_r>
 8005590:	4607      	mov	r7, r0
 8005592:	2800      	cmp	r0, #0
 8005594:	d0ec      	beq.n	8005570 <_realloc_r+0x1c>
 8005596:	42b5      	cmp	r5, r6
 8005598:	462a      	mov	r2, r5
 800559a:	4621      	mov	r1, r4
 800559c:	bf28      	it	cs
 800559e:	4632      	movcs	r2, r6
 80055a0:	f7ff ff86 	bl	80054b0 <memcpy>
 80055a4:	4621      	mov	r1, r4
 80055a6:	4640      	mov	r0, r8
 80055a8:	f7ff f8d2 	bl	8004750 <_free_r>
 80055ac:	463c      	mov	r4, r7
 80055ae:	e7e0      	b.n	8005572 <_realloc_r+0x1e>

080055b0 <__ascii_wctomb>:
 80055b0:	4603      	mov	r3, r0
 80055b2:	4608      	mov	r0, r1
 80055b4:	b141      	cbz	r1, 80055c8 <__ascii_wctomb+0x18>
 80055b6:	2aff      	cmp	r2, #255	@ 0xff
 80055b8:	d904      	bls.n	80055c4 <__ascii_wctomb+0x14>
 80055ba:	228a      	movs	r2, #138	@ 0x8a
 80055bc:	601a      	str	r2, [r3, #0]
 80055be:	f04f 30ff 	mov.w	r0, #4294967295
 80055c2:	4770      	bx	lr
 80055c4:	700a      	strb	r2, [r1, #0]
 80055c6:	2001      	movs	r0, #1
 80055c8:	4770      	bx	lr
	...

080055cc <fiprintf>:
 80055cc:	b40e      	push	{r1, r2, r3}
 80055ce:	b503      	push	{r0, r1, lr}
 80055d0:	4601      	mov	r1, r0
 80055d2:	ab03      	add	r3, sp, #12
 80055d4:	4805      	ldr	r0, [pc, #20]	@ (80055ec <fiprintf+0x20>)
 80055d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80055da:	6800      	ldr	r0, [r0, #0]
 80055dc:	9301      	str	r3, [sp, #4]
 80055de:	f000 f83f 	bl	8005660 <_vfiprintf_r>
 80055e2:	b002      	add	sp, #8
 80055e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80055e8:	b003      	add	sp, #12
 80055ea:	4770      	bx	lr
 80055ec:	20000024 	.word	0x20000024

080055f0 <abort>:
 80055f0:	b508      	push	{r3, lr}
 80055f2:	2006      	movs	r0, #6
 80055f4:	f000 fa08 	bl	8005a08 <raise>
 80055f8:	2001      	movs	r0, #1
 80055fa:	f7fc fc79 	bl	8001ef0 <_exit>

080055fe <_malloc_usable_size_r>:
 80055fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005602:	1f18      	subs	r0, r3, #4
 8005604:	2b00      	cmp	r3, #0
 8005606:	bfbc      	itt	lt
 8005608:	580b      	ldrlt	r3, [r1, r0]
 800560a:	18c0      	addlt	r0, r0, r3
 800560c:	4770      	bx	lr

0800560e <__sfputc_r>:
 800560e:	6893      	ldr	r3, [r2, #8]
 8005610:	3b01      	subs	r3, #1
 8005612:	2b00      	cmp	r3, #0
 8005614:	b410      	push	{r4}
 8005616:	6093      	str	r3, [r2, #8]
 8005618:	da08      	bge.n	800562c <__sfputc_r+0x1e>
 800561a:	6994      	ldr	r4, [r2, #24]
 800561c:	42a3      	cmp	r3, r4
 800561e:	db01      	blt.n	8005624 <__sfputc_r+0x16>
 8005620:	290a      	cmp	r1, #10
 8005622:	d103      	bne.n	800562c <__sfputc_r+0x1e>
 8005624:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005628:	f000 b932 	b.w	8005890 <__swbuf_r>
 800562c:	6813      	ldr	r3, [r2, #0]
 800562e:	1c58      	adds	r0, r3, #1
 8005630:	6010      	str	r0, [r2, #0]
 8005632:	7019      	strb	r1, [r3, #0]
 8005634:	4608      	mov	r0, r1
 8005636:	f85d 4b04 	ldr.w	r4, [sp], #4
 800563a:	4770      	bx	lr

0800563c <__sfputs_r>:
 800563c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800563e:	4606      	mov	r6, r0
 8005640:	460f      	mov	r7, r1
 8005642:	4614      	mov	r4, r2
 8005644:	18d5      	adds	r5, r2, r3
 8005646:	42ac      	cmp	r4, r5
 8005648:	d101      	bne.n	800564e <__sfputs_r+0x12>
 800564a:	2000      	movs	r0, #0
 800564c:	e007      	b.n	800565e <__sfputs_r+0x22>
 800564e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005652:	463a      	mov	r2, r7
 8005654:	4630      	mov	r0, r6
 8005656:	f7ff ffda 	bl	800560e <__sfputc_r>
 800565a:	1c43      	adds	r3, r0, #1
 800565c:	d1f3      	bne.n	8005646 <__sfputs_r+0xa>
 800565e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005660 <_vfiprintf_r>:
 8005660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005664:	460d      	mov	r5, r1
 8005666:	b09d      	sub	sp, #116	@ 0x74
 8005668:	4614      	mov	r4, r2
 800566a:	4698      	mov	r8, r3
 800566c:	4606      	mov	r6, r0
 800566e:	b118      	cbz	r0, 8005678 <_vfiprintf_r+0x18>
 8005670:	6a03      	ldr	r3, [r0, #32]
 8005672:	b90b      	cbnz	r3, 8005678 <_vfiprintf_r+0x18>
 8005674:	f7fe f8f2 	bl	800385c <__sinit>
 8005678:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800567a:	07d9      	lsls	r1, r3, #31
 800567c:	d405      	bmi.n	800568a <_vfiprintf_r+0x2a>
 800567e:	89ab      	ldrh	r3, [r5, #12]
 8005680:	059a      	lsls	r2, r3, #22
 8005682:	d402      	bmi.n	800568a <_vfiprintf_r+0x2a>
 8005684:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005686:	f7fe fa14 	bl	8003ab2 <__retarget_lock_acquire_recursive>
 800568a:	89ab      	ldrh	r3, [r5, #12]
 800568c:	071b      	lsls	r3, r3, #28
 800568e:	d501      	bpl.n	8005694 <_vfiprintf_r+0x34>
 8005690:	692b      	ldr	r3, [r5, #16]
 8005692:	b99b      	cbnz	r3, 80056bc <_vfiprintf_r+0x5c>
 8005694:	4629      	mov	r1, r5
 8005696:	4630      	mov	r0, r6
 8005698:	f000 f938 	bl	800590c <__swsetup_r>
 800569c:	b170      	cbz	r0, 80056bc <_vfiprintf_r+0x5c>
 800569e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80056a0:	07dc      	lsls	r4, r3, #31
 80056a2:	d504      	bpl.n	80056ae <_vfiprintf_r+0x4e>
 80056a4:	f04f 30ff 	mov.w	r0, #4294967295
 80056a8:	b01d      	add	sp, #116	@ 0x74
 80056aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056ae:	89ab      	ldrh	r3, [r5, #12]
 80056b0:	0598      	lsls	r0, r3, #22
 80056b2:	d4f7      	bmi.n	80056a4 <_vfiprintf_r+0x44>
 80056b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80056b6:	f7fe f9fd 	bl	8003ab4 <__retarget_lock_release_recursive>
 80056ba:	e7f3      	b.n	80056a4 <_vfiprintf_r+0x44>
 80056bc:	2300      	movs	r3, #0
 80056be:	9309      	str	r3, [sp, #36]	@ 0x24
 80056c0:	2320      	movs	r3, #32
 80056c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80056c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80056ca:	2330      	movs	r3, #48	@ 0x30
 80056cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800587c <_vfiprintf_r+0x21c>
 80056d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80056d4:	f04f 0901 	mov.w	r9, #1
 80056d8:	4623      	mov	r3, r4
 80056da:	469a      	mov	sl, r3
 80056dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056e0:	b10a      	cbz	r2, 80056e6 <_vfiprintf_r+0x86>
 80056e2:	2a25      	cmp	r2, #37	@ 0x25
 80056e4:	d1f9      	bne.n	80056da <_vfiprintf_r+0x7a>
 80056e6:	ebba 0b04 	subs.w	fp, sl, r4
 80056ea:	d00b      	beq.n	8005704 <_vfiprintf_r+0xa4>
 80056ec:	465b      	mov	r3, fp
 80056ee:	4622      	mov	r2, r4
 80056f0:	4629      	mov	r1, r5
 80056f2:	4630      	mov	r0, r6
 80056f4:	f7ff ffa2 	bl	800563c <__sfputs_r>
 80056f8:	3001      	adds	r0, #1
 80056fa:	f000 80a7 	beq.w	800584c <_vfiprintf_r+0x1ec>
 80056fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005700:	445a      	add	r2, fp
 8005702:	9209      	str	r2, [sp, #36]	@ 0x24
 8005704:	f89a 3000 	ldrb.w	r3, [sl]
 8005708:	2b00      	cmp	r3, #0
 800570a:	f000 809f 	beq.w	800584c <_vfiprintf_r+0x1ec>
 800570e:	2300      	movs	r3, #0
 8005710:	f04f 32ff 	mov.w	r2, #4294967295
 8005714:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005718:	f10a 0a01 	add.w	sl, sl, #1
 800571c:	9304      	str	r3, [sp, #16]
 800571e:	9307      	str	r3, [sp, #28]
 8005720:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005724:	931a      	str	r3, [sp, #104]	@ 0x68
 8005726:	4654      	mov	r4, sl
 8005728:	2205      	movs	r2, #5
 800572a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800572e:	4853      	ldr	r0, [pc, #332]	@ (800587c <_vfiprintf_r+0x21c>)
 8005730:	f7fa fd56 	bl	80001e0 <memchr>
 8005734:	9a04      	ldr	r2, [sp, #16]
 8005736:	b9d8      	cbnz	r0, 8005770 <_vfiprintf_r+0x110>
 8005738:	06d1      	lsls	r1, r2, #27
 800573a:	bf44      	itt	mi
 800573c:	2320      	movmi	r3, #32
 800573e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005742:	0713      	lsls	r3, r2, #28
 8005744:	bf44      	itt	mi
 8005746:	232b      	movmi	r3, #43	@ 0x2b
 8005748:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800574c:	f89a 3000 	ldrb.w	r3, [sl]
 8005750:	2b2a      	cmp	r3, #42	@ 0x2a
 8005752:	d015      	beq.n	8005780 <_vfiprintf_r+0x120>
 8005754:	9a07      	ldr	r2, [sp, #28]
 8005756:	4654      	mov	r4, sl
 8005758:	2000      	movs	r0, #0
 800575a:	f04f 0c0a 	mov.w	ip, #10
 800575e:	4621      	mov	r1, r4
 8005760:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005764:	3b30      	subs	r3, #48	@ 0x30
 8005766:	2b09      	cmp	r3, #9
 8005768:	d94b      	bls.n	8005802 <_vfiprintf_r+0x1a2>
 800576a:	b1b0      	cbz	r0, 800579a <_vfiprintf_r+0x13a>
 800576c:	9207      	str	r2, [sp, #28]
 800576e:	e014      	b.n	800579a <_vfiprintf_r+0x13a>
 8005770:	eba0 0308 	sub.w	r3, r0, r8
 8005774:	fa09 f303 	lsl.w	r3, r9, r3
 8005778:	4313      	orrs	r3, r2
 800577a:	9304      	str	r3, [sp, #16]
 800577c:	46a2      	mov	sl, r4
 800577e:	e7d2      	b.n	8005726 <_vfiprintf_r+0xc6>
 8005780:	9b03      	ldr	r3, [sp, #12]
 8005782:	1d19      	adds	r1, r3, #4
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	9103      	str	r1, [sp, #12]
 8005788:	2b00      	cmp	r3, #0
 800578a:	bfbb      	ittet	lt
 800578c:	425b      	neglt	r3, r3
 800578e:	f042 0202 	orrlt.w	r2, r2, #2
 8005792:	9307      	strge	r3, [sp, #28]
 8005794:	9307      	strlt	r3, [sp, #28]
 8005796:	bfb8      	it	lt
 8005798:	9204      	strlt	r2, [sp, #16]
 800579a:	7823      	ldrb	r3, [r4, #0]
 800579c:	2b2e      	cmp	r3, #46	@ 0x2e
 800579e:	d10a      	bne.n	80057b6 <_vfiprintf_r+0x156>
 80057a0:	7863      	ldrb	r3, [r4, #1]
 80057a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80057a4:	d132      	bne.n	800580c <_vfiprintf_r+0x1ac>
 80057a6:	9b03      	ldr	r3, [sp, #12]
 80057a8:	1d1a      	adds	r2, r3, #4
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	9203      	str	r2, [sp, #12]
 80057ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80057b2:	3402      	adds	r4, #2
 80057b4:	9305      	str	r3, [sp, #20]
 80057b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800588c <_vfiprintf_r+0x22c>
 80057ba:	7821      	ldrb	r1, [r4, #0]
 80057bc:	2203      	movs	r2, #3
 80057be:	4650      	mov	r0, sl
 80057c0:	f7fa fd0e 	bl	80001e0 <memchr>
 80057c4:	b138      	cbz	r0, 80057d6 <_vfiprintf_r+0x176>
 80057c6:	9b04      	ldr	r3, [sp, #16]
 80057c8:	eba0 000a 	sub.w	r0, r0, sl
 80057cc:	2240      	movs	r2, #64	@ 0x40
 80057ce:	4082      	lsls	r2, r0
 80057d0:	4313      	orrs	r3, r2
 80057d2:	3401      	adds	r4, #1
 80057d4:	9304      	str	r3, [sp, #16]
 80057d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057da:	4829      	ldr	r0, [pc, #164]	@ (8005880 <_vfiprintf_r+0x220>)
 80057dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80057e0:	2206      	movs	r2, #6
 80057e2:	f7fa fcfd 	bl	80001e0 <memchr>
 80057e6:	2800      	cmp	r0, #0
 80057e8:	d03f      	beq.n	800586a <_vfiprintf_r+0x20a>
 80057ea:	4b26      	ldr	r3, [pc, #152]	@ (8005884 <_vfiprintf_r+0x224>)
 80057ec:	bb1b      	cbnz	r3, 8005836 <_vfiprintf_r+0x1d6>
 80057ee:	9b03      	ldr	r3, [sp, #12]
 80057f0:	3307      	adds	r3, #7
 80057f2:	f023 0307 	bic.w	r3, r3, #7
 80057f6:	3308      	adds	r3, #8
 80057f8:	9303      	str	r3, [sp, #12]
 80057fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057fc:	443b      	add	r3, r7
 80057fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8005800:	e76a      	b.n	80056d8 <_vfiprintf_r+0x78>
 8005802:	fb0c 3202 	mla	r2, ip, r2, r3
 8005806:	460c      	mov	r4, r1
 8005808:	2001      	movs	r0, #1
 800580a:	e7a8      	b.n	800575e <_vfiprintf_r+0xfe>
 800580c:	2300      	movs	r3, #0
 800580e:	3401      	adds	r4, #1
 8005810:	9305      	str	r3, [sp, #20]
 8005812:	4619      	mov	r1, r3
 8005814:	f04f 0c0a 	mov.w	ip, #10
 8005818:	4620      	mov	r0, r4
 800581a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800581e:	3a30      	subs	r2, #48	@ 0x30
 8005820:	2a09      	cmp	r2, #9
 8005822:	d903      	bls.n	800582c <_vfiprintf_r+0x1cc>
 8005824:	2b00      	cmp	r3, #0
 8005826:	d0c6      	beq.n	80057b6 <_vfiprintf_r+0x156>
 8005828:	9105      	str	r1, [sp, #20]
 800582a:	e7c4      	b.n	80057b6 <_vfiprintf_r+0x156>
 800582c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005830:	4604      	mov	r4, r0
 8005832:	2301      	movs	r3, #1
 8005834:	e7f0      	b.n	8005818 <_vfiprintf_r+0x1b8>
 8005836:	ab03      	add	r3, sp, #12
 8005838:	9300      	str	r3, [sp, #0]
 800583a:	462a      	mov	r2, r5
 800583c:	4b12      	ldr	r3, [pc, #72]	@ (8005888 <_vfiprintf_r+0x228>)
 800583e:	a904      	add	r1, sp, #16
 8005840:	4630      	mov	r0, r6
 8005842:	f7fd fbc7 	bl	8002fd4 <_printf_float>
 8005846:	4607      	mov	r7, r0
 8005848:	1c78      	adds	r0, r7, #1
 800584a:	d1d6      	bne.n	80057fa <_vfiprintf_r+0x19a>
 800584c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800584e:	07d9      	lsls	r1, r3, #31
 8005850:	d405      	bmi.n	800585e <_vfiprintf_r+0x1fe>
 8005852:	89ab      	ldrh	r3, [r5, #12]
 8005854:	059a      	lsls	r2, r3, #22
 8005856:	d402      	bmi.n	800585e <_vfiprintf_r+0x1fe>
 8005858:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800585a:	f7fe f92b 	bl	8003ab4 <__retarget_lock_release_recursive>
 800585e:	89ab      	ldrh	r3, [r5, #12]
 8005860:	065b      	lsls	r3, r3, #25
 8005862:	f53f af1f 	bmi.w	80056a4 <_vfiprintf_r+0x44>
 8005866:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005868:	e71e      	b.n	80056a8 <_vfiprintf_r+0x48>
 800586a:	ab03      	add	r3, sp, #12
 800586c:	9300      	str	r3, [sp, #0]
 800586e:	462a      	mov	r2, r5
 8005870:	4b05      	ldr	r3, [pc, #20]	@ (8005888 <_vfiprintf_r+0x228>)
 8005872:	a904      	add	r1, sp, #16
 8005874:	4630      	mov	r0, r6
 8005876:	f7fd fe45 	bl	8003504 <_printf_i>
 800587a:	e7e4      	b.n	8005846 <_vfiprintf_r+0x1e6>
 800587c:	080068e8 	.word	0x080068e8
 8005880:	080068f2 	.word	0x080068f2
 8005884:	08002fd5 	.word	0x08002fd5
 8005888:	0800563d 	.word	0x0800563d
 800588c:	080068ee 	.word	0x080068ee

08005890 <__swbuf_r>:
 8005890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005892:	460e      	mov	r6, r1
 8005894:	4614      	mov	r4, r2
 8005896:	4605      	mov	r5, r0
 8005898:	b118      	cbz	r0, 80058a2 <__swbuf_r+0x12>
 800589a:	6a03      	ldr	r3, [r0, #32]
 800589c:	b90b      	cbnz	r3, 80058a2 <__swbuf_r+0x12>
 800589e:	f7fd ffdd 	bl	800385c <__sinit>
 80058a2:	69a3      	ldr	r3, [r4, #24]
 80058a4:	60a3      	str	r3, [r4, #8]
 80058a6:	89a3      	ldrh	r3, [r4, #12]
 80058a8:	071a      	lsls	r2, r3, #28
 80058aa:	d501      	bpl.n	80058b0 <__swbuf_r+0x20>
 80058ac:	6923      	ldr	r3, [r4, #16]
 80058ae:	b943      	cbnz	r3, 80058c2 <__swbuf_r+0x32>
 80058b0:	4621      	mov	r1, r4
 80058b2:	4628      	mov	r0, r5
 80058b4:	f000 f82a 	bl	800590c <__swsetup_r>
 80058b8:	b118      	cbz	r0, 80058c2 <__swbuf_r+0x32>
 80058ba:	f04f 37ff 	mov.w	r7, #4294967295
 80058be:	4638      	mov	r0, r7
 80058c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058c2:	6823      	ldr	r3, [r4, #0]
 80058c4:	6922      	ldr	r2, [r4, #16]
 80058c6:	1a98      	subs	r0, r3, r2
 80058c8:	6963      	ldr	r3, [r4, #20]
 80058ca:	b2f6      	uxtb	r6, r6
 80058cc:	4283      	cmp	r3, r0
 80058ce:	4637      	mov	r7, r6
 80058d0:	dc05      	bgt.n	80058de <__swbuf_r+0x4e>
 80058d2:	4621      	mov	r1, r4
 80058d4:	4628      	mov	r0, r5
 80058d6:	f7ff fd99 	bl	800540c <_fflush_r>
 80058da:	2800      	cmp	r0, #0
 80058dc:	d1ed      	bne.n	80058ba <__swbuf_r+0x2a>
 80058de:	68a3      	ldr	r3, [r4, #8]
 80058e0:	3b01      	subs	r3, #1
 80058e2:	60a3      	str	r3, [r4, #8]
 80058e4:	6823      	ldr	r3, [r4, #0]
 80058e6:	1c5a      	adds	r2, r3, #1
 80058e8:	6022      	str	r2, [r4, #0]
 80058ea:	701e      	strb	r6, [r3, #0]
 80058ec:	6962      	ldr	r2, [r4, #20]
 80058ee:	1c43      	adds	r3, r0, #1
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d004      	beq.n	80058fe <__swbuf_r+0x6e>
 80058f4:	89a3      	ldrh	r3, [r4, #12]
 80058f6:	07db      	lsls	r3, r3, #31
 80058f8:	d5e1      	bpl.n	80058be <__swbuf_r+0x2e>
 80058fa:	2e0a      	cmp	r6, #10
 80058fc:	d1df      	bne.n	80058be <__swbuf_r+0x2e>
 80058fe:	4621      	mov	r1, r4
 8005900:	4628      	mov	r0, r5
 8005902:	f7ff fd83 	bl	800540c <_fflush_r>
 8005906:	2800      	cmp	r0, #0
 8005908:	d0d9      	beq.n	80058be <__swbuf_r+0x2e>
 800590a:	e7d6      	b.n	80058ba <__swbuf_r+0x2a>

0800590c <__swsetup_r>:
 800590c:	b538      	push	{r3, r4, r5, lr}
 800590e:	4b29      	ldr	r3, [pc, #164]	@ (80059b4 <__swsetup_r+0xa8>)
 8005910:	4605      	mov	r5, r0
 8005912:	6818      	ldr	r0, [r3, #0]
 8005914:	460c      	mov	r4, r1
 8005916:	b118      	cbz	r0, 8005920 <__swsetup_r+0x14>
 8005918:	6a03      	ldr	r3, [r0, #32]
 800591a:	b90b      	cbnz	r3, 8005920 <__swsetup_r+0x14>
 800591c:	f7fd ff9e 	bl	800385c <__sinit>
 8005920:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005924:	0719      	lsls	r1, r3, #28
 8005926:	d422      	bmi.n	800596e <__swsetup_r+0x62>
 8005928:	06da      	lsls	r2, r3, #27
 800592a:	d407      	bmi.n	800593c <__swsetup_r+0x30>
 800592c:	2209      	movs	r2, #9
 800592e:	602a      	str	r2, [r5, #0]
 8005930:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005934:	81a3      	strh	r3, [r4, #12]
 8005936:	f04f 30ff 	mov.w	r0, #4294967295
 800593a:	e033      	b.n	80059a4 <__swsetup_r+0x98>
 800593c:	0758      	lsls	r0, r3, #29
 800593e:	d512      	bpl.n	8005966 <__swsetup_r+0x5a>
 8005940:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005942:	b141      	cbz	r1, 8005956 <__swsetup_r+0x4a>
 8005944:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005948:	4299      	cmp	r1, r3
 800594a:	d002      	beq.n	8005952 <__swsetup_r+0x46>
 800594c:	4628      	mov	r0, r5
 800594e:	f7fe feff 	bl	8004750 <_free_r>
 8005952:	2300      	movs	r3, #0
 8005954:	6363      	str	r3, [r4, #52]	@ 0x34
 8005956:	89a3      	ldrh	r3, [r4, #12]
 8005958:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800595c:	81a3      	strh	r3, [r4, #12]
 800595e:	2300      	movs	r3, #0
 8005960:	6063      	str	r3, [r4, #4]
 8005962:	6923      	ldr	r3, [r4, #16]
 8005964:	6023      	str	r3, [r4, #0]
 8005966:	89a3      	ldrh	r3, [r4, #12]
 8005968:	f043 0308 	orr.w	r3, r3, #8
 800596c:	81a3      	strh	r3, [r4, #12]
 800596e:	6923      	ldr	r3, [r4, #16]
 8005970:	b94b      	cbnz	r3, 8005986 <__swsetup_r+0x7a>
 8005972:	89a3      	ldrh	r3, [r4, #12]
 8005974:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005978:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800597c:	d003      	beq.n	8005986 <__swsetup_r+0x7a>
 800597e:	4621      	mov	r1, r4
 8005980:	4628      	mov	r0, r5
 8005982:	f000 f883 	bl	8005a8c <__smakebuf_r>
 8005986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800598a:	f013 0201 	ands.w	r2, r3, #1
 800598e:	d00a      	beq.n	80059a6 <__swsetup_r+0x9a>
 8005990:	2200      	movs	r2, #0
 8005992:	60a2      	str	r2, [r4, #8]
 8005994:	6962      	ldr	r2, [r4, #20]
 8005996:	4252      	negs	r2, r2
 8005998:	61a2      	str	r2, [r4, #24]
 800599a:	6922      	ldr	r2, [r4, #16]
 800599c:	b942      	cbnz	r2, 80059b0 <__swsetup_r+0xa4>
 800599e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80059a2:	d1c5      	bne.n	8005930 <__swsetup_r+0x24>
 80059a4:	bd38      	pop	{r3, r4, r5, pc}
 80059a6:	0799      	lsls	r1, r3, #30
 80059a8:	bf58      	it	pl
 80059aa:	6962      	ldrpl	r2, [r4, #20]
 80059ac:	60a2      	str	r2, [r4, #8]
 80059ae:	e7f4      	b.n	800599a <__swsetup_r+0x8e>
 80059b0:	2000      	movs	r0, #0
 80059b2:	e7f7      	b.n	80059a4 <__swsetup_r+0x98>
 80059b4:	20000024 	.word	0x20000024

080059b8 <_raise_r>:
 80059b8:	291f      	cmp	r1, #31
 80059ba:	b538      	push	{r3, r4, r5, lr}
 80059bc:	4605      	mov	r5, r0
 80059be:	460c      	mov	r4, r1
 80059c0:	d904      	bls.n	80059cc <_raise_r+0x14>
 80059c2:	2316      	movs	r3, #22
 80059c4:	6003      	str	r3, [r0, #0]
 80059c6:	f04f 30ff 	mov.w	r0, #4294967295
 80059ca:	bd38      	pop	{r3, r4, r5, pc}
 80059cc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80059ce:	b112      	cbz	r2, 80059d6 <_raise_r+0x1e>
 80059d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80059d4:	b94b      	cbnz	r3, 80059ea <_raise_r+0x32>
 80059d6:	4628      	mov	r0, r5
 80059d8:	f000 f830 	bl	8005a3c <_getpid_r>
 80059dc:	4622      	mov	r2, r4
 80059de:	4601      	mov	r1, r0
 80059e0:	4628      	mov	r0, r5
 80059e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059e6:	f000 b817 	b.w	8005a18 <_kill_r>
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d00a      	beq.n	8005a04 <_raise_r+0x4c>
 80059ee:	1c59      	adds	r1, r3, #1
 80059f0:	d103      	bne.n	80059fa <_raise_r+0x42>
 80059f2:	2316      	movs	r3, #22
 80059f4:	6003      	str	r3, [r0, #0]
 80059f6:	2001      	movs	r0, #1
 80059f8:	e7e7      	b.n	80059ca <_raise_r+0x12>
 80059fa:	2100      	movs	r1, #0
 80059fc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005a00:	4620      	mov	r0, r4
 8005a02:	4798      	blx	r3
 8005a04:	2000      	movs	r0, #0
 8005a06:	e7e0      	b.n	80059ca <_raise_r+0x12>

08005a08 <raise>:
 8005a08:	4b02      	ldr	r3, [pc, #8]	@ (8005a14 <raise+0xc>)
 8005a0a:	4601      	mov	r1, r0
 8005a0c:	6818      	ldr	r0, [r3, #0]
 8005a0e:	f7ff bfd3 	b.w	80059b8 <_raise_r>
 8005a12:	bf00      	nop
 8005a14:	20000024 	.word	0x20000024

08005a18 <_kill_r>:
 8005a18:	b538      	push	{r3, r4, r5, lr}
 8005a1a:	4d07      	ldr	r5, [pc, #28]	@ (8005a38 <_kill_r+0x20>)
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	4604      	mov	r4, r0
 8005a20:	4608      	mov	r0, r1
 8005a22:	4611      	mov	r1, r2
 8005a24:	602b      	str	r3, [r5, #0]
 8005a26:	f7fc fa53 	bl	8001ed0 <_kill>
 8005a2a:	1c43      	adds	r3, r0, #1
 8005a2c:	d102      	bne.n	8005a34 <_kill_r+0x1c>
 8005a2e:	682b      	ldr	r3, [r5, #0]
 8005a30:	b103      	cbz	r3, 8005a34 <_kill_r+0x1c>
 8005a32:	6023      	str	r3, [r4, #0]
 8005a34:	bd38      	pop	{r3, r4, r5, pc}
 8005a36:	bf00      	nop
 8005a38:	2000034c 	.word	0x2000034c

08005a3c <_getpid_r>:
 8005a3c:	f7fc ba40 	b.w	8001ec0 <_getpid>

08005a40 <__swhatbuf_r>:
 8005a40:	b570      	push	{r4, r5, r6, lr}
 8005a42:	460c      	mov	r4, r1
 8005a44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a48:	2900      	cmp	r1, #0
 8005a4a:	b096      	sub	sp, #88	@ 0x58
 8005a4c:	4615      	mov	r5, r2
 8005a4e:	461e      	mov	r6, r3
 8005a50:	da0d      	bge.n	8005a6e <__swhatbuf_r+0x2e>
 8005a52:	89a3      	ldrh	r3, [r4, #12]
 8005a54:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005a58:	f04f 0100 	mov.w	r1, #0
 8005a5c:	bf14      	ite	ne
 8005a5e:	2340      	movne	r3, #64	@ 0x40
 8005a60:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005a64:	2000      	movs	r0, #0
 8005a66:	6031      	str	r1, [r6, #0]
 8005a68:	602b      	str	r3, [r5, #0]
 8005a6a:	b016      	add	sp, #88	@ 0x58
 8005a6c:	bd70      	pop	{r4, r5, r6, pc}
 8005a6e:	466a      	mov	r2, sp
 8005a70:	f000 f848 	bl	8005b04 <_fstat_r>
 8005a74:	2800      	cmp	r0, #0
 8005a76:	dbec      	blt.n	8005a52 <__swhatbuf_r+0x12>
 8005a78:	9901      	ldr	r1, [sp, #4]
 8005a7a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005a7e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005a82:	4259      	negs	r1, r3
 8005a84:	4159      	adcs	r1, r3
 8005a86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005a8a:	e7eb      	b.n	8005a64 <__swhatbuf_r+0x24>

08005a8c <__smakebuf_r>:
 8005a8c:	898b      	ldrh	r3, [r1, #12]
 8005a8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a90:	079d      	lsls	r5, r3, #30
 8005a92:	4606      	mov	r6, r0
 8005a94:	460c      	mov	r4, r1
 8005a96:	d507      	bpl.n	8005aa8 <__smakebuf_r+0x1c>
 8005a98:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005a9c:	6023      	str	r3, [r4, #0]
 8005a9e:	6123      	str	r3, [r4, #16]
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	6163      	str	r3, [r4, #20]
 8005aa4:	b003      	add	sp, #12
 8005aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005aa8:	ab01      	add	r3, sp, #4
 8005aaa:	466a      	mov	r2, sp
 8005aac:	f7ff ffc8 	bl	8005a40 <__swhatbuf_r>
 8005ab0:	9f00      	ldr	r7, [sp, #0]
 8005ab2:	4605      	mov	r5, r0
 8005ab4:	4639      	mov	r1, r7
 8005ab6:	4630      	mov	r0, r6
 8005ab8:	f7fe febe 	bl	8004838 <_malloc_r>
 8005abc:	b948      	cbnz	r0, 8005ad2 <__smakebuf_r+0x46>
 8005abe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ac2:	059a      	lsls	r2, r3, #22
 8005ac4:	d4ee      	bmi.n	8005aa4 <__smakebuf_r+0x18>
 8005ac6:	f023 0303 	bic.w	r3, r3, #3
 8005aca:	f043 0302 	orr.w	r3, r3, #2
 8005ace:	81a3      	strh	r3, [r4, #12]
 8005ad0:	e7e2      	b.n	8005a98 <__smakebuf_r+0xc>
 8005ad2:	89a3      	ldrh	r3, [r4, #12]
 8005ad4:	6020      	str	r0, [r4, #0]
 8005ad6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ada:	81a3      	strh	r3, [r4, #12]
 8005adc:	9b01      	ldr	r3, [sp, #4]
 8005ade:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005ae2:	b15b      	cbz	r3, 8005afc <__smakebuf_r+0x70>
 8005ae4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ae8:	4630      	mov	r0, r6
 8005aea:	f000 f81d 	bl	8005b28 <_isatty_r>
 8005aee:	b128      	cbz	r0, 8005afc <__smakebuf_r+0x70>
 8005af0:	89a3      	ldrh	r3, [r4, #12]
 8005af2:	f023 0303 	bic.w	r3, r3, #3
 8005af6:	f043 0301 	orr.w	r3, r3, #1
 8005afa:	81a3      	strh	r3, [r4, #12]
 8005afc:	89a3      	ldrh	r3, [r4, #12]
 8005afe:	431d      	orrs	r5, r3
 8005b00:	81a5      	strh	r5, [r4, #12]
 8005b02:	e7cf      	b.n	8005aa4 <__smakebuf_r+0x18>

08005b04 <_fstat_r>:
 8005b04:	b538      	push	{r3, r4, r5, lr}
 8005b06:	4d07      	ldr	r5, [pc, #28]	@ (8005b24 <_fstat_r+0x20>)
 8005b08:	2300      	movs	r3, #0
 8005b0a:	4604      	mov	r4, r0
 8005b0c:	4608      	mov	r0, r1
 8005b0e:	4611      	mov	r1, r2
 8005b10:	602b      	str	r3, [r5, #0]
 8005b12:	f7fc fa3d 	bl	8001f90 <_fstat>
 8005b16:	1c43      	adds	r3, r0, #1
 8005b18:	d102      	bne.n	8005b20 <_fstat_r+0x1c>
 8005b1a:	682b      	ldr	r3, [r5, #0]
 8005b1c:	b103      	cbz	r3, 8005b20 <_fstat_r+0x1c>
 8005b1e:	6023      	str	r3, [r4, #0]
 8005b20:	bd38      	pop	{r3, r4, r5, pc}
 8005b22:	bf00      	nop
 8005b24:	2000034c 	.word	0x2000034c

08005b28 <_isatty_r>:
 8005b28:	b538      	push	{r3, r4, r5, lr}
 8005b2a:	4d06      	ldr	r5, [pc, #24]	@ (8005b44 <_isatty_r+0x1c>)
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	4604      	mov	r4, r0
 8005b30:	4608      	mov	r0, r1
 8005b32:	602b      	str	r3, [r5, #0]
 8005b34:	f7fc fa3c 	bl	8001fb0 <_isatty>
 8005b38:	1c43      	adds	r3, r0, #1
 8005b3a:	d102      	bne.n	8005b42 <_isatty_r+0x1a>
 8005b3c:	682b      	ldr	r3, [r5, #0]
 8005b3e:	b103      	cbz	r3, 8005b42 <_isatty_r+0x1a>
 8005b40:	6023      	str	r3, [r4, #0]
 8005b42:	bd38      	pop	{r3, r4, r5, pc}
 8005b44:	2000034c 	.word	0x2000034c

08005b48 <log10f>:
 8005b48:	b508      	push	{r3, lr}
 8005b4a:	ed2d 8b02 	vpush	{d8}
 8005b4e:	eeb0 8a40 	vmov.f32	s16, s0
 8005b52:	f000 f88f 	bl	8005c74 <__ieee754_log10f>
 8005b56:	eeb4 8a48 	vcmp.f32	s16, s16
 8005b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b5e:	d60f      	bvs.n	8005b80 <log10f+0x38>
 8005b60:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8005b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b68:	d80a      	bhi.n	8005b80 <log10f+0x38>
 8005b6a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8005b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b72:	d108      	bne.n	8005b86 <log10f+0x3e>
 8005b74:	f7fd ff72 	bl	8003a5c <__errno>
 8005b78:	2322      	movs	r3, #34	@ 0x22
 8005b7a:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8005b9c <log10f+0x54>
 8005b7e:	6003      	str	r3, [r0, #0]
 8005b80:	ecbd 8b02 	vpop	{d8}
 8005b84:	bd08      	pop	{r3, pc}
 8005b86:	f7fd ff69 	bl	8003a5c <__errno>
 8005b8a:	ecbd 8b02 	vpop	{d8}
 8005b8e:	2321      	movs	r3, #33	@ 0x21
 8005b90:	6003      	str	r3, [r0, #0]
 8005b92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005b96:	4802      	ldr	r0, [pc, #8]	@ (8005ba0 <log10f+0x58>)
 8005b98:	f000 b866 	b.w	8005c68 <nanf>
 8005b9c:	ff800000 	.word	0xff800000
 8005ba0:	0800693e 	.word	0x0800693e

08005ba4 <powf>:
 8005ba4:	b508      	push	{r3, lr}
 8005ba6:	ed2d 8b04 	vpush	{d8-d9}
 8005baa:	eeb0 8a60 	vmov.f32	s16, s1
 8005bae:	eeb0 9a40 	vmov.f32	s18, s0
 8005bb2:	f000 f8b7 	bl	8005d24 <__ieee754_powf>
 8005bb6:	eeb4 8a48 	vcmp.f32	s16, s16
 8005bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bbe:	eef0 8a40 	vmov.f32	s17, s0
 8005bc2:	d63e      	bvs.n	8005c42 <powf+0x9e>
 8005bc4:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8005bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bcc:	d112      	bne.n	8005bf4 <powf+0x50>
 8005bce:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8005bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bd6:	d039      	beq.n	8005c4c <powf+0xa8>
 8005bd8:	eeb0 0a48 	vmov.f32	s0, s16
 8005bdc:	f000 f839 	bl	8005c52 <finitef>
 8005be0:	b378      	cbz	r0, 8005c42 <powf+0x9e>
 8005be2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8005be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bea:	d52a      	bpl.n	8005c42 <powf+0x9e>
 8005bec:	f7fd ff36 	bl	8003a5c <__errno>
 8005bf0:	2322      	movs	r3, #34	@ 0x22
 8005bf2:	e014      	b.n	8005c1e <powf+0x7a>
 8005bf4:	f000 f82d 	bl	8005c52 <finitef>
 8005bf8:	b998      	cbnz	r0, 8005c22 <powf+0x7e>
 8005bfa:	eeb0 0a49 	vmov.f32	s0, s18
 8005bfe:	f000 f828 	bl	8005c52 <finitef>
 8005c02:	b170      	cbz	r0, 8005c22 <powf+0x7e>
 8005c04:	eeb0 0a48 	vmov.f32	s0, s16
 8005c08:	f000 f823 	bl	8005c52 <finitef>
 8005c0c:	b148      	cbz	r0, 8005c22 <powf+0x7e>
 8005c0e:	eef4 8a68 	vcmp.f32	s17, s17
 8005c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c16:	d7e9      	bvc.n	8005bec <powf+0x48>
 8005c18:	f7fd ff20 	bl	8003a5c <__errno>
 8005c1c:	2321      	movs	r3, #33	@ 0x21
 8005c1e:	6003      	str	r3, [r0, #0]
 8005c20:	e00f      	b.n	8005c42 <powf+0x9e>
 8005c22:	eef5 8a40 	vcmp.f32	s17, #0.0
 8005c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c2a:	d10a      	bne.n	8005c42 <powf+0x9e>
 8005c2c:	eeb0 0a49 	vmov.f32	s0, s18
 8005c30:	f000 f80f 	bl	8005c52 <finitef>
 8005c34:	b128      	cbz	r0, 8005c42 <powf+0x9e>
 8005c36:	eeb0 0a48 	vmov.f32	s0, s16
 8005c3a:	f000 f80a 	bl	8005c52 <finitef>
 8005c3e:	2800      	cmp	r0, #0
 8005c40:	d1d4      	bne.n	8005bec <powf+0x48>
 8005c42:	eeb0 0a68 	vmov.f32	s0, s17
 8005c46:	ecbd 8b04 	vpop	{d8-d9}
 8005c4a:	bd08      	pop	{r3, pc}
 8005c4c:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8005c50:	e7f7      	b.n	8005c42 <powf+0x9e>

08005c52 <finitef>:
 8005c52:	ee10 3a10 	vmov	r3, s0
 8005c56:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8005c5a:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8005c5e:	bfac      	ite	ge
 8005c60:	2000      	movge	r0, #0
 8005c62:	2001      	movlt	r0, #1
 8005c64:	4770      	bx	lr
	...

08005c68 <nanf>:
 8005c68:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005c70 <nanf+0x8>
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	7fc00000 	.word	0x7fc00000

08005c74 <__ieee754_log10f>:
 8005c74:	b508      	push	{r3, lr}
 8005c76:	ee10 3a10 	vmov	r3, s0
 8005c7a:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8005c7e:	ed2d 8b02 	vpush	{d8}
 8005c82:	d108      	bne.n	8005c96 <__ieee754_log10f+0x22>
 8005c84:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8005d0c <__ieee754_log10f+0x98>
 8005c88:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8005d10 <__ieee754_log10f+0x9c>
 8005c8c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8005c90:	ecbd 8b02 	vpop	{d8}
 8005c94:	bd08      	pop	{r3, pc}
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	461a      	mov	r2, r3
 8005c9a:	da02      	bge.n	8005ca2 <__ieee754_log10f+0x2e>
 8005c9c:	ee30 7a40 	vsub.f32	s14, s0, s0
 8005ca0:	e7f2      	b.n	8005c88 <__ieee754_log10f+0x14>
 8005ca2:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8005ca6:	db02      	blt.n	8005cae <__ieee754_log10f+0x3a>
 8005ca8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005cac:	e7f0      	b.n	8005c90 <__ieee754_log10f+0x1c>
 8005cae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005cb2:	bfbf      	itttt	lt
 8005cb4:	eddf 7a17 	vldrlt	s15, [pc, #92]	@ 8005d14 <__ieee754_log10f+0xa0>
 8005cb8:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8005cbc:	f06f 0118 	mvnlt.w	r1, #24
 8005cc0:	ee17 2a90 	vmovlt	r2, s15
 8005cc4:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8005cc8:	bfa8      	it	ge
 8005cca:	2100      	movge	r1, #0
 8005ccc:	3b7f      	subs	r3, #127	@ 0x7f
 8005cce:	440b      	add	r3, r1
 8005cd0:	0fd9      	lsrs	r1, r3, #31
 8005cd2:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8005cd6:	ee07 3a90 	vmov	s15, r3
 8005cda:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8005cde:	f1c1 037f 	rsb	r3, r1, #127	@ 0x7f
 8005ce2:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8005ce6:	ee00 3a10 	vmov	s0, r3
 8005cea:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8005cee:	f000 fb81 	bl	80063f4 <__ieee754_logf>
 8005cf2:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8005d18 <__ieee754_log10f+0xa4>
 8005cf6:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005cfa:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8005d1c <__ieee754_log10f+0xa8>
 8005cfe:	eea8 0a27 	vfma.f32	s0, s16, s15
 8005d02:	eddf 7a07 	vldr	s15, [pc, #28]	@ 8005d20 <__ieee754_log10f+0xac>
 8005d06:	eea8 0a27 	vfma.f32	s0, s16, s15
 8005d0a:	e7c1      	b.n	8005c90 <__ieee754_log10f+0x1c>
 8005d0c:	cc000000 	.word	0xcc000000
 8005d10:	00000000 	.word	0x00000000
 8005d14:	4c000000 	.word	0x4c000000
 8005d18:	3ede5bd9 	.word	0x3ede5bd9
 8005d1c:	355427db 	.word	0x355427db
 8005d20:	3e9a2080 	.word	0x3e9a2080

08005d24 <__ieee754_powf>:
 8005d24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d28:	ee10 4a90 	vmov	r4, s1
 8005d2c:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8005d30:	ed2d 8b02 	vpush	{d8}
 8005d34:	ee10 6a10 	vmov	r6, s0
 8005d38:	eeb0 8a40 	vmov.f32	s16, s0
 8005d3c:	eef0 8a60 	vmov.f32	s17, s1
 8005d40:	d10c      	bne.n	8005d5c <__ieee754_powf+0x38>
 8005d42:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8005d46:	0076      	lsls	r6, r6, #1
 8005d48:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8005d4c:	f240 829c 	bls.w	8006288 <__ieee754_powf+0x564>
 8005d50:	ee38 0a28 	vadd.f32	s0, s16, s17
 8005d54:	ecbd 8b02 	vpop	{d8}
 8005d58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d5c:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8005d60:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8005d64:	d802      	bhi.n	8005d6c <__ieee754_powf+0x48>
 8005d66:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8005d6a:	d908      	bls.n	8005d7e <__ieee754_powf+0x5a>
 8005d6c:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8005d70:	d1ee      	bne.n	8005d50 <__ieee754_powf+0x2c>
 8005d72:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8005d76:	0064      	lsls	r4, r4, #1
 8005d78:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8005d7c:	e7e6      	b.n	8005d4c <__ieee754_powf+0x28>
 8005d7e:	2e00      	cmp	r6, #0
 8005d80:	da1e      	bge.n	8005dc0 <__ieee754_powf+0x9c>
 8005d82:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8005d86:	d22b      	bcs.n	8005de0 <__ieee754_powf+0xbc>
 8005d88:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8005d8c:	d332      	bcc.n	8005df4 <__ieee754_powf+0xd0>
 8005d8e:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8005d92:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8005d96:	fa49 f503 	asr.w	r5, r9, r3
 8005d9a:	fa05 f303 	lsl.w	r3, r5, r3
 8005d9e:	454b      	cmp	r3, r9
 8005da0:	d126      	bne.n	8005df0 <__ieee754_powf+0xcc>
 8005da2:	f005 0501 	and.w	r5, r5, #1
 8005da6:	f1c5 0502 	rsb	r5, r5, #2
 8005daa:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8005dae:	d122      	bne.n	8005df6 <__ieee754_powf+0xd2>
 8005db0:	2c00      	cmp	r4, #0
 8005db2:	f280 826f 	bge.w	8006294 <__ieee754_powf+0x570>
 8005db6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8005dba:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8005dbe:	e7c9      	b.n	8005d54 <__ieee754_powf+0x30>
 8005dc0:	2500      	movs	r5, #0
 8005dc2:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8005dc6:	d1f0      	bne.n	8005daa <__ieee754_powf+0x86>
 8005dc8:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8005dcc:	f000 825c 	beq.w	8006288 <__ieee754_powf+0x564>
 8005dd0:	d908      	bls.n	8005de4 <__ieee754_powf+0xc0>
 8005dd2:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 8006134 <__ieee754_powf+0x410>
 8005dd6:	2c00      	cmp	r4, #0
 8005dd8:	bfa8      	it	ge
 8005dda:	eeb0 0a68 	vmovge.f32	s0, s17
 8005dde:	e7b9      	b.n	8005d54 <__ieee754_powf+0x30>
 8005de0:	2502      	movs	r5, #2
 8005de2:	e7ee      	b.n	8005dc2 <__ieee754_powf+0x9e>
 8005de4:	2c00      	cmp	r4, #0
 8005de6:	f280 8252 	bge.w	800628e <__ieee754_powf+0x56a>
 8005dea:	eeb1 0a68 	vneg.f32	s0, s17
 8005dee:	e7b1      	b.n	8005d54 <__ieee754_powf+0x30>
 8005df0:	2500      	movs	r5, #0
 8005df2:	e7da      	b.n	8005daa <__ieee754_powf+0x86>
 8005df4:	2500      	movs	r5, #0
 8005df6:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8005dfa:	d102      	bne.n	8005e02 <__ieee754_powf+0xde>
 8005dfc:	ee28 0a08 	vmul.f32	s0, s16, s16
 8005e00:	e7a8      	b.n	8005d54 <__ieee754_powf+0x30>
 8005e02:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8005e06:	d109      	bne.n	8005e1c <__ieee754_powf+0xf8>
 8005e08:	2e00      	cmp	r6, #0
 8005e0a:	db07      	blt.n	8005e1c <__ieee754_powf+0xf8>
 8005e0c:	eeb0 0a48 	vmov.f32	s0, s16
 8005e10:	ecbd 8b02 	vpop	{d8}
 8005e14:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e18:	f000 bae8 	b.w	80063ec <__ieee754_sqrtf>
 8005e1c:	eeb0 0a48 	vmov.f32	s0, s16
 8005e20:	f000 fa50 	bl	80062c4 <fabsf>
 8005e24:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8005e28:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8005e2c:	4647      	mov	r7, r8
 8005e2e:	d002      	beq.n	8005e36 <__ieee754_powf+0x112>
 8005e30:	f1b8 0f00 	cmp.w	r8, #0
 8005e34:	d117      	bne.n	8005e66 <__ieee754_powf+0x142>
 8005e36:	2c00      	cmp	r4, #0
 8005e38:	bfbc      	itt	lt
 8005e3a:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8005e3e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8005e42:	2e00      	cmp	r6, #0
 8005e44:	da86      	bge.n	8005d54 <__ieee754_powf+0x30>
 8005e46:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8005e4a:	ea58 0805 	orrs.w	r8, r8, r5
 8005e4e:	d104      	bne.n	8005e5a <__ieee754_powf+0x136>
 8005e50:	ee70 7a40 	vsub.f32	s15, s0, s0
 8005e54:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8005e58:	e77c      	b.n	8005d54 <__ieee754_powf+0x30>
 8005e5a:	2d01      	cmp	r5, #1
 8005e5c:	f47f af7a 	bne.w	8005d54 <__ieee754_powf+0x30>
 8005e60:	eeb1 0a40 	vneg.f32	s0, s0
 8005e64:	e776      	b.n	8005d54 <__ieee754_powf+0x30>
 8005e66:	0ff0      	lsrs	r0, r6, #31
 8005e68:	3801      	subs	r0, #1
 8005e6a:	ea55 0300 	orrs.w	r3, r5, r0
 8005e6e:	d104      	bne.n	8005e7a <__ieee754_powf+0x156>
 8005e70:	ee38 8a48 	vsub.f32	s16, s16, s16
 8005e74:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8005e78:	e76c      	b.n	8005d54 <__ieee754_powf+0x30>
 8005e7a:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8005e7e:	d973      	bls.n	8005f68 <__ieee754_powf+0x244>
 8005e80:	4bad      	ldr	r3, [pc, #692]	@ (8006138 <__ieee754_powf+0x414>)
 8005e82:	4598      	cmp	r8, r3
 8005e84:	d808      	bhi.n	8005e98 <__ieee754_powf+0x174>
 8005e86:	2c00      	cmp	r4, #0
 8005e88:	da0b      	bge.n	8005ea2 <__ieee754_powf+0x17e>
 8005e8a:	2000      	movs	r0, #0
 8005e8c:	ecbd 8b02 	vpop	{d8}
 8005e90:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e94:	f000 baa4 	b.w	80063e0 <__math_oflowf>
 8005e98:	4ba8      	ldr	r3, [pc, #672]	@ (800613c <__ieee754_powf+0x418>)
 8005e9a:	4598      	cmp	r8, r3
 8005e9c:	d908      	bls.n	8005eb0 <__ieee754_powf+0x18c>
 8005e9e:	2c00      	cmp	r4, #0
 8005ea0:	dcf3      	bgt.n	8005e8a <__ieee754_powf+0x166>
 8005ea2:	2000      	movs	r0, #0
 8005ea4:	ecbd 8b02 	vpop	{d8}
 8005ea8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005eac:	f000 ba92 	b.w	80063d4 <__math_uflowf>
 8005eb0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8005eb4:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005eb8:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8006140 <__ieee754_powf+0x41c>
 8005ebc:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8005ec0:	eee0 6a67 	vfms.f32	s13, s0, s15
 8005ec4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8005ec8:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8005ecc:	ee20 7a00 	vmul.f32	s14, s0, s0
 8005ed0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ed4:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 8006144 <__ieee754_powf+0x420>
 8005ed8:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8005edc:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8006148 <__ieee754_powf+0x424>
 8005ee0:	eee0 7a07 	vfma.f32	s15, s0, s14
 8005ee4:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 800614c <__ieee754_powf+0x428>
 8005ee8:	eef0 6a67 	vmov.f32	s13, s15
 8005eec:	eee0 6a07 	vfma.f32	s13, s0, s14
 8005ef0:	ee16 3a90 	vmov	r3, s13
 8005ef4:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005ef8:	f023 030f 	bic.w	r3, r3, #15
 8005efc:	ee06 3a90 	vmov	s13, r3
 8005f00:	eee0 6a47 	vfms.f32	s13, s0, s14
 8005f04:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005f08:	3d01      	subs	r5, #1
 8005f0a:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 8005f0e:	4305      	orrs	r5, r0
 8005f10:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f14:	f024 040f 	bic.w	r4, r4, #15
 8005f18:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8005f1c:	bf18      	it	ne
 8005f1e:	eeb0 8a47 	vmovne.f32	s16, s14
 8005f22:	ee07 4a10 	vmov	s14, r4
 8005f26:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8005f2a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8005f2e:	ee07 3a90 	vmov	s15, r3
 8005f32:	eee7 0a27 	vfma.f32	s1, s14, s15
 8005f36:	ee07 4a10 	vmov	s14, r4
 8005f3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f3e:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8005f42:	ee17 1a10 	vmov	r1, s14
 8005f46:	2900      	cmp	r1, #0
 8005f48:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005f4c:	f340 80dd 	ble.w	800610a <__ieee754_powf+0x3e6>
 8005f50:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8005f54:	f240 80ca 	bls.w	80060ec <__ieee754_powf+0x3c8>
 8005f58:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8005f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f60:	bf4c      	ite	mi
 8005f62:	2001      	movmi	r0, #1
 8005f64:	2000      	movpl	r0, #0
 8005f66:	e791      	b.n	8005e8c <__ieee754_powf+0x168>
 8005f68:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8005f6c:	bf01      	itttt	eq
 8005f6e:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8006150 <__ieee754_powf+0x42c>
 8005f72:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8005f76:	f06f 0317 	mvneq.w	r3, #23
 8005f7a:	ee17 7a90 	vmoveq	r7, s15
 8005f7e:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8005f82:	bf18      	it	ne
 8005f84:	2300      	movne	r3, #0
 8005f86:	3a7f      	subs	r2, #127	@ 0x7f
 8005f88:	441a      	add	r2, r3
 8005f8a:	4b72      	ldr	r3, [pc, #456]	@ (8006154 <__ieee754_powf+0x430>)
 8005f8c:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8005f90:	429f      	cmp	r7, r3
 8005f92:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8005f96:	dd06      	ble.n	8005fa6 <__ieee754_powf+0x282>
 8005f98:	4b6f      	ldr	r3, [pc, #444]	@ (8006158 <__ieee754_powf+0x434>)
 8005f9a:	429f      	cmp	r7, r3
 8005f9c:	f340 80a4 	ble.w	80060e8 <__ieee754_powf+0x3c4>
 8005fa0:	3201      	adds	r2, #1
 8005fa2:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8005fa6:	2600      	movs	r6, #0
 8005fa8:	4b6c      	ldr	r3, [pc, #432]	@ (800615c <__ieee754_powf+0x438>)
 8005faa:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8005fae:	ee07 1a10 	vmov	s14, r1
 8005fb2:	edd3 5a00 	vldr	s11, [r3]
 8005fb6:	4b6a      	ldr	r3, [pc, #424]	@ (8006160 <__ieee754_powf+0x43c>)
 8005fb8:	ee75 7a87 	vadd.f32	s15, s11, s14
 8005fbc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fc0:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8005fc4:	1049      	asrs	r1, r1, #1
 8005fc6:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8005fca:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8005fce:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8005fd2:	ee37 6a65 	vsub.f32	s12, s14, s11
 8005fd6:	ee07 1a90 	vmov	s15, r1
 8005fda:	ee26 5a24 	vmul.f32	s10, s12, s9
 8005fde:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8005fe2:	ee15 7a10 	vmov	r7, s10
 8005fe6:	401f      	ands	r7, r3
 8005fe8:	ee06 7a90 	vmov	s13, r7
 8005fec:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8005ff0:	ee37 7a65 	vsub.f32	s14, s14, s11
 8005ff4:	ee65 7a05 	vmul.f32	s15, s10, s10
 8005ff8:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8005ffc:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006164 <__ieee754_powf+0x440>
 8006000:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8006168 <__ieee754_powf+0x444>
 8006004:	eee7 5a87 	vfma.f32	s11, s15, s14
 8006008:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800616c <__ieee754_powf+0x448>
 800600c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8006010:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8006140 <__ieee754_powf+0x41c>
 8006014:	eee7 5a27 	vfma.f32	s11, s14, s15
 8006018:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8006170 <__ieee754_powf+0x44c>
 800601c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8006020:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8006174 <__ieee754_powf+0x450>
 8006024:	ee26 6a24 	vmul.f32	s12, s12, s9
 8006028:	eee7 5a27 	vfma.f32	s11, s14, s15
 800602c:	ee35 7a26 	vadd.f32	s14, s10, s13
 8006030:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8006034:	ee27 7a06 	vmul.f32	s14, s14, s12
 8006038:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800603c:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8006040:	eef0 5a67 	vmov.f32	s11, s15
 8006044:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8006048:	ee75 5a87 	vadd.f32	s11, s11, s14
 800604c:	ee15 1a90 	vmov	r1, s11
 8006050:	4019      	ands	r1, r3
 8006052:	ee05 1a90 	vmov	s11, r1
 8006056:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800605a:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800605e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006062:	ee67 7a85 	vmul.f32	s15, s15, s10
 8006066:	eee6 7a25 	vfma.f32	s15, s12, s11
 800606a:	eeb0 6a67 	vmov.f32	s12, s15
 800606e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8006072:	ee16 1a10 	vmov	r1, s12
 8006076:	4019      	ands	r1, r3
 8006078:	ee06 1a10 	vmov	s12, r1
 800607c:	eeb0 7a46 	vmov.f32	s14, s12
 8006080:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8006084:	493c      	ldr	r1, [pc, #240]	@ (8006178 <__ieee754_powf+0x454>)
 8006086:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800608a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800608e:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800617c <__ieee754_powf+0x458>
 8006092:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8006180 <__ieee754_powf+0x45c>
 8006096:	ee67 7a87 	vmul.f32	s15, s15, s14
 800609a:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8006184 <__ieee754_powf+0x460>
 800609e:	eee6 7a07 	vfma.f32	s15, s12, s14
 80060a2:	ed91 7a00 	vldr	s14, [r1]
 80060a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80060aa:	ee07 2a10 	vmov	s14, r2
 80060ae:	eef0 6a67 	vmov.f32	s13, s15
 80060b2:	4a35      	ldr	r2, [pc, #212]	@ (8006188 <__ieee754_powf+0x464>)
 80060b4:	eee6 6a25 	vfma.f32	s13, s12, s11
 80060b8:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 80060bc:	ed92 5a00 	vldr	s10, [r2]
 80060c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80060c4:	ee76 6a85 	vadd.f32	s13, s13, s10
 80060c8:	ee76 6a87 	vadd.f32	s13, s13, s14
 80060cc:	ee16 2a90 	vmov	r2, s13
 80060d0:	4013      	ands	r3, r2
 80060d2:	ee06 3a90 	vmov	s13, r3
 80060d6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80060da:	ee37 7a45 	vsub.f32	s14, s14, s10
 80060de:	eea6 7a65 	vfms.f32	s14, s12, s11
 80060e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80060e6:	e70f      	b.n	8005f08 <__ieee754_powf+0x1e4>
 80060e8:	2601      	movs	r6, #1
 80060ea:	e75d      	b.n	8005fa8 <__ieee754_powf+0x284>
 80060ec:	d152      	bne.n	8006194 <__ieee754_powf+0x470>
 80060ee:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800618c <__ieee754_powf+0x468>
 80060f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80060f6:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80060fa:	eef4 6ac7 	vcmpe.f32	s13, s14
 80060fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006102:	f73f af29 	bgt.w	8005f58 <__ieee754_powf+0x234>
 8006106:	2386      	movs	r3, #134	@ 0x86
 8006108:	e048      	b.n	800619c <__ieee754_powf+0x478>
 800610a:	4a21      	ldr	r2, [pc, #132]	@ (8006190 <__ieee754_powf+0x46c>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d907      	bls.n	8006120 <__ieee754_powf+0x3fc>
 8006110:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8006114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006118:	bf4c      	ite	mi
 800611a:	2001      	movmi	r0, #1
 800611c:	2000      	movpl	r0, #0
 800611e:	e6c1      	b.n	8005ea4 <__ieee754_powf+0x180>
 8006120:	d138      	bne.n	8006194 <__ieee754_powf+0x470>
 8006122:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006126:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800612a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800612e:	dbea      	blt.n	8006106 <__ieee754_powf+0x3e2>
 8006130:	e7ee      	b.n	8006110 <__ieee754_powf+0x3ec>
 8006132:	bf00      	nop
 8006134:	00000000 	.word	0x00000000
 8006138:	3f7ffff3 	.word	0x3f7ffff3
 800613c:	3f800007 	.word	0x3f800007
 8006140:	3eaaaaab 	.word	0x3eaaaaab
 8006144:	3fb8aa3b 	.word	0x3fb8aa3b
 8006148:	36eca570 	.word	0x36eca570
 800614c:	3fb8aa00 	.word	0x3fb8aa00
 8006150:	4b800000 	.word	0x4b800000
 8006154:	001cc471 	.word	0x001cc471
 8006158:	005db3d6 	.word	0x005db3d6
 800615c:	08006a50 	.word	0x08006a50
 8006160:	fffff000 	.word	0xfffff000
 8006164:	3e6c3255 	.word	0x3e6c3255
 8006168:	3e53f142 	.word	0x3e53f142
 800616c:	3e8ba305 	.word	0x3e8ba305
 8006170:	3edb6db7 	.word	0x3edb6db7
 8006174:	3f19999a 	.word	0x3f19999a
 8006178:	08006a40 	.word	0x08006a40
 800617c:	3f76384f 	.word	0x3f76384f
 8006180:	3f763800 	.word	0x3f763800
 8006184:	369dc3a0 	.word	0x369dc3a0
 8006188:	08006a48 	.word	0x08006a48
 800618c:	3338aa3c 	.word	0x3338aa3c
 8006190:	43160000 	.word	0x43160000
 8006194:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8006198:	d971      	bls.n	800627e <__ieee754_powf+0x55a>
 800619a:	15db      	asrs	r3, r3, #23
 800619c:	3b7e      	subs	r3, #126	@ 0x7e
 800619e:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80061a2:	4118      	asrs	r0, r3
 80061a4:	4408      	add	r0, r1
 80061a6:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80061aa:	4a3c      	ldr	r2, [pc, #240]	@ (800629c <__ieee754_powf+0x578>)
 80061ac:	3b7f      	subs	r3, #127	@ 0x7f
 80061ae:	411a      	asrs	r2, r3
 80061b0:	4002      	ands	r2, r0
 80061b2:	ee07 2a10 	vmov	s14, r2
 80061b6:	f3c0 0016 	ubfx	r0, r0, #0, #23
 80061ba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80061be:	f1c3 0317 	rsb	r3, r3, #23
 80061c2:	4118      	asrs	r0, r3
 80061c4:	2900      	cmp	r1, #0
 80061c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80061ca:	bfb8      	it	lt
 80061cc:	4240      	neglt	r0, r0
 80061ce:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80061d2:	eddf 6a33 	vldr	s13, [pc, #204]	@ 80062a0 <__ieee754_powf+0x57c>
 80061d6:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 80062a4 <__ieee754_powf+0x580>
 80061da:	ee17 3a10 	vmov	r3, s14
 80061de:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80061e2:	f023 030f 	bic.w	r3, r3, #15
 80061e6:	ee07 3a10 	vmov	s14, r3
 80061ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061ee:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80061f2:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80061f6:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 80062a8 <__ieee754_powf+0x584>
 80061fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061fe:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8006202:	eef0 6a67 	vmov.f32	s13, s15
 8006206:	eee7 6a06 	vfma.f32	s13, s14, s12
 800620a:	eef0 5a66 	vmov.f32	s11, s13
 800620e:	eee7 5a46 	vfms.f32	s11, s14, s12
 8006212:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8006216:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800621a:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 80062ac <__ieee754_powf+0x588>
 800621e:	eddf 5a24 	vldr	s11, [pc, #144]	@ 80062b0 <__ieee754_powf+0x58c>
 8006222:	eea7 6a25 	vfma.f32	s12, s14, s11
 8006226:	eddf 5a23 	vldr	s11, [pc, #140]	@ 80062b4 <__ieee754_powf+0x590>
 800622a:	eee6 5a07 	vfma.f32	s11, s12, s14
 800622e:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 80062b8 <__ieee754_powf+0x594>
 8006232:	eea5 6a87 	vfma.f32	s12, s11, s14
 8006236:	eddf 5a21 	vldr	s11, [pc, #132]	@ 80062bc <__ieee754_powf+0x598>
 800623a:	eee6 5a07 	vfma.f32	s11, s12, s14
 800623e:	eeb0 6a66 	vmov.f32	s12, s13
 8006242:	eea5 6ac7 	vfms.f32	s12, s11, s14
 8006246:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800624a:	ee66 5a86 	vmul.f32	s11, s13, s12
 800624e:	ee36 6a47 	vsub.f32	s12, s12, s14
 8006252:	eee6 7aa7 	vfma.f32	s15, s13, s15
 8006256:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800625a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800625e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006262:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006266:	ee10 3a10 	vmov	r3, s0
 800626a:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800626e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006272:	da06      	bge.n	8006282 <__ieee754_powf+0x55e>
 8006274:	f000 f82e 	bl	80062d4 <scalbnf>
 8006278:	ee20 0a08 	vmul.f32	s0, s0, s16
 800627c:	e56a      	b.n	8005d54 <__ieee754_powf+0x30>
 800627e:	2000      	movs	r0, #0
 8006280:	e7a5      	b.n	80061ce <__ieee754_powf+0x4aa>
 8006282:	ee00 3a10 	vmov	s0, r3
 8006286:	e7f7      	b.n	8006278 <__ieee754_powf+0x554>
 8006288:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800628c:	e562      	b.n	8005d54 <__ieee754_powf+0x30>
 800628e:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 80062c0 <__ieee754_powf+0x59c>
 8006292:	e55f      	b.n	8005d54 <__ieee754_powf+0x30>
 8006294:	eeb0 0a48 	vmov.f32	s0, s16
 8006298:	e55c      	b.n	8005d54 <__ieee754_powf+0x30>
 800629a:	bf00      	nop
 800629c:	ff800000 	.word	0xff800000
 80062a0:	3f317218 	.word	0x3f317218
 80062a4:	3f317200 	.word	0x3f317200
 80062a8:	35bfbe8c 	.word	0x35bfbe8c
 80062ac:	b5ddea0e 	.word	0xb5ddea0e
 80062b0:	3331bb4c 	.word	0x3331bb4c
 80062b4:	388ab355 	.word	0x388ab355
 80062b8:	bb360b61 	.word	0xbb360b61
 80062bc:	3e2aaaab 	.word	0x3e2aaaab
 80062c0:	00000000 	.word	0x00000000

080062c4 <fabsf>:
 80062c4:	ee10 3a10 	vmov	r3, s0
 80062c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80062cc:	ee00 3a10 	vmov	s0, r3
 80062d0:	4770      	bx	lr
	...

080062d4 <scalbnf>:
 80062d4:	ee10 3a10 	vmov	r3, s0
 80062d8:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80062dc:	d02b      	beq.n	8006336 <scalbnf+0x62>
 80062de:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80062e2:	d302      	bcc.n	80062ea <scalbnf+0x16>
 80062e4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80062e8:	4770      	bx	lr
 80062ea:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80062ee:	d123      	bne.n	8006338 <scalbnf+0x64>
 80062f0:	4b24      	ldr	r3, [pc, #144]	@ (8006384 <scalbnf+0xb0>)
 80062f2:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8006388 <scalbnf+0xb4>
 80062f6:	4298      	cmp	r0, r3
 80062f8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80062fc:	db17      	blt.n	800632e <scalbnf+0x5a>
 80062fe:	ee10 3a10 	vmov	r3, s0
 8006302:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006306:	3a19      	subs	r2, #25
 8006308:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800630c:	4288      	cmp	r0, r1
 800630e:	dd15      	ble.n	800633c <scalbnf+0x68>
 8006310:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800638c <scalbnf+0xb8>
 8006314:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8006390 <scalbnf+0xbc>
 8006318:	ee10 3a10 	vmov	r3, s0
 800631c:	eeb0 7a67 	vmov.f32	s14, s15
 8006320:	2b00      	cmp	r3, #0
 8006322:	bfb8      	it	lt
 8006324:	eef0 7a66 	vmovlt.f32	s15, s13
 8006328:	ee27 0a87 	vmul.f32	s0, s15, s14
 800632c:	4770      	bx	lr
 800632e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8006394 <scalbnf+0xc0>
 8006332:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006336:	4770      	bx	lr
 8006338:	0dd2      	lsrs	r2, r2, #23
 800633a:	e7e5      	b.n	8006308 <scalbnf+0x34>
 800633c:	4410      	add	r0, r2
 800633e:	28fe      	cmp	r0, #254	@ 0xfe
 8006340:	dce6      	bgt.n	8006310 <scalbnf+0x3c>
 8006342:	2800      	cmp	r0, #0
 8006344:	dd06      	ble.n	8006354 <scalbnf+0x80>
 8006346:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800634a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800634e:	ee00 3a10 	vmov	s0, r3
 8006352:	4770      	bx	lr
 8006354:	f110 0f16 	cmn.w	r0, #22
 8006358:	da09      	bge.n	800636e <scalbnf+0x9a>
 800635a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8006394 <scalbnf+0xc0>
 800635e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8006398 <scalbnf+0xc4>
 8006362:	ee10 3a10 	vmov	r3, s0
 8006366:	eeb0 7a67 	vmov.f32	s14, s15
 800636a:	2b00      	cmp	r3, #0
 800636c:	e7d9      	b.n	8006322 <scalbnf+0x4e>
 800636e:	3019      	adds	r0, #25
 8006370:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006374:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8006378:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800639c <scalbnf+0xc8>
 800637c:	ee07 3a90 	vmov	s15, r3
 8006380:	e7d7      	b.n	8006332 <scalbnf+0x5e>
 8006382:	bf00      	nop
 8006384:	ffff3cb0 	.word	0xffff3cb0
 8006388:	4c000000 	.word	0x4c000000
 800638c:	7149f2ca 	.word	0x7149f2ca
 8006390:	f149f2ca 	.word	0xf149f2ca
 8006394:	0da24260 	.word	0x0da24260
 8006398:	8da24260 	.word	0x8da24260
 800639c:	33000000 	.word	0x33000000

080063a0 <with_errnof>:
 80063a0:	b510      	push	{r4, lr}
 80063a2:	ed2d 8b02 	vpush	{d8}
 80063a6:	eeb0 8a40 	vmov.f32	s16, s0
 80063aa:	4604      	mov	r4, r0
 80063ac:	f7fd fb56 	bl	8003a5c <__errno>
 80063b0:	eeb0 0a48 	vmov.f32	s0, s16
 80063b4:	ecbd 8b02 	vpop	{d8}
 80063b8:	6004      	str	r4, [r0, #0]
 80063ba:	bd10      	pop	{r4, pc}

080063bc <xflowf>:
 80063bc:	b130      	cbz	r0, 80063cc <xflowf+0x10>
 80063be:	eef1 7a40 	vneg.f32	s15, s0
 80063c2:	ee27 0a80 	vmul.f32	s0, s15, s0
 80063c6:	2022      	movs	r0, #34	@ 0x22
 80063c8:	f7ff bfea 	b.w	80063a0 <with_errnof>
 80063cc:	eef0 7a40 	vmov.f32	s15, s0
 80063d0:	e7f7      	b.n	80063c2 <xflowf+0x6>
	...

080063d4 <__math_uflowf>:
 80063d4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80063dc <__math_uflowf+0x8>
 80063d8:	f7ff bff0 	b.w	80063bc <xflowf>
 80063dc:	10000000 	.word	0x10000000

080063e0 <__math_oflowf>:
 80063e0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80063e8 <__math_oflowf+0x8>
 80063e4:	f7ff bfea 	b.w	80063bc <xflowf>
 80063e8:	70000000 	.word	0x70000000

080063ec <__ieee754_sqrtf>:
 80063ec:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80063f0:	4770      	bx	lr
	...

080063f4 <__ieee754_logf>:
 80063f4:	ee10 3a10 	vmov	r3, s0
 80063f8:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80063fc:	d106      	bne.n	800640c <__ieee754_logf+0x18>
 80063fe:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8006598 <__ieee754_logf+0x1a4>
 8006402:	eddf 7a66 	vldr	s15, [pc, #408]	@ 800659c <__ieee754_logf+0x1a8>
 8006406:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800640a:	4770      	bx	lr
 800640c:	2b00      	cmp	r3, #0
 800640e:	461a      	mov	r2, r3
 8006410:	da02      	bge.n	8006418 <__ieee754_logf+0x24>
 8006412:	ee30 7a40 	vsub.f32	s14, s0, s0
 8006416:	e7f4      	b.n	8006402 <__ieee754_logf+0xe>
 8006418:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800641c:	db02      	blt.n	8006424 <__ieee754_logf+0x30>
 800641e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006422:	4770      	bx	lr
 8006424:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006428:	bfb8      	it	lt
 800642a:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 80065a0 <__ieee754_logf+0x1ac>
 800642e:	485d      	ldr	r0, [pc, #372]	@ (80065a4 <__ieee754_logf+0x1b0>)
 8006430:	bfbe      	ittt	lt
 8006432:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8006436:	f06f 0118 	mvnlt.w	r1, #24
 800643a:	ee17 2a90 	vmovlt	r2, s15
 800643e:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8006442:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8006446:	4410      	add	r0, r2
 8006448:	bfa8      	it	ge
 800644a:	2100      	movge	r1, #0
 800644c:	3b7f      	subs	r3, #127	@ 0x7f
 800644e:	440b      	add	r3, r1
 8006450:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 8006454:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 8006458:	4311      	orrs	r1, r2
 800645a:	ee00 1a10 	vmov	s0, r1
 800645e:	4952      	ldr	r1, [pc, #328]	@ (80065a8 <__ieee754_logf+0x1b4>)
 8006460:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 8006464:	f102 000f 	add.w	r0, r2, #15
 8006468:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800646c:	4001      	ands	r1, r0
 800646e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006472:	bb89      	cbnz	r1, 80064d8 <__ieee754_logf+0xe4>
 8006474:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800647c:	d10f      	bne.n	800649e <__ieee754_logf+0xaa>
 800647e:	2b00      	cmp	r3, #0
 8006480:	f000 8087 	beq.w	8006592 <__ieee754_logf+0x19e>
 8006484:	ee07 3a90 	vmov	s15, r3
 8006488:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 80065ac <__ieee754_logf+0x1b8>
 800648c:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 80065b0 <__ieee754_logf+0x1bc>
 8006490:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006494:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006498:	eea7 0a87 	vfma.f32	s0, s15, s14
 800649c:	4770      	bx	lr
 800649e:	eddf 6a45 	vldr	s13, [pc, #276]	@ 80065b4 <__ieee754_logf+0x1c0>
 80064a2:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80064a6:	eee0 7a66 	vfms.f32	s15, s0, s13
 80064aa:	ee20 7a00 	vmul.f32	s14, s0, s0
 80064ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80064b2:	b913      	cbnz	r3, 80064ba <__ieee754_logf+0xc6>
 80064b4:	ee30 0a47 	vsub.f32	s0, s0, s14
 80064b8:	4770      	bx	lr
 80064ba:	ee07 3a90 	vmov	s15, r3
 80064be:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80065ac <__ieee754_logf+0x1b8>
 80064c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064c6:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80064ca:	ee37 0a40 	vsub.f32	s0, s14, s0
 80064ce:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80065b0 <__ieee754_logf+0x1bc>
 80064d2:	ee97 0a87 	vfnms.f32	s0, s15, s14
 80064d6:	4770      	bx	lr
 80064d8:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80064dc:	ee70 7a27 	vadd.f32	s15, s0, s15
 80064e0:	eddf 5a35 	vldr	s11, [pc, #212]	@ 80065b8 <__ieee754_logf+0x1c4>
 80064e4:	eddf 4a35 	vldr	s9, [pc, #212]	@ 80065bc <__ieee754_logf+0x1c8>
 80064e8:	4935      	ldr	r1, [pc, #212]	@ (80065c0 <__ieee754_logf+0x1cc>)
 80064ea:	ee80 6a27 	vdiv.f32	s12, s0, s15
 80064ee:	4411      	add	r1, r2
 80064f0:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 80064f4:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 80064f8:	430a      	orrs	r2, r1
 80064fa:	2a00      	cmp	r2, #0
 80064fc:	ee07 3a90 	vmov	s15, r3
 8006500:	ee26 5a06 	vmul.f32	s10, s12, s12
 8006504:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006508:	ee25 7a05 	vmul.f32	s14, s10, s10
 800650c:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 80065c4 <__ieee754_logf+0x1d0>
 8006510:	eee7 7a25 	vfma.f32	s15, s14, s11
 8006514:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 80065c8 <__ieee754_logf+0x1d4>
 8006518:	eee7 5a87 	vfma.f32	s11, s15, s14
 800651c:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 80065cc <__ieee754_logf+0x1d8>
 8006520:	eee7 7a24 	vfma.f32	s15, s14, s9
 8006524:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 80065d0 <__ieee754_logf+0x1dc>
 8006528:	eee7 4a87 	vfma.f32	s9, s15, s14
 800652c:	eddf 7a29 	vldr	s15, [pc, #164]	@ 80065d4 <__ieee754_logf+0x1e0>
 8006530:	eee4 7a87 	vfma.f32	s15, s9, s14
 8006534:	ee67 7a85 	vmul.f32	s15, s15, s10
 8006538:	eee5 7a87 	vfma.f32	s15, s11, s14
 800653c:	dd1a      	ble.n	8006574 <__ieee754_logf+0x180>
 800653e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006542:	ee20 7a07 	vmul.f32	s14, s0, s14
 8006546:	ee27 7a00 	vmul.f32	s14, s14, s0
 800654a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800654e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006552:	b913      	cbnz	r3, 800655a <__ieee754_logf+0x166>
 8006554:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006558:	e7ac      	b.n	80064b4 <__ieee754_logf+0xc0>
 800655a:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 80065ac <__ieee754_logf+0x1b8>
 800655e:	eee6 7a86 	vfma.f32	s15, s13, s12
 8006562:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006566:	ee37 0a40 	vsub.f32	s0, s14, s0
 800656a:	eddf 7a11 	vldr	s15, [pc, #68]	@ 80065b0 <__ieee754_logf+0x1bc>
 800656e:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8006572:	4770      	bx	lr
 8006574:	ee70 7a67 	vsub.f32	s15, s0, s15
 8006578:	ee67 7a86 	vmul.f32	s15, s15, s12
 800657c:	b913      	cbnz	r3, 8006584 <__ieee754_logf+0x190>
 800657e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006582:	4770      	bx	lr
 8006584:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80065ac <__ieee754_logf+0x1b8>
 8006588:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800658c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8006590:	e7eb      	b.n	800656a <__ieee754_logf+0x176>
 8006592:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 800659c <__ieee754_logf+0x1a8>
 8006596:	4770      	bx	lr
 8006598:	cc000000 	.word	0xcc000000
 800659c:	00000000 	.word	0x00000000
 80065a0:	4c000000 	.word	0x4c000000
 80065a4:	004afb20 	.word	0x004afb20
 80065a8:	007ffff0 	.word	0x007ffff0
 80065ac:	3717f7d1 	.word	0x3717f7d1
 80065b0:	3f317180 	.word	0x3f317180
 80065b4:	3eaaaaab 	.word	0x3eaaaaab
 80065b8:	3e1cd04f 	.word	0x3e1cd04f
 80065bc:	3e178897 	.word	0x3e178897
 80065c0:	ffcf5c30 	.word	0xffcf5c30
 80065c4:	3e638e29 	.word	0x3e638e29
 80065c8:	3ecccccd 	.word	0x3ecccccd
 80065cc:	3e3a3325 	.word	0x3e3a3325
 80065d0:	3e924925 	.word	0x3e924925
 80065d4:	3f2aaaab 	.word	0x3f2aaaab

080065d8 <_init>:
 80065d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065da:	bf00      	nop
 80065dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065de:	bc08      	pop	{r3}
 80065e0:	469e      	mov	lr, r3
 80065e2:	4770      	bx	lr

080065e4 <_fini>:
 80065e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065e6:	bf00      	nop
 80065e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ea:	bc08      	pop	{r3}
 80065ec:	469e      	mov	lr, r3
 80065ee:	4770      	bx	lr
